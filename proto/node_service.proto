syntax = "proto3";

option go_package = "scmc/rpc/pb/node";

package node;

service Node {
  rpc List(ListRequest) returns (ListReply) {}
  rpc Create(CreateRequest) returns (CreateReply) {}
  rpc Remove(RemoveRequest) returns (RemoveReply) {}
  rpc Status(StatusRequest) returns (StatusReply) {}
  rpc Update(UpdateRequest) returns (UpdateReply) {}
  rpc QueryLog(QueryLogRequest) returns (QueryLogReply) {}
  rpc SetLogRead(SetLogReadRequest) returns (SetLogReadReply) {}
  // TODO 分页查询
}

message ListRequest {}

message ListReply {
    repeated NodeInfo nodes = 1;
}

message CreateRequest {
    string name = 1;
    string address = 2;
    string comment = 3;
}

message CreateReply {
    int64 id = 1;
}

message RemoveRequest {
    repeated int64 ids = 1;
}

message RemoveReply {}

message StatusRequest {
    repeated int64 node_ids = 1;
}

message StatusReply {
    repeated NodeStatus status_list = 1;
}

message UpdateRequest {
    int64 node_id = 1;
    string name = 2;
    string comment = 3;
    ResourceLimit resource_limit = 4;
}

message UpdateReply {}

message QueryLogRequest {
    int64 start_time = 1;
    int64 end_time = 2;
    string level = 3;   // 日志级别 "info" "warn"
    int64 node_id = 4;
    string container_id = 5;

    int64 offset = 6;
    int64 limit = 7;    // 数值过大后台返回参数错误
}

message QueryLogReply {
    repeated Log logs = 1;
}

message SetLogReadRequest {
    repeated int64 ids = 1;
    bool have_read = 2;
}

message SetLogReadReply {}

/***** DATA TYPES *****/

message NodeInfo {
    int64 id = 1;
    string name = 2;
    string address = 3;
    string comment = 4;
    int64 unread_warn = 5;

    NodeStatus status = 21;
    ResourceLimit resource_limit = 22;
}

enum NodeState {
    Offline = 0;
    Unknown = 1;
    Online  = 10;
}

message ContainerStat {
    int64 total = 1;
    int64 running = 2;
}

message CpuStat {
    double total = 1;
    double used = 2;
    double used_percentage = 3;
}

message MemoryStat {
    uint64 total = 1;
    uint64 used = 2;
    uint64 free = 3;
    double used_percentage = 4;
}

message NodeStatus {
    int64 node_id = 1;
    int64 state   = 2;    // NodeState

    ContainerStat container_stat = 3;
    CpuStat       cpu_stat       = 4;
    MemoryStat    mem_stat       = 5;

    // TODO disk network, etc;
}

message ResourceLimit {
    double cpu_limit = 1;       // CPU使用核心数
    double memory_limit = 2;    // 内存限制 单位MB
    double disk_limit = 3;      // 磁盘限制 单位MB
}

message Log {
    int64 id = 1;
    string level = 2;
    string username = 3;
    string operation = 4;
    int64 node_id = 5;
    string container_id = 6;
    string details = 7;
    bool have_read = 8;
    string created = 9;
}