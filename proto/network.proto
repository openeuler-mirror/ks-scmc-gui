syntax = "proto3";

option go_package = "scmc/rpc/pb/network";

package network;

service Network {
    rpc List(ListRequest) returns (ListReply) {}
    rpc Connect(ConnectRequest) returns (ConnectReply) {}
    rpc Disconnect(DisconnectRequest) returns (DisconnectReply) {}

    rpc ListIPtables(ListIPtablesRequest) returns (ListIPtablesReply) {}
    rpc EnableIPtables(EnableIPtablesRequest) returns (EnableIPtablesReply) {}
    rpc CreateIPtables(CreateIPtablesRequest) returns (CreateIPtablesReply) {}
    rpc ModifyIPtables(ModifyIPtablesRequest) returns (ModifyIPtablesReply) {}
    rpc RemoveIPtables(RemoveIPtablesRequest) returns (RemoveIPtablesReply) {}

    // not implemented
    rpc Create(CreateRequest) returns (CreateReply) {}
    rpc Remove(RemoveRequest) returns (RemoveReply) {}
}

message ListRequest {
    int64 node_id = 1;  // -1返回所有节点的网卡信息
}

message ListReply {
    repeated NetworkInterface real_ifs    = 1;
    repeated NetworkInterface virtual_ifs = 2;
}

message ConnectRequest {
    int64  node_id       = 1;  // required
    string interface     = 2;  // required
    string container_id  = 3;  // required
    string ip_address    = 4;  // required
    int32  ip_prefix_len = 5;
    string mac_address   = 6;
    string gateway       = 7;
}

message ConnectReply {}

message DisconnectRequest {
    int64  node_id      = 1;  // required
    string interface    = 2;  // required
    string container_id = 3;  // required
}

message DisconnectReply {}

message CreateRequest {}

message CreateReply {}

message RemoveRequest {}

message RemoveReply {}

message ListIPtablesRequest {
    int64  node_id      = 1;  //require
    string container_id = 2;  //for container require
}

message ListIPtablesReply {
    repeated ChianRule chain_rules = 1;
}

message EnableIPtablesRequest {
    int64  node_id      = 1;  //require
    string container_id = 2;  //for container require
    bool   enable       = 3;
}

message EnableIPtablesReply {}

message CreateIPtablesRequest {
    int64    node_id      = 1;  //require
    string   container_id = 2;  //for container require
    string   chain        = 3;
    RuleInfo rule         = 4;  //require
}

message CreateIPtablesReply {}

message ModifyIPtablesRequest {
    int64    node_id      = 1;  //require
    string   container_id = 2;  //for container require
    string   old_chain    = 3;
    string   new_chain    = 4;
    RuleInfo old_rule     = 5;  //require
    RuleInfo new_rule     = 6;  //require
}

message ModifyIPtablesReply {}

message RemoveIPtablesRequest {
    int64    node_id      = 1;  //require
    string   container_id = 2;  //for container require
    string   chain        = 3;
    RuleInfo rule         = 4;  //require
}

message RemoveIPtablesReply {}

/***** DATA TYPES *****/

message NetworkInterface {
    int64  node_id     = 1;
    string name        = 2;
    string bind_real   = 3;  // 关联的物理网卡
    string ip_address  = 4;
    string ip_mask     = 5;
    int32  ip_mask_len = 6;
    string gateway     = 7;
    string mac_address = 8;

    bool is_up   = 21;  // 是否启用
    bool is_real = 22;  // 是否物理网卡

    repeated ContainerNetwork containers = 31;
}

message ContainerNetwork {
    string interface    = 1;
    string container_id = 2;
    string ip_address   = 3;
    string ip_mask      = 4;
    int32  ip_mask_len  = 5;
    string gateway      = 6;
    string mac_address  = 7;
}

message RuleInfo {
    string source        = 1;  //源ip 可为ip或者网段
    string destination   = 2;  //目标ip 可为ip或者网段
    string protocol      = 3;  //协议 tcp udp
    string src_port      = 4;  //源端口 与protocol的TCP、UDP一起使用
    string dest_port     = 5;  //目标端口 与protocol的TCP、UDP一起使用
    string in_interface  = 6;  //输入网卡
    string out_interface = 7;  //输出网卡
    string policy        = 8;  //动作 ACCEPT DROP REJECT， 使用白名单模式，默认为ACCEPT 客户端不填
}

message ChianRule {
    string            chain = 1;
    repeated RuleInfo rule  = 2;
}
