syntax = "proto3";

option go_package = "scmc/rpc/pb/container";

package container;

message Port {
    string ip = 1;
    uint32 private_port = 2;
    uint32 public_port = 3;
    string type = 4;
}

message MountPoint {
    string type = 1;
    string name = 2;
    string source = 3;
    string destination = 4;
    string driver = 5;
    string mode = 6;
    bool rw = 7;
    string propagation = 8;
}

message IPAMConfig {
    string ipv4_address = 1;
    string ipv6_address = 2;
    repeated string link_local_ips = 3;
}

message EndpointSetting {
    IPAMConfig  ipam_config = 1;
    repeated string links = 2;
    repeated string aliases = 3;
    string network_id = 4;
    string endpoint_id = 5;
    string gateway = 6;
    string ip_address = 7;
    int32 ip_prefix_len = 8;
    string ipv6_gateway = 9;
    string global_ipv6_address = 10;
    int32 global_ipv6_prefix_len = 11;
    string mac_address = 12;
    map<string, string> driver_opts = 13;
}

message NodeContainer {
    int64 node_id = 1;
    string node_address = 2;
    ContainerInfo info = 10;
}

message ContainerInfo {
    string id = 1;
    string name = 2;
    string image = 3;
    string image_id = 4;
    string command = 5;
    string state = 6;   // "created", "running", "paused", "restarting", "removing", "exited", or "dead"
    int64 created = 7;
    int64 size_rw = 8;
    int64 size_root_fs = 9;
    map<string, string> labels = 10;

    ResourceStat resource_stat = 101;
}

message ContainerIdList {
    int64 node_id = 1;
    repeated string container_ids = 2;
}

message Mount {
    string type = 1;    // "bind" "volume" "tmpfs" "npipe"
    string source = 2;
    string target = 3;
    bool read_only = 4;
    string consistency = 5; // "consistent" "cached" "delegated" "default"

	// bind_options
	// volume_options
	// tmpfs_options 
}

message RestartPolicy {
	string name = 1;
	int32 max_retry = 2;
}

message DeviceMapping {
	string path_on_host = 1;
	string path_in_container = 2;
	string cgroup_permissions = 3;
}

message ResourceConfig {
    int64 nano_cpus = 1;    // CPU quota in units of 10e-9 CPUs
    int64 cpu_shares = 2;   // CPU shares (relative weight vs. other containers)

    int64 mem_limit = 11;   // Memory limit (in bytes)
    int64 mem_soft_limit = 12;  // Memory soft limit (in bytes)

    repeated DeviceMapping devices = 101; // List of devices to map inside the container
}

message HostConfig {
    string network_mode = 1;
    RestartPolicy restart_policy = 2;
    bool auto_remove = 3;
    string ipc_mode = 4;
    repeated Mount mounts = 5;
    bool privileged = 6;

    ResourceConfig resource_config = 7;
}

message ContainerConfig {
    string hostname = 1;
    string domain_name = 2;
    string user = 3;   // user user:group
    map<string, string> env = 4;

    string image = 5;
    string working_dir = 6;

    repeated string entrypoint = 7;
    repeated string cmd = 8;

    bool network_disabled = 9;

    map<string, string> labels = 10;
}

message CpuStat {
    double core_used = 1;
}

message MemoryStat {
    uint64 used = 1;
    uint64 limit = 2;
    double percentage = 3;
}

message BlockStat {
    uint64 read = 1;
    uint64 write = 2;
}

message NetworkStats {
    uint64 rx = 1;
    uint64 tx = 2;
}

message ResourceStat {
    string id = 1;
    string state = 2;
    CpuStat cpu_stat = 3;
    MemoryStat mem_stat = 4;
    BlockStat block_stat = 5;
    NetworkStats net_stat = 6;
}

message NetworkAddress {
    string addr = 1;
    int32 prefix_len = 2;
}

message NetworkSettingBase {
    string bridge = 1;
    string sandbox_id = 2;
    bool hairpin_mode = 3;
    string link_local_ipv6_address = 4;
    int32 link_local_ipv6_prefix_len = 5;
    string sandbox_key = 6;
    NetworkAddress secondary_ip_addresses = 7;
    NetworkAddress secondary_ipv6_addresses = 8;
    string endpoint_id = 9;
    string gateway = 10;
    string global_ipv6_address = 11;
    int32 global_ipv6_prefix_len = 12;
    string ip_address = 13;
    int32 ip_prefix_len = 14;
    string ipv6_gateway = 15;
    string mac_address = 16;
}
