// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user_service.proto

#include "user_service.pb.h"
#include "user_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace user {

static const char* User_method_names[] = {
  "/user.User/Signup",
  "/user.User/Login",
  "/user.User/Logout",
  "/user.User/UpdatePassword",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Signup_(User_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(User_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(User_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePassword_(User_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::Signup(::grpc::ClientContext* context, const ::user::SignupRequest& request, ::user::SignupReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Signup_, context, request, response);
}

void User::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::user::SignupRequest* request, ::user::SignupReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::SignupReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::user::SignupRequest* request, ::user::SignupReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, reactor);
}

void User::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::SignupReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::SignupReply>* User::Stub::AsyncSignupRaw(::grpc::ClientContext* context, const ::user::SignupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::SignupReply>::Create(channel_.get(), cq, rpcmethod_Signup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::user::SignupReply>* User::Stub::PrepareAsyncSignupRaw(::grpc::ClientContext* context, const ::user::SignupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::SignupReply>::Create(channel_.get(), cq, rpcmethod_Signup_, context, request, false);
}

::grpc::Status User::Stub::Login(::grpc::ClientContext* context, const ::user::LoginRequest& request, ::user::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void User::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::user::LoginRequest* request, ::user::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::user::LoginRequest* request, ::user::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void User::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::LoginReply>* User::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::user::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::user::LoginReply>* User::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::user::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status User::Stub::Logout(::grpc::ClientContext* context, const ::user::LogoutRequest& request, ::user::LogoutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void User::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::user::LogoutRequest* request, ::user::LogoutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::LogoutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::user::LogoutRequest* request, ::user::LogoutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

void User::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::LogoutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::LogoutReply>* User::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::user::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::LogoutReply>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::user::LogoutReply>* User::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::user::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::LogoutReply>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status User::Stub::UpdatePassword(::grpc::ClientContext* context, const ::user::UpdatePasswordRequest& request, ::user::UpdatePasswordReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePassword_, context, request, response);
}

void User::Stub::experimental_async::UpdatePassword(::grpc::ClientContext* context, const ::user::UpdatePasswordRequest* request, ::user::UpdatePasswordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePassword_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::UpdatePassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::UpdatePasswordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePassword_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::UpdatePassword(::grpc::ClientContext* context, const ::user::UpdatePasswordRequest* request, ::user::UpdatePasswordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePassword_, context, request, response, reactor);
}

void User::Stub::experimental_async::UpdatePassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::user::UpdatePasswordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::UpdatePasswordReply>* User::Stub::AsyncUpdatePasswordRaw(::grpc::ClientContext* context, const ::user::UpdatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::UpdatePasswordReply>::Create(channel_.get(), cq, rpcmethod_UpdatePassword_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::user::UpdatePasswordReply>* User::Stub::PrepareAsyncUpdatePasswordRaw(::grpc::ClientContext* context, const ::user::UpdatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::user::UpdatePasswordReply>::Create(channel_.get(), cq, rpcmethod_UpdatePassword_, context, request, false);
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::SignupRequest, ::user::SignupReply>(
          [](User::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::user::SignupRequest* req,
             ::user::SignupReply* resp) {
               return service->Signup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::LoginRequest, ::user::LoginReply>(
          [](User::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::user::LoginRequest* req,
             ::user::LoginReply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::LogoutRequest, ::user::LogoutReply>(
          [](User::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::user::LogoutRequest* req,
             ::user::LogoutReply* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::UpdatePasswordRequest, ::user::UpdatePasswordReply>(
          [](User::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::user::UpdatePasswordRequest* req,
             ::user::UpdatePasswordReply* resp) {
               return service->UpdatePassword(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::Signup(::grpc::ServerContext* context, const ::user::SignupRequest* request, ::user::SignupReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Login(::grpc::ServerContext* context, const ::user::LoginRequest* request, ::user::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Logout(::grpc::ServerContext* context, const ::user::LogoutRequest* request, ::user::LogoutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UpdatePassword(::grpc::ServerContext* context, const ::user::UpdatePasswordRequest* request, ::user::UpdatePasswordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

