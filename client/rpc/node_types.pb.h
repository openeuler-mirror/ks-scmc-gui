// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5ftypes_2eproto;
namespace node {
class ContainerStat;
class ContainerStatDefaultTypeInternal;
extern ContainerStatDefaultTypeInternal _ContainerStat_default_instance_;
class CpuStat;
class CpuStatDefaultTypeInternal;
extern CpuStatDefaultTypeInternal _CpuStat_default_instance_;
class MemoryStat;
class MemoryStatDefaultTypeInternal;
extern MemoryStatDefaultTypeInternal _MemoryStat_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeStatus;
class NodeStatusDefaultTypeInternal;
extern NodeStatusDefaultTypeInternal _NodeStatus_default_instance_;
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::ContainerStat* Arena::CreateMaybeMessage<::node::ContainerStat>(Arena*);
template<> ::node::CpuStat* Arena::CreateMaybeMessage<::node::CpuStat>(Arena*);
template<> ::node::MemoryStat* Arena::CreateMaybeMessage<::node::MemoryStat>(Arena*);
template<> ::node::NodeInfo* Arena::CreateMaybeMessage<::node::NodeInfo>(Arena*);
template<> ::node::NodeStatus* Arena::CreateMaybeMessage<::node::NodeStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {

enum NodeState : int {
  Offline = 0,
  Unknown = 1,
  Online = 10,
  NodeState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeState_IsValid(int value);
constexpr NodeState NodeState_MIN = Offline;
constexpr NodeState NodeState_MAX = Online;
constexpr int NodeState_ARRAYSIZE = NodeState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeState_descriptor();
template<typename T>
inline const std::string& NodeState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeState_descriptor(), enum_t_value);
}
inline bool NodeState_Parse(
    const std::string& name, NodeState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeState>(
    NodeState_descriptor(), name, value);
}
// ===================================================================

class NodeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {};
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5ftypes_2eproto);
    return ::descriptor_table_node_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddressFieldNumber = 3,
    kCommentFieldNumber = 4,
    kStatusFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comment(
      std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .node.NodeStatus status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::node::NodeStatus& status() const;
  ::node::NodeStatus* release_status();
  ::node::NodeStatus* mutable_status();
  void set_allocated_status(::node::NodeStatus* status);
  private:
  const ::node::NodeStatus& _internal_status() const;
  ::node::NodeStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::node::NodeStatus* status);
  ::node::NodeStatus* unsafe_arena_release_status();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::node::NodeStatus* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ContainerStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.ContainerStat) */ {
 public:
  inline ContainerStat() : ContainerStat(nullptr) {};
  virtual ~ContainerStat();

  ContainerStat(const ContainerStat& from);
  ContainerStat(ContainerStat&& from) noexcept
    : ContainerStat() {
    *this = ::std::move(from);
  }

  inline ContainerStat& operator=(const ContainerStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStat& operator=(ContainerStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStat* internal_default_instance() {
    return reinterpret_cast<const ContainerStat*>(
               &_ContainerStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContainerStat& a, ContainerStat& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStat* New() const final {
    return CreateMaybeMessage<ContainerStat>(nullptr);
  }

  ContainerStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStat& from);
  void MergeFrom(const ContainerStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.ContainerStat";
  }
  protected:
  explicit ContainerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5ftypes_2eproto);
    return ::descriptor_table_node_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kRunningFieldNumber = 2,
  };
  // int64 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 running = 2;
  void clear_running();
  ::PROTOBUF_NAMESPACE_ID::int64 running() const;
  void set_running(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_running() const;
  void _internal_set_running(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.ContainerStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  ::PROTOBUF_NAMESPACE_ID::int64 running_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class CpuStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CpuStat) */ {
 public:
  inline CpuStat() : CpuStat(nullptr) {};
  virtual ~CpuStat();

  CpuStat(const CpuStat& from);
  CpuStat(CpuStat&& from) noexcept
    : CpuStat() {
    *this = ::std::move(from);
  }

  inline CpuStat& operator=(const CpuStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuStat& operator=(CpuStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuStat* internal_default_instance() {
    return reinterpret_cast<const CpuStat*>(
               &_CpuStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuStat& a, CpuStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuStat* New() const final {
    return CreateMaybeMessage<CpuStat>(nullptr);
  }

  CpuStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuStat& from);
  void MergeFrom(const CpuStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CpuStat";
  }
  protected:
  explicit CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5ftypes_2eproto);
    return ::descriptor_table_node_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kUsedFieldNumber = 2,
    kUsedPercentageFieldNumber = 3,
  };
  // double total = 1;
  void clear_total();
  double total() const;
  void set_total(double value);
  private:
  double _internal_total() const;
  void _internal_set_total(double value);
  public:

  // double used = 2;
  void clear_used();
  double used() const;
  void set_used(double value);
  private:
  double _internal_used() const;
  void _internal_set_used(double value);
  public:

  // double used_percentage = 3;
  void clear_used_percentage();
  double used_percentage() const;
  void set_used_percentage(double value);
  private:
  double _internal_used_percentage() const;
  void _internal_set_used_percentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:node.CpuStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double total_;
  double used_;
  double used_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class MemoryStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.MemoryStat) */ {
 public:
  inline MemoryStat() : MemoryStat(nullptr) {};
  virtual ~MemoryStat();

  MemoryStat(const MemoryStat& from);
  MemoryStat(MemoryStat&& from) noexcept
    : MemoryStat() {
    *this = ::std::move(from);
  }

  inline MemoryStat& operator=(const MemoryStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryStat& operator=(MemoryStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryStat* internal_default_instance() {
    return reinterpret_cast<const MemoryStat*>(
               &_MemoryStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryStat& a, MemoryStat& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryStat* New() const final {
    return CreateMaybeMessage<MemoryStat>(nullptr);
  }

  MemoryStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryStat& from);
  void MergeFrom(const MemoryStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.MemoryStat";
  }
  protected:
  explicit MemoryStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5ftypes_2eproto);
    return ::descriptor_table_node_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kUsedFieldNumber = 2,
    kFreeFieldNumber = 3,
    kUsedPercentageFieldNumber = 4,
  };
  // uint64 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 used = 2;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 free = 3;
  void clear_free();
  ::PROTOBUF_NAMESPACE_ID::uint64 free() const;
  void set_free(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_free() const;
  void _internal_set_free(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double used_percentage = 4;
  void clear_used_percentage();
  double used_percentage() const;
  void set_used_percentage(double value);
  private:
  double _internal_used_percentage() const;
  void _internal_set_used_percentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:node.MemoryStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 free_;
  double used_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class NodeStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.NodeStatus) */ {
 public:
  inline NodeStatus() : NodeStatus(nullptr) {};
  virtual ~NodeStatus();

  NodeStatus(const NodeStatus& from);
  NodeStatus(NodeStatus&& from) noexcept
    : NodeStatus() {
    *this = ::std::move(from);
  }

  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStatus& operator=(NodeStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeStatus* internal_default_instance() {
    return reinterpret_cast<const NodeStatus*>(
               &_NodeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NodeStatus& a, NodeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeStatus* New() const final {
    return CreateMaybeMessage<NodeStatus>(nullptr);
  }

  NodeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.NodeStatus";
  }
  protected:
  explicit NodeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5ftypes_2eproto);
    return ::descriptor_table_node_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerStatFieldNumber = 3,
    kCpuStatFieldNumber = 4,
    kMemStatFieldNumber = 5,
    kNodeIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .node.ContainerStat container_stat = 3;
  bool has_container_stat() const;
  private:
  bool _internal_has_container_stat() const;
  public:
  void clear_container_stat();
  const ::node::ContainerStat& container_stat() const;
  ::node::ContainerStat* release_container_stat();
  ::node::ContainerStat* mutable_container_stat();
  void set_allocated_container_stat(::node::ContainerStat* container_stat);
  private:
  const ::node::ContainerStat& _internal_container_stat() const;
  ::node::ContainerStat* _internal_mutable_container_stat();
  public:
  void unsafe_arena_set_allocated_container_stat(
      ::node::ContainerStat* container_stat);
  ::node::ContainerStat* unsafe_arena_release_container_stat();

  // .node.CpuStat cpu_stat = 4;
  bool has_cpu_stat() const;
  private:
  bool _internal_has_cpu_stat() const;
  public:
  void clear_cpu_stat();
  const ::node::CpuStat& cpu_stat() const;
  ::node::CpuStat* release_cpu_stat();
  ::node::CpuStat* mutable_cpu_stat();
  void set_allocated_cpu_stat(::node::CpuStat* cpu_stat);
  private:
  const ::node::CpuStat& _internal_cpu_stat() const;
  ::node::CpuStat* _internal_mutable_cpu_stat();
  public:
  void unsafe_arena_set_allocated_cpu_stat(
      ::node::CpuStat* cpu_stat);
  ::node::CpuStat* unsafe_arena_release_cpu_stat();

  // .node.MemoryStat mem_stat = 5;
  bool has_mem_stat() const;
  private:
  bool _internal_has_mem_stat() const;
  public:
  void clear_mem_stat();
  const ::node::MemoryStat& mem_stat() const;
  ::node::MemoryStat* release_mem_stat();
  ::node::MemoryStat* mutable_mem_stat();
  void set_allocated_mem_stat(::node::MemoryStat* mem_stat);
  private:
  const ::node::MemoryStat& _internal_mem_stat() const;
  ::node::MemoryStat* _internal_mutable_mem_stat();
  public:
  void unsafe_arena_set_allocated_mem_stat(
      ::node::MemoryStat* mem_stat);
  ::node::MemoryStat* unsafe_arena_release_mem_stat();

  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.NodeStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::node::ContainerStat* container_stat_;
  ::node::CpuStat* cpu_stat_;
  ::node::MemoryStat* mem_stat_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeInfo

// int64 id = 1;
inline void NodeInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo::id() const {
  // @@protoc_insertion_point(field_get:node.NodeInfo.id)
  return _internal_id();
}
inline void NodeInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void NodeInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:node.NodeInfo.id)
}

// string name = 2;
inline void NodeInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NodeInfo::name() const {
  // @@protoc_insertion_point(field_get:node.NodeInfo.name)
  return _internal_name();
}
inline void NodeInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:node.NodeInfo.name)
}
inline std::string* NodeInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:node.NodeInfo.name)
  return _internal_mutable_name();
}
inline const std::string& NodeInfo::_internal_name() const {
  return name_.Get();
}
inline void NodeInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:node.NodeInfo.name)
}
inline void NodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:node.NodeInfo.name)
}
inline void NodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:node.NodeInfo.name)
}
inline std::string* NodeInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:node.NodeInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:node.NodeInfo.name)
}
inline std::string* NodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:node.NodeInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeInfo.name)
}

// string address = 3;
inline void NodeInfo::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NodeInfo::address() const {
  // @@protoc_insertion_point(field_get:node.NodeInfo.address)
  return _internal_address();
}
inline void NodeInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:node.NodeInfo.address)
}
inline std::string* NodeInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:node.NodeInfo.address)
  return _internal_mutable_address();
}
inline const std::string& NodeInfo::_internal_address() const {
  return address_.Get();
}
inline void NodeInfo::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:node.NodeInfo.address)
}
inline void NodeInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:node.NodeInfo.address)
}
inline void NodeInfo::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:node.NodeInfo.address)
}
inline std::string* NodeInfo::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_address() {
  // @@protoc_insertion_point(field_release:node.NodeInfo.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:node.NodeInfo.address)
}
inline std::string* NodeInfo::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:node.NodeInfo.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeInfo.address)
}

// string comment = 4;
inline void NodeInfo::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NodeInfo::comment() const {
  // @@protoc_insertion_point(field_get:node.NodeInfo.comment)
  return _internal_comment();
}
inline void NodeInfo::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:node.NodeInfo.comment)
}
inline std::string* NodeInfo::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:node.NodeInfo.comment)
  return _internal_mutable_comment();
}
inline const std::string& NodeInfo::_internal_comment() const {
  return comment_.Get();
}
inline void NodeInfo::_internal_set_comment(const std::string& value) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_comment(std::string&& value) {
  
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:node.NodeInfo.comment)
}
inline void NodeInfo::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:node.NodeInfo.comment)
}
inline void NodeInfo::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:node.NodeInfo.comment)
}
inline std::string* NodeInfo::_internal_mutable_comment() {
  
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_comment() {
  // @@protoc_insertion_point(field_release:node.NodeInfo.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:node.NodeInfo.comment)
}
inline std::string* NodeInfo::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:node.NodeInfo.comment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return comment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_comment(
    std::string* comment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeInfo.comment)
}

// .node.NodeStatus status = 5;
inline bool NodeInfo::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NodeInfo::has_status() const {
  return _internal_has_status();
}
inline void NodeInfo::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::node::NodeStatus& NodeInfo::_internal_status() const {
  const ::node::NodeStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::node::NodeStatus*>(
      &::node::_NodeStatus_default_instance_);
}
inline const ::node::NodeStatus& NodeInfo::status() const {
  // @@protoc_insertion_point(field_get:node.NodeInfo.status)
  return _internal_status();
}
inline void NodeInfo::unsafe_arena_set_allocated_status(
    ::node::NodeStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeInfo.status)
}
inline ::node::NodeStatus* NodeInfo::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::node::NodeStatus* NodeInfo::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:node.NodeInfo.status)
  
  ::node::NodeStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::node::NodeStatus* NodeInfo::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::NodeStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::node::NodeStatus* NodeInfo::mutable_status() {
  // @@protoc_insertion_point(field_mutable:node.NodeInfo.status)
  return _internal_mutable_status();
}
inline void NodeInfo::set_allocated_status(::node::NodeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:node.NodeInfo.status)
}

// -------------------------------------------------------------------

// ContainerStat

// int64 total = 1;
inline void ContainerStat::clear_total() {
  total_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStat::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStat::total() const {
  // @@protoc_insertion_point(field_get:node.ContainerStat.total)
  return _internal_total();
}
inline void ContainerStat::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void ContainerStat::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:node.ContainerStat.total)
}

// int64 running = 2;
inline void ContainerStat::clear_running() {
  running_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStat::_internal_running() const {
  return running_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStat::running() const {
  // @@protoc_insertion_point(field_get:node.ContainerStat.running)
  return _internal_running();
}
inline void ContainerStat::_internal_set_running(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  running_ = value;
}
inline void ContainerStat::set_running(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:node.ContainerStat.running)
}

// -------------------------------------------------------------------

// CpuStat

// double total = 1;
inline void CpuStat::clear_total() {
  total_ = 0;
}
inline double CpuStat::_internal_total() const {
  return total_;
}
inline double CpuStat::total() const {
  // @@protoc_insertion_point(field_get:node.CpuStat.total)
  return _internal_total();
}
inline void CpuStat::_internal_set_total(double value) {
  
  total_ = value;
}
inline void CpuStat::set_total(double value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:node.CpuStat.total)
}

// double used = 2;
inline void CpuStat::clear_used() {
  used_ = 0;
}
inline double CpuStat::_internal_used() const {
  return used_;
}
inline double CpuStat::used() const {
  // @@protoc_insertion_point(field_get:node.CpuStat.used)
  return _internal_used();
}
inline void CpuStat::_internal_set_used(double value) {
  
  used_ = value;
}
inline void CpuStat::set_used(double value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:node.CpuStat.used)
}

// double used_percentage = 3;
inline void CpuStat::clear_used_percentage() {
  used_percentage_ = 0;
}
inline double CpuStat::_internal_used_percentage() const {
  return used_percentage_;
}
inline double CpuStat::used_percentage() const {
  // @@protoc_insertion_point(field_get:node.CpuStat.used_percentage)
  return _internal_used_percentage();
}
inline void CpuStat::_internal_set_used_percentage(double value) {
  
  used_percentage_ = value;
}
inline void CpuStat::set_used_percentage(double value) {
  _internal_set_used_percentage(value);
  // @@protoc_insertion_point(field_set:node.CpuStat.used_percentage)
}

// -------------------------------------------------------------------

// MemoryStat

// uint64 total = 1;
inline void MemoryStat::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::total() const {
  // @@protoc_insertion_point(field_get:node.MemoryStat.total)
  return _internal_total();
}
inline void MemoryStat::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void MemoryStat::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:node.MemoryStat.total)
}

// uint64 used = 2;
inline void MemoryStat::clear_used() {
  used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::used() const {
  // @@protoc_insertion_point(field_get:node.MemoryStat.used)
  return _internal_used();
}
inline void MemoryStat::_internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_ = value;
}
inline void MemoryStat::set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:node.MemoryStat.used)
}

// uint64 free = 3;
inline void MemoryStat::clear_free() {
  free_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::_internal_free() const {
  return free_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::free() const {
  // @@protoc_insertion_point(field_get:node.MemoryStat.free)
  return _internal_free();
}
inline void MemoryStat::_internal_set_free(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  free_ = value;
}
inline void MemoryStat::set_free(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:node.MemoryStat.free)
}

// double used_percentage = 4;
inline void MemoryStat::clear_used_percentage() {
  used_percentage_ = 0;
}
inline double MemoryStat::_internal_used_percentage() const {
  return used_percentage_;
}
inline double MemoryStat::used_percentage() const {
  // @@protoc_insertion_point(field_get:node.MemoryStat.used_percentage)
  return _internal_used_percentage();
}
inline void MemoryStat::_internal_set_used_percentage(double value) {
  
  used_percentage_ = value;
}
inline void MemoryStat::set_used_percentage(double value) {
  _internal_set_used_percentage(value);
  // @@protoc_insertion_point(field_set:node.MemoryStat.used_percentage)
}

// -------------------------------------------------------------------

// NodeStatus

// int64 node_id = 1;
inline void NodeStatus::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeStatus::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeStatus::node_id() const {
  // @@protoc_insertion_point(field_get:node.NodeStatus.node_id)
  return _internal_node_id();
}
inline void NodeStatus::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void NodeStatus::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:node.NodeStatus.node_id)
}

// int64 state = 2;
inline void NodeStatus::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeStatus::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeStatus::state() const {
  // @@protoc_insertion_point(field_get:node.NodeStatus.state)
  return _internal_state();
}
inline void NodeStatus::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  state_ = value;
}
inline void NodeStatus::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:node.NodeStatus.state)
}

// .node.ContainerStat container_stat = 3;
inline bool NodeStatus::_internal_has_container_stat() const {
  return this != internal_default_instance() && container_stat_ != nullptr;
}
inline bool NodeStatus::has_container_stat() const {
  return _internal_has_container_stat();
}
inline void NodeStatus::clear_container_stat() {
  if (GetArena() == nullptr && container_stat_ != nullptr) {
    delete container_stat_;
  }
  container_stat_ = nullptr;
}
inline const ::node::ContainerStat& NodeStatus::_internal_container_stat() const {
  const ::node::ContainerStat* p = container_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::node::ContainerStat*>(
      &::node::_ContainerStat_default_instance_);
}
inline const ::node::ContainerStat& NodeStatus::container_stat() const {
  // @@protoc_insertion_point(field_get:node.NodeStatus.container_stat)
  return _internal_container_stat();
}
inline void NodeStatus::unsafe_arena_set_allocated_container_stat(
    ::node::ContainerStat* container_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_stat_);
  }
  container_stat_ = container_stat;
  if (container_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeStatus.container_stat)
}
inline ::node::ContainerStat* NodeStatus::release_container_stat() {
  auto temp = unsafe_arena_release_container_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::node::ContainerStat* NodeStatus::unsafe_arena_release_container_stat() {
  // @@protoc_insertion_point(field_release:node.NodeStatus.container_stat)
  
  ::node::ContainerStat* temp = container_stat_;
  container_stat_ = nullptr;
  return temp;
}
inline ::node::ContainerStat* NodeStatus::_internal_mutable_container_stat() {
  
  if (container_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::ContainerStat>(GetArena());
    container_stat_ = p;
  }
  return container_stat_;
}
inline ::node::ContainerStat* NodeStatus::mutable_container_stat() {
  // @@protoc_insertion_point(field_mutable:node.NodeStatus.container_stat)
  return _internal_mutable_container_stat();
}
inline void NodeStatus::set_allocated_container_stat(::node::ContainerStat* container_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete container_stat_;
  }
  if (container_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(container_stat);
    if (message_arena != submessage_arena) {
      container_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_stat, submessage_arena);
    }
    
  } else {
    
  }
  container_stat_ = container_stat;
  // @@protoc_insertion_point(field_set_allocated:node.NodeStatus.container_stat)
}

// .node.CpuStat cpu_stat = 4;
inline bool NodeStatus::_internal_has_cpu_stat() const {
  return this != internal_default_instance() && cpu_stat_ != nullptr;
}
inline bool NodeStatus::has_cpu_stat() const {
  return _internal_has_cpu_stat();
}
inline void NodeStatus::clear_cpu_stat() {
  if (GetArena() == nullptr && cpu_stat_ != nullptr) {
    delete cpu_stat_;
  }
  cpu_stat_ = nullptr;
}
inline const ::node::CpuStat& NodeStatus::_internal_cpu_stat() const {
  const ::node::CpuStat* p = cpu_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::node::CpuStat*>(
      &::node::_CpuStat_default_instance_);
}
inline const ::node::CpuStat& NodeStatus::cpu_stat() const {
  // @@protoc_insertion_point(field_get:node.NodeStatus.cpu_stat)
  return _internal_cpu_stat();
}
inline void NodeStatus::unsafe_arena_set_allocated_cpu_stat(
    ::node::CpuStat* cpu_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_stat_);
  }
  cpu_stat_ = cpu_stat;
  if (cpu_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeStatus.cpu_stat)
}
inline ::node::CpuStat* NodeStatus::release_cpu_stat() {
  auto temp = unsafe_arena_release_cpu_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::node::CpuStat* NodeStatus::unsafe_arena_release_cpu_stat() {
  // @@protoc_insertion_point(field_release:node.NodeStatus.cpu_stat)
  
  ::node::CpuStat* temp = cpu_stat_;
  cpu_stat_ = nullptr;
  return temp;
}
inline ::node::CpuStat* NodeStatus::_internal_mutable_cpu_stat() {
  
  if (cpu_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::CpuStat>(GetArena());
    cpu_stat_ = p;
  }
  return cpu_stat_;
}
inline ::node::CpuStat* NodeStatus::mutable_cpu_stat() {
  // @@protoc_insertion_point(field_mutable:node.NodeStatus.cpu_stat)
  return _internal_mutable_cpu_stat();
}
inline void NodeStatus::set_allocated_cpu_stat(::node::CpuStat* cpu_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpu_stat_;
  }
  if (cpu_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpu_stat);
    if (message_arena != submessage_arena) {
      cpu_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_stat, submessage_arena);
    }
    
  } else {
    
  }
  cpu_stat_ = cpu_stat;
  // @@protoc_insertion_point(field_set_allocated:node.NodeStatus.cpu_stat)
}

// .node.MemoryStat mem_stat = 5;
inline bool NodeStatus::_internal_has_mem_stat() const {
  return this != internal_default_instance() && mem_stat_ != nullptr;
}
inline bool NodeStatus::has_mem_stat() const {
  return _internal_has_mem_stat();
}
inline void NodeStatus::clear_mem_stat() {
  if (GetArena() == nullptr && mem_stat_ != nullptr) {
    delete mem_stat_;
  }
  mem_stat_ = nullptr;
}
inline const ::node::MemoryStat& NodeStatus::_internal_mem_stat() const {
  const ::node::MemoryStat* p = mem_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::node::MemoryStat*>(
      &::node::_MemoryStat_default_instance_);
}
inline const ::node::MemoryStat& NodeStatus::mem_stat() const {
  // @@protoc_insertion_point(field_get:node.NodeStatus.mem_stat)
  return _internal_mem_stat();
}
inline void NodeStatus::unsafe_arena_set_allocated_mem_stat(
    ::node::MemoryStat* mem_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_stat_);
  }
  mem_stat_ = mem_stat;
  if (mem_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.NodeStatus.mem_stat)
}
inline ::node::MemoryStat* NodeStatus::release_mem_stat() {
  auto temp = unsafe_arena_release_mem_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::node::MemoryStat* NodeStatus::unsafe_arena_release_mem_stat() {
  // @@protoc_insertion_point(field_release:node.NodeStatus.mem_stat)
  
  ::node::MemoryStat* temp = mem_stat_;
  mem_stat_ = nullptr;
  return temp;
}
inline ::node::MemoryStat* NodeStatus::_internal_mutable_mem_stat() {
  
  if (mem_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::MemoryStat>(GetArena());
    mem_stat_ = p;
  }
  return mem_stat_;
}
inline ::node::MemoryStat* NodeStatus::mutable_mem_stat() {
  // @@protoc_insertion_point(field_mutable:node.NodeStatus.mem_stat)
  return _internal_mutable_mem_stat();
}
inline void NodeStatus::set_allocated_mem_stat(::node::MemoryStat* mem_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mem_stat_;
  }
  if (mem_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mem_stat);
    if (message_arena != submessage_arena) {
      mem_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_stat, submessage_arena);
    }
    
  } else {
    
  }
  mem_stat_ = mem_stat;
  // @@protoc_insertion_point(field_set_allocated:node.NodeStatus.mem_stat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::node::NodeState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::node::NodeState>() {
  return ::node::NodeState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5ftypes_2eproto
