// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container_types.proto

#include "container_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockStat_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_EnvEntry_DoNotUse_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_LabelsEntry_DoNotUse_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerInfo_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerInfo_LabelsEntry_DoNotUse_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuStat_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceMapping_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointSetting_DriverOptsEntry_DoNotUse_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPAMConfig_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryStat_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mount_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkAddress_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkStats_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceConfig_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceStat_container_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestartPolicy_container_5ftypes_2eproto;
namespace container {
class PortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Port> _instance;
} _Port_default_instance_;
class MountPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MountPoint> _instance;
} _MountPoint_default_instance_;
class IPAMConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPAMConfig> _instance;
} _IPAMConfig_default_instance_;
class EndpointSetting_DriverOptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndpointSetting_DriverOptsEntry_DoNotUse> _instance;
} _EndpointSetting_DriverOptsEntry_DoNotUse_default_instance_;
class EndpointSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndpointSetting> _instance;
} _EndpointSetting_default_instance_;
class NodeContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeContainer> _instance;
} _NodeContainer_default_instance_;
class ContainerInfo_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerInfo_LabelsEntry_DoNotUse> _instance;
} _ContainerInfo_LabelsEntry_DoNotUse_default_instance_;
class ContainerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerInfo> _instance;
} _ContainerInfo_default_instance_;
class ContainerIdListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerIdList> _instance;
} _ContainerIdList_default_instance_;
class MountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mount> _instance;
} _Mount_default_instance_;
class RestartPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestartPolicy> _instance;
} _RestartPolicy_default_instance_;
class DeviceMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceMapping> _instance;
} _DeviceMapping_default_instance_;
class ResourceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceConfig> _instance;
} _ResourceConfig_default_instance_;
class HostConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostConfig> _instance;
} _HostConfig_default_instance_;
class ContainerConfig_EnvEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerConfig_EnvEntry_DoNotUse> _instance;
} _ContainerConfig_EnvEntry_DoNotUse_default_instance_;
class ContainerConfig_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerConfig_LabelsEntry_DoNotUse> _instance;
} _ContainerConfig_LabelsEntry_DoNotUse_default_instance_;
class ContainerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerConfig> _instance;
} _ContainerConfig_default_instance_;
class CpuStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuStat> _instance;
} _CpuStat_default_instance_;
class MemoryStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryStat> _instance;
} _MemoryStat_default_instance_;
class BlockStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockStat> _instance;
} _BlockStat_default_instance_;
class NetworkStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStats> _instance;
} _NetworkStats_default_instance_;
class ResourceStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceStat> _instance;
} _ResourceStat_default_instance_;
class NetworkAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkAddress> _instance;
} _NetworkAddress_default_instance_;
class NetworkSettingBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkSettingBase> _instance;
} _NetworkSettingBase_default_instance_;
}  // namespace container
static void InitDefaultsscc_info_BlockStat_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_BlockStat_default_instance_;
    new (ptr) ::container::BlockStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::BlockStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockStat_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockStat_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ContainerConfig_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ContainerConfig_default_instance_;
    new (ptr) ::container::ContainerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::ContainerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerConfig_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContainerConfig_container_5ftypes_2eproto}, {
      &scc_info_ContainerConfig_EnvEntry_DoNotUse_container_5ftypes_2eproto.base,
      &scc_info_ContainerConfig_LabelsEntry_DoNotUse_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ContainerConfig_EnvEntry_DoNotUse_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ContainerConfig_EnvEntry_DoNotUse_default_instance_;
    new (ptr) ::container::ContainerConfig_EnvEntry_DoNotUse();
  }
  ::container::ContainerConfig_EnvEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_EnvEntry_DoNotUse_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerConfig_EnvEntry_DoNotUse_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ContainerConfig_LabelsEntry_DoNotUse_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ContainerConfig_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::container::ContainerConfig_LabelsEntry_DoNotUse();
  }
  ::container::ContainerConfig_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_LabelsEntry_DoNotUse_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerConfig_LabelsEntry_DoNotUse_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ContainerIdList_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ContainerIdList_default_instance_;
    new (ptr) ::container::ContainerIdList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::ContainerIdList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerIdList_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerIdList_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ContainerInfo_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ContainerInfo_default_instance_;
    new (ptr) ::container::ContainerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::ContainerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerInfo_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContainerInfo_container_5ftypes_2eproto}, {
      &scc_info_ContainerInfo_LabelsEntry_DoNotUse_container_5ftypes_2eproto.base,
      &scc_info_ResourceStat_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ContainerInfo_LabelsEntry_DoNotUse_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ContainerInfo_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::container::ContainerInfo_LabelsEntry_DoNotUse();
  }
  ::container::ContainerInfo_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerInfo_LabelsEntry_DoNotUse_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerInfo_LabelsEntry_DoNotUse_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_CpuStat_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_CpuStat_default_instance_;
    new (ptr) ::container::CpuStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::CpuStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuStat_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CpuStat_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_DeviceMapping_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_DeviceMapping_default_instance_;
    new (ptr) ::container::DeviceMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::DeviceMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceMapping_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceMapping_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_EndpointSetting_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_EndpointSetting_default_instance_;
    new (ptr) ::container::EndpointSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::EndpointSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EndpointSetting_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EndpointSetting_container_5ftypes_2eproto}, {
      &scc_info_IPAMConfig_container_5ftypes_2eproto.base,
      &scc_info_EndpointSetting_DriverOptsEntry_DoNotUse_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_EndpointSetting_DriverOptsEntry_DoNotUse_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_EndpointSetting_DriverOptsEntry_DoNotUse_default_instance_;
    new (ptr) ::container::EndpointSetting_DriverOptsEntry_DoNotUse();
  }
  ::container::EndpointSetting_DriverOptsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointSetting_DriverOptsEntry_DoNotUse_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndpointSetting_DriverOptsEntry_DoNotUse_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_HostConfig_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_HostConfig_default_instance_;
    new (ptr) ::container::HostConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::HostConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HostConfig_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HostConfig_container_5ftypes_2eproto}, {
      &scc_info_RestartPolicy_container_5ftypes_2eproto.base,
      &scc_info_Mount_container_5ftypes_2eproto.base,
      &scc_info_ResourceConfig_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_IPAMConfig_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_IPAMConfig_default_instance_;
    new (ptr) ::container::IPAMConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::IPAMConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPAMConfig_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPAMConfig_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_MemoryStat_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_MemoryStat_default_instance_;
    new (ptr) ::container::MemoryStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::MemoryStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryStat_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoryStat_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Mount_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_Mount_default_instance_;
    new (ptr) ::container::Mount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::Mount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mount_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mount_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_MountPoint_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_MountPoint_default_instance_;
    new (ptr) ::container::MountPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::MountPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MountPoint_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MountPoint_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_NetworkAddress_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_NetworkAddress_default_instance_;
    new (ptr) ::container::NetworkAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::NetworkAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkAddress_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkAddress_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_NetworkSettingBase_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_NetworkSettingBase_default_instance_;
    new (ptr) ::container::NetworkSettingBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::NetworkSettingBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkSettingBase_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkSettingBase_container_5ftypes_2eproto}, {
      &scc_info_NetworkAddress_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStats_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_NetworkStats_default_instance_;
    new (ptr) ::container::NetworkStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::NetworkStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkStats_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkStats_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_NodeContainer_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_NodeContainer_default_instance_;
    new (ptr) ::container::NodeContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::NodeContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeContainer_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeContainer_container_5ftypes_2eproto}, {
      &scc_info_ContainerInfo_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Port_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_Port_default_instance_;
    new (ptr) ::container::Port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::Port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Port_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Port_container_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ResourceConfig_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ResourceConfig_default_instance_;
    new (ptr) ::container::ResourceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::ResourceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceConfig_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceConfig_container_5ftypes_2eproto}, {
      &scc_info_DeviceMapping_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ResourceStat_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_ResourceStat_default_instance_;
    new (ptr) ::container::ResourceStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::ResourceStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceStat_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ResourceStat_container_5ftypes_2eproto}, {
      &scc_info_CpuStat_container_5ftypes_2eproto.base,
      &scc_info_MemoryStat_container_5ftypes_2eproto.base,
      &scc_info_BlockStat_container_5ftypes_2eproto.base,
      &scc_info_NetworkStats_container_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RestartPolicy_container_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::container::_RestartPolicy_default_instance_;
    new (ptr) ::container::RestartPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::container::RestartPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestartPolicy_container_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestartPolicy_container_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_container_5ftypes_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_container_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_container_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_container_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::Port, ip_),
  PROTOBUF_FIELD_OFFSET(::container::Port, private_port_),
  PROTOBUF_FIELD_OFFSET(::container::Port, public_port_),
  PROTOBUF_FIELD_OFFSET(::container::Port, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, type_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, name_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, source_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, destination_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, driver_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, mode_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, rw_),
  PROTOBUF_FIELD_OFFSET(::container::MountPoint, propagation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::IPAMConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::IPAMConfig, ipv4_address_),
  PROTOBUF_FIELD_OFFSET(::container::IPAMConfig, ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::container::IPAMConfig, link_local_ips_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting_DriverOptsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting_DriverOptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting_DriverOptsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting_DriverOptsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, ipam_config_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, links_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, aliases_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, network_id_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, endpoint_id_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, gateway_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, ip_address_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, ip_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, ipv6_gateway_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, global_ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, global_ipv6_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, mac_address_),
  PROTOBUF_FIELD_OFFSET(::container::EndpointSetting, driver_opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::NodeContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::NodeContainer, node_id_),
  PROTOBUF_FIELD_OFFSET(::container::NodeContainer, node_address_),
  PROTOBUF_FIELD_OFFSET(::container::NodeContainer, info_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, image_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, image_id_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, command_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, state_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, created_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, size_rw_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, size_root_fs_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, labels_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerInfo, resource_stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::ContainerIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ContainerIdList, node_id_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerIdList, container_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::Mount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::Mount, type_),
  PROTOBUF_FIELD_OFFSET(::container::Mount, source_),
  PROTOBUF_FIELD_OFFSET(::container::Mount, target_),
  PROTOBUF_FIELD_OFFSET(::container::Mount, read_only_),
  PROTOBUF_FIELD_OFFSET(::container::Mount, consistency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::RestartPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::RestartPolicy, name_),
  PROTOBUF_FIELD_OFFSET(::container::RestartPolicy, max_retry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::DeviceMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::DeviceMapping, path_on_host_),
  PROTOBUF_FIELD_OFFSET(::container::DeviceMapping, path_in_container_),
  PROTOBUF_FIELD_OFFSET(::container::DeviceMapping, cgroup_permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::ResourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ResourceConfig, nano_cpus_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceConfig, cpu_shares_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceConfig, mem_limit_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceConfig, mem_soft_limit_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceConfig, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, network_mode_),
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, restart_policy_),
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, auto_remove_),
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, ipc_mode_),
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, mounts_),
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, privileged_),
  PROTOBUF_FIELD_OFFSET(::container::HostConfig, resource_config_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_EnvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_EnvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_EnvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_EnvEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, hostname_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, domain_name_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, user_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, env_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, image_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, working_dir_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, entrypoint_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, cmd_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, network_disabled_),
  PROTOBUF_FIELD_OFFSET(::container::ContainerConfig, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::CpuStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::CpuStat, core_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::MemoryStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::MemoryStat, used_),
  PROTOBUF_FIELD_OFFSET(::container::MemoryStat, limit_),
  PROTOBUF_FIELD_OFFSET(::container::MemoryStat, percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::BlockStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::BlockStat, read_),
  PROTOBUF_FIELD_OFFSET(::container::BlockStat, write_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::NetworkStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::NetworkStats, rx_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkStats, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, id_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, state_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, cpu_stat_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, mem_stat_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, block_stat_),
  PROTOBUF_FIELD_OFFSET(::container::ResourceStat, net_stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::NetworkAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::NetworkAddress, addr_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkAddress, prefix_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, bridge_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, hairpin_mode_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, link_local_ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, link_local_ipv6_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, sandbox_key_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, secondary_ip_addresses_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, secondary_ipv6_addresses_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, endpoint_id_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, gateway_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, global_ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, global_ipv6_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, ip_address_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, ip_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, ipv6_gateway_),
  PROTOBUF_FIELD_OFFSET(::container::NetworkSettingBase, mac_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::container::Port)},
  { 9, -1, sizeof(::container::MountPoint)},
  { 22, -1, sizeof(::container::IPAMConfig)},
  { 30, 37, sizeof(::container::EndpointSetting_DriverOptsEntry_DoNotUse)},
  { 39, -1, sizeof(::container::EndpointSetting)},
  { 57, -1, sizeof(::container::NodeContainer)},
  { 65, 72, sizeof(::container::ContainerInfo_LabelsEntry_DoNotUse)},
  { 74, -1, sizeof(::container::ContainerInfo)},
  { 90, -1, sizeof(::container::ContainerIdList)},
  { 97, -1, sizeof(::container::Mount)},
  { 107, -1, sizeof(::container::RestartPolicy)},
  { 114, -1, sizeof(::container::DeviceMapping)},
  { 122, -1, sizeof(::container::ResourceConfig)},
  { 132, -1, sizeof(::container::HostConfig)},
  { 144, 151, sizeof(::container::ContainerConfig_EnvEntry_DoNotUse)},
  { 153, 160, sizeof(::container::ContainerConfig_LabelsEntry_DoNotUse)},
  { 162, -1, sizeof(::container::ContainerConfig)},
  { 177, -1, sizeof(::container::CpuStat)},
  { 183, -1, sizeof(::container::MemoryStat)},
  { 191, -1, sizeof(::container::BlockStat)},
  { 198, -1, sizeof(::container::NetworkStats)},
  { 205, -1, sizeof(::container::ResourceStat)},
  { 216, -1, sizeof(::container::NetworkAddress)},
  { 223, -1, sizeof(::container::NetworkSettingBase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_Port_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_MountPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_IPAMConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_EndpointSetting_DriverOptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_EndpointSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_NodeContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ContainerInfo_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ContainerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ContainerIdList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_Mount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_RestartPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_DeviceMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ResourceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_HostConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ContainerConfig_EnvEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ContainerConfig_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ContainerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_CpuStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_MemoryStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_BlockStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_NetworkStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_ResourceStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_NetworkAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::container::_NetworkSettingBase_default_instance_),
};

const char descriptor_table_protodef_container_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025container_types.proto\022\tcontainer\"K\n\004Po"
  "rt\022\n\n\002ip\030\001 \001(\t\022\024\n\014private_port\030\002 \001(\r\022\023\n\013"
  "public_port\030\003 \001(\r\022\014\n\004type\030\004 \001(\t\"\214\001\n\nMoun"
  "tPoint\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006so"
  "urce\030\003 \001(\t\022\023\n\013destination\030\004 \001(\t\022\016\n\006drive"
  "r\030\005 \001(\t\022\014\n\004mode\030\006 \001(\t\022\n\n\002rw\030\007 \001(\010\022\023\n\013pro"
  "pagation\030\010 \001(\t\"P\n\nIPAMConfig\022\024\n\014ipv4_add"
  "ress\030\001 \001(\t\022\024\n\014ipv6_address\030\002 \001(\t\022\026\n\016link"
  "_local_ips\030\003 \003(\t\"\236\003\n\017EndpointSetting\022*\n\013"
  "ipam_config\030\001 \001(\0132\025.container.IPAMConfig"
  "\022\r\n\005links\030\002 \003(\t\022\017\n\007aliases\030\003 \003(\t\022\022\n\nnetw"
  "ork_id\030\004 \001(\t\022\023\n\013endpoint_id\030\005 \001(\t\022\017\n\007gat"
  "eway\030\006 \001(\t\022\022\n\nip_address\030\007 \001(\t\022\025\n\rip_pre"
  "fix_len\030\010 \001(\005\022\024\n\014ipv6_gateway\030\t \001(\t\022\033\n\023g"
  "lobal_ipv6_address\030\n \001(\t\022\036\n\026global_ipv6_"
  "prefix_len\030\013 \001(\005\022\023\n\013mac_address\030\014 \001(\t\022\?\n"
  "\013driver_opts\030\r \003(\0132*.container.EndpointS"
  "etting.DriverOptsEntry\0321\n\017DriverOptsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"^\n\rNod"
  "eContainer\022\017\n\007node_id\030\001 \001(\003\022\024\n\014node_addr"
  "ess\030\002 \001(\t\022&\n\004info\030\n \001(\0132\030.container.Cont"
  "ainerInfo\"\267\002\n\rContainerInfo\022\n\n\002id\030\001 \001(\t\022"
  "\014\n\004name\030\002 \001(\t\022\r\n\005image\030\003 \001(\t\022\020\n\010image_id"
  "\030\004 \001(\t\022\017\n\007command\030\005 \001(\t\022\r\n\005state\030\006 \001(\t\022\017"
  "\n\007created\030\007 \001(\003\022\017\n\007size_rw\030\010 \001(\003\022\024\n\014size"
  "_root_fs\030\t \001(\003\0224\n\006labels\030\n \003(\0132$.contain"
  "er.ContainerInfo.LabelsEntry\022.\n\rresource"
  "_stat\030e \001(\0132\027.container.ResourceStat\032-\n\013"
  "LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"9\n\017ContainerIdList\022\017\n\007node_id\030\001 \001(\003\022"
  "\025\n\rcontainer_ids\030\002 \003(\t\"]\n\005Mount\022\014\n\004type\030"
  "\001 \001(\t\022\016\n\006source\030\002 \001(\t\022\016\n\006target\030\003 \001(\t\022\021\n"
  "\tread_only\030\004 \001(\010\022\023\n\013consistency\030\005 \001(\t\"0\n"
  "\rRestartPolicy\022\014\n\004name\030\001 \001(\t\022\021\n\tmax_retr"
  "y\030\002 \001(\005\"\\\n\rDeviceMapping\022\024\n\014path_on_host"
  "\030\001 \001(\t\022\031\n\021path_in_container\030\002 \001(\t\022\032\n\022cgr"
  "oup_permissions\030\003 \001(\t\"\215\001\n\016ResourceConfig"
  "\022\021\n\tnano_cpus\030\001 \001(\003\022\022\n\ncpu_shares\030\002 \001(\003\022"
  "\021\n\tmem_limit\030\013 \001(\003\022\026\n\016mem_soft_limit\030\014 \001"
  "(\003\022)\n\007devices\030e \003(\0132\030.container.DeviceMa"
  "pping\"\345\001\n\nHostConfig\022\024\n\014network_mode\030\001 \001"
  "(\t\0220\n\016restart_policy\030\002 \001(\0132\030.container.R"
  "estartPolicy\022\023\n\013auto_remove\030\003 \001(\010\022\020\n\010ipc"
  "_mode\030\004 \001(\t\022 \n\006mounts\030\005 \003(\0132\020.container."
  "Mount\022\022\n\nprivileged\030\006 \001(\010\0222\n\017resource_co"
  "nfig\030\007 \001(\0132\031.container.ResourceConfig\"\352\002"
  "\n\017ContainerConfig\022\020\n\010hostname\030\001 \001(\t\022\023\n\013d"
  "omain_name\030\002 \001(\t\022\014\n\004user\030\003 \001(\t\0220\n\003env\030\004 "
  "\003(\0132#.container.ContainerConfig.EnvEntry"
  "\022\r\n\005image\030\005 \001(\t\022\023\n\013working_dir\030\006 \001(\t\022\022\n\n"
  "entrypoint\030\007 \003(\t\022\013\n\003cmd\030\010 \003(\t\022\030\n\020network"
  "_disabled\030\t \001(\010\0226\n\006labels\030\n \003(\0132&.contai"
  "ner.ContainerConfig.LabelsEntry\032*\n\010EnvEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032-\n\013L"
  "abelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\"\034\n\007CpuStat\022\021\n\tcore_used\030\001 \001(\001\"=\n\nMemo"
  "ryStat\022\014\n\004used\030\001 \001(\004\022\r\n\005limit\030\002 \001(\004\022\022\n\np"
  "ercentage\030\003 \001(\001\"(\n\tBlockStat\022\014\n\004read\030\001 \001"
  "(\004\022\r\n\005write\030\002 \001(\004\"&\n\014NetworkStats\022\n\n\002rx\030"
  "\001 \001(\004\022\n\n\002tx\030\002 \001(\004\"\315\001\n\014ResourceStat\022\n\n\002id"
  "\030\001 \001(\t\022\r\n\005state\030\002 \001(\t\022$\n\010cpu_stat\030\003 \001(\0132"
  "\022.container.CpuStat\022\'\n\010mem_stat\030\004 \001(\0132\025."
  "container.MemoryStat\022(\n\nblock_stat\030\005 \001(\013"
  "2\024.container.BlockStat\022)\n\010net_stat\030\006 \001(\013"
  "2\027.container.NetworkStats\"2\n\016NetworkAddr"
  "ess\022\014\n\004addr\030\001 \001(\t\022\022\n\nprefix_len\030\002 \001(\005\"\331\003"
  "\n\022NetworkSettingBase\022\016\n\006bridge\030\001 \001(\t\022\022\n\n"
  "sandbox_id\030\002 \001(\t\022\024\n\014hairpin_mode\030\003 \001(\010\022\037"
  "\n\027link_local_ipv6_address\030\004 \001(\t\022\"\n\032link_"
  "local_ipv6_prefix_len\030\005 \001(\005\022\023\n\013sandbox_k"
  "ey\030\006 \001(\t\0229\n\026secondary_ip_addresses\030\007 \001(\013"
  "2\031.container.NetworkAddress\022;\n\030secondary"
  "_ipv6_addresses\030\010 \001(\0132\031.container.Networ"
  "kAddress\022\023\n\013endpoint_id\030\t \001(\t\022\017\n\007gateway"
  "\030\n \001(\t\022\033\n\023global_ipv6_address\030\013 \001(\t\022\036\n\026g"
  "lobal_ipv6_prefix_len\030\014 \001(\005\022\022\n\nip_addres"
  "s\030\r \001(\t\022\025\n\rip_prefix_len\030\016 \001(\005\022\024\n\014ipv6_g"
  "ateway\030\017 \001(\t\022\023\n\013mac_address\030\020 \001(\tB\027Z\025scm"
  "c/rpc/pb/containerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_container_5ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_container_5ftypes_2eproto_sccs[24] = {
  &scc_info_BlockStat_container_5ftypes_2eproto.base,
  &scc_info_ContainerConfig_container_5ftypes_2eproto.base,
  &scc_info_ContainerConfig_EnvEntry_DoNotUse_container_5ftypes_2eproto.base,
  &scc_info_ContainerConfig_LabelsEntry_DoNotUse_container_5ftypes_2eproto.base,
  &scc_info_ContainerIdList_container_5ftypes_2eproto.base,
  &scc_info_ContainerInfo_container_5ftypes_2eproto.base,
  &scc_info_ContainerInfo_LabelsEntry_DoNotUse_container_5ftypes_2eproto.base,
  &scc_info_CpuStat_container_5ftypes_2eproto.base,
  &scc_info_DeviceMapping_container_5ftypes_2eproto.base,
  &scc_info_EndpointSetting_container_5ftypes_2eproto.base,
  &scc_info_EndpointSetting_DriverOptsEntry_DoNotUse_container_5ftypes_2eproto.base,
  &scc_info_HostConfig_container_5ftypes_2eproto.base,
  &scc_info_IPAMConfig_container_5ftypes_2eproto.base,
  &scc_info_MemoryStat_container_5ftypes_2eproto.base,
  &scc_info_Mount_container_5ftypes_2eproto.base,
  &scc_info_MountPoint_container_5ftypes_2eproto.base,
  &scc_info_NetworkAddress_container_5ftypes_2eproto.base,
  &scc_info_NetworkSettingBase_container_5ftypes_2eproto.base,
  &scc_info_NetworkStats_container_5ftypes_2eproto.base,
  &scc_info_NodeContainer_container_5ftypes_2eproto.base,
  &scc_info_Port_container_5ftypes_2eproto.base,
  &scc_info_ResourceConfig_container_5ftypes_2eproto.base,
  &scc_info_ResourceStat_container_5ftypes_2eproto.base,
  &scc_info_RestartPolicy_container_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_container_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_container_5ftypes_2eproto = {
  false, false, descriptor_table_protodef_container_5ftypes_2eproto, "container_types.proto", 3146,
  &descriptor_table_container_5ftypes_2eproto_once, descriptor_table_container_5ftypes_2eproto_sccs, descriptor_table_container_5ftypes_2eproto_deps, 24, 0,
  schemas, file_default_instances, TableStruct_container_5ftypes_2eproto::offsets,
  file_level_metadata_container_5ftypes_2eproto, 24, file_level_enum_descriptors_container_5ftypes_2eproto, file_level_service_descriptors_container_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_container_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_container_5ftypes_2eproto)), true);
namespace container {

// ===================================================================

void Port::InitAsDefaultInstance() {
}
class Port::_Internal {
 public:
};

Port::Port(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.Port)
}
Port::Port(const Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&private_port_, &from.private_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_port_) -
    reinterpret_cast<char*>(&private_port_)) + sizeof(public_port_));
  // @@protoc_insertion_point(copy_constructor:container.Port)
}

void Port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Port_container_5ftypes_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&private_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_port_) -
      reinterpret_cast<char*>(&private_port_)) + sizeof(public_port_));
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:container.Port)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Port::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Port::ArenaDtor(void* object) {
  Port* _this = reinterpret_cast< Port* >(object);
  (void)_this;
}
void Port::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Port& Port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Port_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:container.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&private_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_port_) -
      reinterpret_cast<char*>(&private_port_)) + sizeof(public_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.Port.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 private_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          private_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 public_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.Port.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.Port.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 private_port = 2;
  if (this->private_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_private_port(), target);
  }

  // uint32 public_port = 3;
  if (this->public_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_public_port(), target);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.Port.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.Port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string type = 4;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint32 private_port = 2;
  if (this->private_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_private_port());
  }

  // uint32 public_port = 3;
  if (this->public_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_public_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.Port)
  GOOGLE_DCHECK_NE(&from, this);
  const Port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.Port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.Port)
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.Port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.private_port() != 0) {
    _internal_set_private_port(from._internal_private_port());
  }
  if (from.public_port() != 0) {
    _internal_set_public_port(from._internal_public_port());
  }
}

void Port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::InternalSwap(Port* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Port, public_port_)
      + sizeof(Port::public_port_)
      - PROTOBUF_FIELD_OFFSET(Port, private_port_)>(
          reinterpret_cast<char*>(&private_port_),
          reinterpret_cast<char*>(&other->private_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Port::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MountPoint::InitAsDefaultInstance() {
}
class MountPoint::_Internal {
 public:
};

MountPoint::MountPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.MountPoint)
}
MountPoint::MountPoint(const MountPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination().empty()) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination(),
      GetArena());
  }
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driver().empty()) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_driver(),
      GetArena());
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  propagation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propagation().empty()) {
    propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_propagation(),
      GetArena());
  }
  rw_ = from.rw_;
  // @@protoc_insertion_point(copy_constructor:container.MountPoint)
}

void MountPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MountPoint_container_5ftypes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propagation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rw_ = false;
}

MountPoint::~MountPoint() {
  // @@protoc_insertion_point(destructor:container.MountPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MountPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propagation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MountPoint::ArenaDtor(void* object) {
  MountPoint* _this = reinterpret_cast< MountPoint* >(object);
  (void)_this;
}
void MountPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MountPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MountPoint& MountPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MountPoint_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void MountPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:container.MountPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  driver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  propagation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rw_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MountPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.destination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string driver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_driver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.driver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string propagation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_propagation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.MountPoint.propagation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MountPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.MountPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // string destination = 4;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_destination(), target);
  }

  // string driver = 5;
  if (this->driver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver().data(), static_cast<int>(this->_internal_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.driver");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_driver(), target);
  }

  // string mode = 6;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.mode");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mode(), target);
  }

  // bool rw = 7;
  if (this->rw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rw(), target);
  }

  // string propagation = 8;
  if (this->propagation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propagation().data(), static_cast<int>(this->_internal_propagation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.MountPoint.propagation");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_propagation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.MountPoint)
  return target;
}

size_t MountPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.MountPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string destination = 4;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // string driver = 5;
  if (this->driver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driver());
  }

  // string mode = 6;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // string propagation = 8;
  if (this->propagation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propagation());
  }

  // bool rw = 7;
  if (this->rw() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MountPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.MountPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MountPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MountPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.MountPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.MountPoint)
    MergeFrom(*source);
  }
}

void MountPoint::MergeFrom(const MountPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.MountPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.destination().size() > 0) {
    _internal_set_destination(from._internal_destination());
  }
  if (from.driver().size() > 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.propagation().size() > 0) {
    _internal_set_propagation(from._internal_propagation());
  }
  if (from.rw() != 0) {
    _internal_set_rw(from._internal_rw());
  }
}

void MountPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.MountPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountPoint::CopyFrom(const MountPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.MountPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountPoint::IsInitialized() const {
  return true;
}

void MountPoint::InternalSwap(MountPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  driver_.Swap(&other->driver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  propagation_.Swap(&other->propagation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rw_, other->rw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MountPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPAMConfig::InitAsDefaultInstance() {
}
class IPAMConfig::_Internal {
 public:
};

IPAMConfig::IPAMConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  link_local_ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.IPAMConfig)
}
IPAMConfig::IPAMConfig(const IPAMConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      link_local_ips_(from.link_local_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipv4_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv4_address().empty()) {
    ipv4_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv4_address(),
      GetArena());
  }
  ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_address().empty()) {
    ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv6_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:container.IPAMConfig)
}

void IPAMConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPAMConfig_container_5ftypes_2eproto.base);
  ipv4_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IPAMConfig::~IPAMConfig() {
  // @@protoc_insertion_point(destructor:container.IPAMConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPAMConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ipv4_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPAMConfig::ArenaDtor(void* object) {
  IPAMConfig* _this = reinterpret_cast< IPAMConfig* >(object);
  (void)_this;
}
void IPAMConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPAMConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPAMConfig& IPAMConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPAMConfig_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void IPAMConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:container.IPAMConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_local_ips_.Clear();
  ipv4_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPAMConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ipv4_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipv4_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.IPAMConfig.ipv4_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ipv6_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.IPAMConfig.ipv6_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string link_local_ips = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_link_local_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.IPAMConfig.link_local_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPAMConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.IPAMConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipv4_address = 1;
  if (this->ipv4_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv4_address().data(), static_cast<int>(this->_internal_ipv4_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.IPAMConfig.ipv4_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipv4_address(), target);
  }

  // string ipv6_address = 2;
  if (this->ipv6_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_address().data(), static_cast<int>(this->_internal_ipv6_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.IPAMConfig.ipv6_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ipv6_address(), target);
  }

  // repeated string link_local_ips = 3;
  for (int i = 0, n = this->_internal_link_local_ips_size(); i < n; i++) {
    const auto& s = this->_internal_link_local_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.IPAMConfig.link_local_ips");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.IPAMConfig)
  return target;
}

size_t IPAMConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.IPAMConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string link_local_ips = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(link_local_ips_.size());
  for (int i = 0, n = link_local_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      link_local_ips_.Get(i));
  }

  // string ipv4_address = 1;
  if (this->ipv4_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv4_address());
  }

  // string ipv6_address = 2;
  if (this->ipv6_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPAMConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.IPAMConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAMConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPAMConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.IPAMConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.IPAMConfig)
    MergeFrom(*source);
  }
}

void IPAMConfig::MergeFrom(const IPAMConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.IPAMConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_local_ips_.MergeFrom(from.link_local_ips_);
  if (from.ipv4_address().size() > 0) {
    _internal_set_ipv4_address(from._internal_ipv4_address());
  }
  if (from.ipv6_address().size() > 0) {
    _internal_set_ipv6_address(from._internal_ipv6_address());
  }
}

void IPAMConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.IPAMConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAMConfig::CopyFrom(const IPAMConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.IPAMConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAMConfig::IsInitialized() const {
  return true;
}

void IPAMConfig::InternalSwap(IPAMConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  link_local_ips_.InternalSwap(&other->link_local_ips_);
  ipv4_address_.Swap(&other->ipv4_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_address_.Swap(&other->ipv6_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IPAMConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EndpointSetting_DriverOptsEntry_DoNotUse::EndpointSetting_DriverOptsEntry_DoNotUse() {}
EndpointSetting_DriverOptsEntry_DoNotUse::EndpointSetting_DriverOptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EndpointSetting_DriverOptsEntry_DoNotUse::MergeFrom(const EndpointSetting_DriverOptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EndpointSetting_DriverOptsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EndpointSetting_DriverOptsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EndpointSetting::InitAsDefaultInstance() {
  ::container::_EndpointSetting_default_instance_._instance.get_mutable()->ipam_config_ = const_cast< ::container::IPAMConfig*>(
      ::container::IPAMConfig::internal_default_instance());
}
class EndpointSetting::_Internal {
 public:
  static const ::container::IPAMConfig& ipam_config(const EndpointSetting* msg);
};

const ::container::IPAMConfig&
EndpointSetting::_Internal::ipam_config(const EndpointSetting* msg) {
  return *msg->ipam_config_;
}
EndpointSetting::EndpointSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  links_(arena),
  aliases_(arena),
  driver_opts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.EndpointSetting)
}
EndpointSetting::EndpointSetting(const EndpointSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      links_(from.links_),
      aliases_(from.aliases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driver_opts_.MergeFrom(from.driver_opts_);
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_id().empty()) {
    network_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_network_id(),
      GetArena());
  }
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint_id().empty()) {
    endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint_id(),
      GetArena());
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gateway().empty()) {
    gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gateway(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  ipv6_gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_gateway().empty()) {
    ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv6_gateway(),
      GetArena());
  }
  global_ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_ipv6_address().empty()) {
    global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_ipv6_address(),
      GetArena());
  }
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_address(),
      GetArena());
  }
  if (from._internal_has_ipam_config()) {
    ipam_config_ = new ::container::IPAMConfig(*from.ipam_config_);
  } else {
    ipam_config_ = nullptr;
  }
  ::memcpy(&ip_prefix_len_, &from.ip_prefix_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_ipv6_prefix_len_) -
    reinterpret_cast<char*>(&ip_prefix_len_)) + sizeof(global_ipv6_prefix_len_));
  // @@protoc_insertion_point(copy_constructor:container.EndpointSetting)
}

void EndpointSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndpointSetting_container_5ftypes_2eproto.base);
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipam_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_ipv6_prefix_len_) -
      reinterpret_cast<char*>(&ipam_config_)) + sizeof(global_ipv6_prefix_len_));
}

EndpointSetting::~EndpointSetting() {
  // @@protoc_insertion_point(destructor:container.EndpointSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndpointSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  network_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_ipv6_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ipam_config_;
}

void EndpointSetting::ArenaDtor(void* object) {
  EndpointSetting* _this = reinterpret_cast< EndpointSetting* >(object);
  (void)_this;
}
void EndpointSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndpointSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndpointSetting& EndpointSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndpointSetting_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void EndpointSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:container.EndpointSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  aliases_.Clear();
  driver_opts_.Clear();
  network_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ipam_config_ != nullptr) {
    delete ipam_config_;
  }
  ipam_config_ = nullptr;
  ::memset(&ip_prefix_len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_ipv6_prefix_len_) -
      reinterpret_cast<char*>(&ip_prefix_len_)) + sizeof(global_ipv6_prefix_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndpointSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .container.IPAMConfig ipam_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipam_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_links();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.links"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string aliases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aliases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.aliases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string network_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_network_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.network_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_endpoint_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.endpoint_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gateway = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.gateway"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip_prefix_len = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ip_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_gateway = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ipv6_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.ipv6_gateway"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string global_ipv6_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_global_ipv6_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.global_ipv6_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 global_ipv6_prefix_len = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          global_ipv6_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.EndpointSetting.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> driver_opts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&driver_opts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndpointSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.EndpointSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .container.IPAMConfig ipam_config = 1;
  if (this->has_ipam_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ipam_config(this), target, stream);
  }

  // repeated string links = 2;
  for (int i = 0, n = this->_internal_links_size(); i < n; i++) {
    const auto& s = this->_internal_links(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.links");
    target = stream->WriteString(2, s, target);
  }

  // repeated string aliases = 3;
  for (int i = 0, n = this->_internal_aliases_size(); i < n; i++) {
    const auto& s = this->_internal_aliases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.aliases");
    target = stream->WriteString(3, s, target);
  }

  // string network_id = 4;
  if (this->network_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_id().data(), static_cast<int>(this->_internal_network_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.network_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_network_id(), target);
  }

  // string endpoint_id = 5;
  if (this->endpoint_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint_id().data(), static_cast<int>(this->_internal_endpoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.endpoint_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_endpoint_id(), target);
  }

  // string gateway = 6;
  if (this->gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.gateway");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gateway(), target);
  }

  // string ip_address = 7;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.ip_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip_address(), target);
  }

  // int32 ip_prefix_len = 8;
  if (this->ip_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ip_prefix_len(), target);
  }

  // string ipv6_gateway = 9;
  if (this->ipv6_gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_gateway().data(), static_cast<int>(this->_internal_ipv6_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.ipv6_gateway");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ipv6_gateway(), target);
  }

  // string global_ipv6_address = 10;
  if (this->global_ipv6_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_global_ipv6_address().data(), static_cast<int>(this->_internal_global_ipv6_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.global_ipv6_address");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_global_ipv6_address(), target);
  }

  // int32 global_ipv6_prefix_len = 11;
  if (this->global_ipv6_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_global_ipv6_prefix_len(), target);
  }

  // string mac_address = 12;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.EndpointSetting.mac_address");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_mac_address(), target);
  }

  // map<string, string> driver_opts = 13;
  if (!this->_internal_driver_opts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.EndpointSetting.DriverOptsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.EndpointSetting.DriverOptsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_driver_opts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_driver_opts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_driver_opts().begin();
          it != this->_internal_driver_opts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EndpointSetting_DriverOptsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_driver_opts().begin();
          it != this->_internal_driver_opts().end(); ++it) {
        target = EndpointSetting_DriverOptsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.EndpointSetting)
  return target;
}

size_t EndpointSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.EndpointSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string links = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(links_.size());
  for (int i = 0, n = links_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      links_.Get(i));
  }

  // repeated string aliases = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aliases_.size());
  for (int i = 0, n = aliases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aliases_.Get(i));
  }

  // map<string, string> driver_opts = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_driver_opts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_driver_opts().begin();
      it != this->_internal_driver_opts().end(); ++it) {
    total_size += EndpointSetting_DriverOptsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string network_id = 4;
  if (this->network_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_id());
  }

  // string endpoint_id = 5;
  if (this->endpoint_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint_id());
  }

  // string gateway = 6;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());
  }

  // string ip_address = 7;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string ipv6_gateway = 9;
  if (this->ipv6_gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_gateway());
  }

  // string global_ipv6_address = 10;
  if (this->global_ipv6_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_ipv6_address());
  }

  // string mac_address = 12;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // .container.IPAMConfig ipam_config = 1;
  if (this->has_ipam_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipam_config_);
  }

  // int32 ip_prefix_len = 8;
  if (this->ip_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip_prefix_len());
  }

  // int32 global_ipv6_prefix_len = 11;
  if (this->global_ipv6_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_global_ipv6_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndpointSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.EndpointSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndpointSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.EndpointSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.EndpointSetting)
    MergeFrom(*source);
  }
}

void EndpointSetting::MergeFrom(const EndpointSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.EndpointSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  aliases_.MergeFrom(from.aliases_);
  driver_opts_.MergeFrom(from.driver_opts_);
  if (from.network_id().size() > 0) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from.endpoint_id().size() > 0) {
    _internal_set_endpoint_id(from._internal_endpoint_id());
  }
  if (from.gateway().size() > 0) {
    _internal_set_gateway(from._internal_gateway());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.ipv6_gateway().size() > 0) {
    _internal_set_ipv6_gateway(from._internal_ipv6_gateway());
  }
  if (from.global_ipv6_address().size() > 0) {
    _internal_set_global_ipv6_address(from._internal_global_ipv6_address());
  }
  if (from.mac_address().size() > 0) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from.has_ipam_config()) {
    _internal_mutable_ipam_config()->::container::IPAMConfig::MergeFrom(from._internal_ipam_config());
  }
  if (from.ip_prefix_len() != 0) {
    _internal_set_ip_prefix_len(from._internal_ip_prefix_len());
  }
  if (from.global_ipv6_prefix_len() != 0) {
    _internal_set_global_ipv6_prefix_len(from._internal_global_ipv6_prefix_len());
  }
}

void EndpointSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.EndpointSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointSetting::CopyFrom(const EndpointSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.EndpointSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointSetting::IsInitialized() const {
  return true;
}

void EndpointSetting::InternalSwap(EndpointSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  aliases_.InternalSwap(&other->aliases_);
  driver_opts_.Swap(&other->driver_opts_);
  network_id_.Swap(&other->network_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_id_.Swap(&other->endpoint_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_gateway_.Swap(&other->ipv6_gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_ipv6_address_.Swap(&other->global_ipv6_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndpointSetting, global_ipv6_prefix_len_)
      + sizeof(EndpointSetting::global_ipv6_prefix_len_)
      - PROTOBUF_FIELD_OFFSET(EndpointSetting, ipam_config_)>(
          reinterpret_cast<char*>(&ipam_config_),
          reinterpret_cast<char*>(&other->ipam_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndpointSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeContainer::InitAsDefaultInstance() {
  ::container::_NodeContainer_default_instance_._instance.get_mutable()->info_ = const_cast< ::container::ContainerInfo*>(
      ::container::ContainerInfo::internal_default_instance());
}
class NodeContainer::_Internal {
 public:
  static const ::container::ContainerInfo& info(const NodeContainer* msg);
};

const ::container::ContainerInfo&
NodeContainer::_Internal::info(const NodeContainer* msg) {
  return *msg->info_;
}
NodeContainer::NodeContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.NodeContainer)
}
NodeContainer::NodeContainer(const NodeContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_address().empty()) {
    node_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_address(),
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::container::ContainerInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:container.NodeContainer)
}

void NodeContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeContainer_container_5ftypes_2eproto.base);
  node_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&info_)) + sizeof(node_id_));
}

NodeContainer::~NodeContainer() {
  // @@protoc_insertion_point(destructor:container.NodeContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void NodeContainer::ArenaDtor(void* object) {
  NodeContainer* _this = reinterpret_cast< NodeContainer* >(object);
  (void)_this;
}
void NodeContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeContainer& NodeContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeContainer_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void NodeContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:container.NodeContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  node_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NodeContainer.node_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.ContainerInfo info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.NodeContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // string node_address = 2;
  if (this->node_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_address().data(), static_cast<int>(this->_internal_node_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NodeContainer.node_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_address(), target);
  }

  // .container.ContainerInfo info = 10;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.NodeContainer)
  return target;
}

size_t NodeContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.NodeContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_address = 2;
  if (this->node_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_address());
  }

  // .container.ContainerInfo info = 10;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.NodeContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.NodeContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.NodeContainer)
    MergeFrom(*source);
  }
}

void NodeContainer::MergeFrom(const NodeContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.NodeContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_address().size() > 0) {
    _internal_set_node_address(from._internal_node_address());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::container::ContainerInfo::MergeFrom(from._internal_info());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void NodeContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.NodeContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeContainer::CopyFrom(const NodeContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.NodeContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeContainer::IsInitialized() const {
  return true;
}

void NodeContainer::InternalSwap(NodeContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_address_.Swap(&other->node_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeContainer, node_id_)
      + sizeof(NodeContainer::node_id_)
      - PROTOBUF_FIELD_OFFSET(NodeContainer, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerInfo_LabelsEntry_DoNotUse::ContainerInfo_LabelsEntry_DoNotUse() {}
ContainerInfo_LabelsEntry_DoNotUse::ContainerInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerInfo_LabelsEntry_DoNotUse::MergeFrom(const ContainerInfo_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerInfo_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerInfo_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerInfo::InitAsDefaultInstance() {
  ::container::_ContainerInfo_default_instance_._instance.get_mutable()->resource_stat_ = const_cast< ::container::ResourceStat*>(
      ::container::ResourceStat::internal_default_instance());
}
class ContainerInfo::_Internal {
 public:
  static const ::container::ResourceStat& resource_stat(const ContainerInfo* msg);
};

const ::container::ResourceStat&
ContainerInfo::_Internal::resource_stat(const ContainerInfo* msg) {
  return *msg->resource_stat_;
}
ContainerInfo::ContainerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.ContainerInfo)
}
ContainerInfo::ContainerInfo(const ContainerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_id(),
      GetArena());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command(),
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state(),
      GetArena());
  }
  if (from._internal_has_resource_stat()) {
    resource_stat_ = new ::container::ResourceStat(*from.resource_stat_);
  } else {
    resource_stat_ = nullptr;
  }
  ::memcpy(&created_, &from.created_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_root_fs_) -
    reinterpret_cast<char*>(&created_)) + sizeof(size_root_fs_));
  // @@protoc_insertion_point(copy_constructor:container.ContainerInfo)
}

void ContainerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerInfo_container_5ftypes_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_root_fs_) -
      reinterpret_cast<char*>(&resource_stat_)) + sizeof(size_root_fs_));
}

ContainerInfo::~ContainerInfo() {
  // @@protoc_insertion_point(destructor:container.ContainerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resource_stat_;
}

void ContainerInfo::ArenaDtor(void* object) {
  ContainerInfo* _this = reinterpret_cast< ContainerInfo* >(object);
  (void)_this;
}
void ContainerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerInfo& ContainerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerInfo_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ContainerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:container.ContainerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && resource_stat_ != nullptr) {
    delete resource_stat_;
  }
  resource_stat_ = nullptr;
  ::memset(&created_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_root_fs_) -
      reinterpret_cast<char*>(&created_)) + sizeof(size_root_fs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerInfo.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerInfo.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerInfo.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerInfo.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 created = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size_rw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_rw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size_root_fs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          size_root_fs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .container.ResourceStat resource_stat = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.ContainerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerInfo.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // string image_id = 4;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerInfo.image_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image_id(), target);
  }

  // string command = 5;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerInfo.command");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_command(), target);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerInfo.state");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state(), target);
  }

  // int64 created = 7;
  if (this->created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_created(), target);
  }

  // int64 size_rw = 8;
  if (this->size_rw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_size_rw(), target);
  }

  // int64 size_root_fs = 9;
  if (this->size_root_fs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_size_root_fs(), target);
  }

  // map<string, string> labels = 10;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.ContainerInfo.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.ContainerInfo.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerInfo_LabelsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = ContainerInfo_LabelsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .container.ResourceStat resource_stat = 101;
  if (this->has_resource_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::resource_stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.ContainerInfo)
  return target;
}

size_t ContainerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.ContainerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ContainerInfo_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string image_id = 4;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  // string command = 5;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .container.ResourceStat resource_stat = 101;
  if (this->has_resource_stat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_stat_);
  }

  // int64 created = 7;
  if (this->created() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created());
  }

  // int64 size_rw = 8;
  if (this->size_rw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size_rw());
  }

  // int64 size_root_fs = 9;
  if (this->size_root_fs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size_root_fs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.ContainerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.ContainerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.ContainerInfo)
    MergeFrom(*source);
  }
}

void ContainerInfo::MergeFrom(const ContainerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.ContainerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
  if (from.image_id().size() > 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from.command().size() > 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.has_resource_stat()) {
    _internal_mutable_resource_stat()->::container::ResourceStat::MergeFrom(from._internal_resource_stat());
  }
  if (from.created() != 0) {
    _internal_set_created(from._internal_created());
  }
  if (from.size_rw() != 0) {
    _internal_set_size_rw(from._internal_size_rw());
  }
  if (from.size_root_fs() != 0) {
    _internal_set_size_root_fs(from._internal_size_root_fs());
  }
}

void ContainerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.ContainerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo::CopyFrom(const ContainerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.ContainerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo::IsInitialized() const {
  return true;
}

void ContainerInfo::InternalSwap(ContainerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerInfo, size_root_fs_)
      + sizeof(ContainerInfo::size_root_fs_)
      - PROTOBUF_FIELD_OFFSET(ContainerInfo, resource_stat_)>(
          reinterpret_cast<char*>(&resource_stat_),
          reinterpret_cast<char*>(&other->resource_stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerIdList::InitAsDefaultInstance() {
}
class ContainerIdList::_Internal {
 public:
};

ContainerIdList::ContainerIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  container_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.ContainerIdList)
}
ContainerIdList::ContainerIdList(const ContainerIdList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      container_ids_(from.container_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:container.ContainerIdList)
}

void ContainerIdList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerIdList_container_5ftypes_2eproto.base);
  node_id_ = PROTOBUF_LONGLONG(0);
}

ContainerIdList::~ContainerIdList() {
  // @@protoc_insertion_point(destructor:container.ContainerIdList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerIdList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainerIdList::ArenaDtor(void* object) {
  ContainerIdList* _this = reinterpret_cast< ContainerIdList* >(object);
  (void)_this;
}
void ContainerIdList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerIdList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerIdList& ContainerIdList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerIdList_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ContainerIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:container.ContainerIdList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_ids_.Clear();
  node_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerIdList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string container_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_container_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerIdList.container_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerIdList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.ContainerIdList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // repeated string container_ids = 2;
  for (int i = 0, n = this->_internal_container_ids_size(); i < n; i++) {
    const auto& s = this->_internal_container_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerIdList.container_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.ContainerIdList)
  return target;
}

size_t ContainerIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.ContainerIdList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string container_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(container_ids_.size());
  for (int i = 0, n = container_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      container_ids_.Get(i));
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerIdList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.ContainerIdList)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerIdList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerIdList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.ContainerIdList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.ContainerIdList)
    MergeFrom(*source);
  }
}

void ContainerIdList::MergeFrom(const ContainerIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.ContainerIdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_ids_.MergeFrom(from.container_ids_);
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void ContainerIdList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.ContainerIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerIdList::CopyFrom(const ContainerIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.ContainerIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerIdList::IsInitialized() const {
  return true;
}

void ContainerIdList::InternalSwap(ContainerIdList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_ids_.InternalSwap(&other->container_ids_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerIdList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mount::InitAsDefaultInstance() {
}
class Mount::_Internal {
 public:
};

Mount::Mount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.Mount)
}
Mount::Mount(const Mount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consistency().empty()) {
    consistency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consistency(),
      GetArena());
  }
  read_only_ = from.read_only_;
  // @@protoc_insertion_point(copy_constructor:container.Mount)
}

void Mount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mount_container_5ftypes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_only_ = false;
}

Mount::~Mount() {
  // @@protoc_insertion_point(destructor:container.Mount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mount::ArenaDtor(void* object) {
  Mount* _this = reinterpret_cast< Mount* >(object);
  (void)_this;
}
void Mount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mount& Mount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mount_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Mount::Clear() {
// @@protoc_insertion_point(message_clear_start:container.Mount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  consistency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  read_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.Mount.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.Mount.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.Mount.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool read_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          read_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consistency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_consistency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.Mount.consistency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.Mount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.Mount.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.Mount.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.Mount.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_read_only(), target);
  }

  // string consistency = 5;
  if (this->consistency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consistency().data(), static_cast<int>(this->_internal_consistency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.Mount.consistency");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_consistency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.Mount)
  return target;
}

size_t Mount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.Mount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string consistency = 5;
  if (this->consistency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consistency());
  }

  // bool read_only = 4;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.Mount)
  GOOGLE_DCHECK_NE(&from, this);
  const Mount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.Mount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.Mount)
    MergeFrom(*source);
  }
}

void Mount::MergeFrom(const Mount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.Mount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.consistency().size() > 0) {
    _internal_set_consistency(from._internal_consistency());
  }
  if (from.read_only() != 0) {
    _internal_set_read_only(from._internal_read_only());
  }
}

void Mount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.Mount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mount::CopyFrom(const Mount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.Mount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mount::IsInitialized() const {
  return true;
}

void Mount::InternalSwap(Mount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  consistency_.Swap(&other->consistency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(read_only_, other->read_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestartPolicy::InitAsDefaultInstance() {
}
class RestartPolicy::_Internal {
 public:
};

RestartPolicy::RestartPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.RestartPolicy)
}
RestartPolicy::RestartPolicy(const RestartPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  max_retry_ = from.max_retry_;
  // @@protoc_insertion_point(copy_constructor:container.RestartPolicy)
}

void RestartPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestartPolicy_container_5ftypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_retry_ = 0;
}

RestartPolicy::~RestartPolicy() {
  // @@protoc_insertion_point(destructor:container.RestartPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestartPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestartPolicy::ArenaDtor(void* object) {
  RestartPolicy* _this = reinterpret_cast< RestartPolicy* >(object);
  (void)_this;
}
void RestartPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestartPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestartPolicy& RestartPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestartPolicy_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void RestartPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:container.RestartPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_retry_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestartPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.RestartPolicy.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_retry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestartPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.RestartPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.RestartPolicy.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 max_retry = 2;
  if (this->max_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_retry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.RestartPolicy)
  return target;
}

size_t RestartPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.RestartPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 max_retry = 2;
  if (this->max_retry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_retry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.RestartPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestartPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.RestartPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.RestartPolicy)
    MergeFrom(*source);
  }
}

void RestartPolicy::MergeFrom(const RestartPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.RestartPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.max_retry() != 0) {
    _internal_set_max_retry(from._internal_max_retry());
  }
}

void RestartPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.RestartPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartPolicy::CopyFrom(const RestartPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.RestartPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartPolicy::IsInitialized() const {
  return true;
}

void RestartPolicy::InternalSwap(RestartPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(max_retry_, other->max_retry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceMapping::InitAsDefaultInstance() {
}
class DeviceMapping::_Internal {
 public:
};

DeviceMapping::DeviceMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.DeviceMapping)
}
DeviceMapping::DeviceMapping(const DeviceMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_on_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path_on_host().empty()) {
    path_on_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path_on_host(),
      GetArena());
  }
  path_in_container_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path_in_container().empty()) {
    path_in_container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path_in_container(),
      GetArena());
  }
  cgroup_permissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cgroup_permissions().empty()) {
    cgroup_permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cgroup_permissions(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:container.DeviceMapping)
}

void DeviceMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceMapping_container_5ftypes_2eproto.base);
  path_on_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_in_container_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cgroup_permissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceMapping::~DeviceMapping() {
  // @@protoc_insertion_point(destructor:container.DeviceMapping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_on_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_in_container_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cgroup_permissions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceMapping::ArenaDtor(void* object) {
  DeviceMapping* _this = reinterpret_cast< DeviceMapping* >(object);
  (void)_this;
}
void DeviceMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceMapping& DeviceMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceMapping_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void DeviceMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:container.DeviceMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_on_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_in_container_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cgroup_permissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path_on_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path_on_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.DeviceMapping.path_on_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path_in_container = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path_in_container();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.DeviceMapping.path_in_container"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cgroup_permissions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cgroup_permissions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.DeviceMapping.cgroup_permissions"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.DeviceMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path_on_host = 1;
  if (this->path_on_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_on_host().data(), static_cast<int>(this->_internal_path_on_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.DeviceMapping.path_on_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path_on_host(), target);
  }

  // string path_in_container = 2;
  if (this->path_in_container().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_in_container().data(), static_cast<int>(this->_internal_path_in_container().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.DeviceMapping.path_in_container");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_in_container(), target);
  }

  // string cgroup_permissions = 3;
  if (this->cgroup_permissions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cgroup_permissions().data(), static_cast<int>(this->_internal_cgroup_permissions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.DeviceMapping.cgroup_permissions");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cgroup_permissions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.DeviceMapping)
  return target;
}

size_t DeviceMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.DeviceMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path_on_host = 1;
  if (this->path_on_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_on_host());
  }

  // string path_in_container = 2;
  if (this->path_in_container().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_in_container());
  }

  // string cgroup_permissions = 3;
  if (this->cgroup_permissions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cgroup_permissions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.DeviceMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.DeviceMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.DeviceMapping)
    MergeFrom(*source);
  }
}

void DeviceMapping::MergeFrom(const DeviceMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.DeviceMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path_on_host().size() > 0) {
    _internal_set_path_on_host(from._internal_path_on_host());
  }
  if (from.path_in_container().size() > 0) {
    _internal_set_path_in_container(from._internal_path_in_container());
  }
  if (from.cgroup_permissions().size() > 0) {
    _internal_set_cgroup_permissions(from._internal_cgroup_permissions());
  }
}

void DeviceMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.DeviceMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceMapping::CopyFrom(const DeviceMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.DeviceMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMapping::IsInitialized() const {
  return true;
}

void DeviceMapping::InternalSwap(DeviceMapping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_on_host_.Swap(&other->path_on_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_in_container_.Swap(&other->path_in_container_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cgroup_permissions_.Swap(&other->cgroup_permissions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceConfig::InitAsDefaultInstance() {
}
class ResourceConfig::_Internal {
 public:
};

ResourceConfig::ResourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.ResourceConfig)
}
ResourceConfig::ResourceConfig(const ResourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nano_cpus_, &from.nano_cpus_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_soft_limit_) -
    reinterpret_cast<char*>(&nano_cpus_)) + sizeof(mem_soft_limit_));
  // @@protoc_insertion_point(copy_constructor:container.ResourceConfig)
}

void ResourceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceConfig_container_5ftypes_2eproto.base);
  ::memset(&nano_cpus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_soft_limit_) -
      reinterpret_cast<char*>(&nano_cpus_)) + sizeof(mem_soft_limit_));
}

ResourceConfig::~ResourceConfig() {
  // @@protoc_insertion_point(destructor:container.ResourceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceConfig::ArenaDtor(void* object) {
  ResourceConfig* _this = reinterpret_cast< ResourceConfig* >(object);
  (void)_this;
}
void ResourceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceConfig& ResourceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceConfig_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ResourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:container.ResourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  ::memset(&nano_cpus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_soft_limit_) -
      reinterpret_cast<char*>(&nano_cpus_)) + sizeof(mem_soft_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 nano_cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nano_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_shares = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cpu_shares_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem_soft_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          mem_soft_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .container.DeviceMapping devices = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.ResourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nano_cpus = 1;
  if (this->nano_cpus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_nano_cpus(), target);
  }

  // int64 cpu_shares = 2;
  if (this->cpu_shares() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cpu_shares(), target);
  }

  // int64 mem_limit = 11;
  if (this->mem_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_mem_limit(), target);
  }

  // int64 mem_soft_limit = 12;
  if (this->mem_soft_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_mem_soft_limit(), target);
  }

  // repeated .container.DeviceMapping devices = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.ResourceConfig)
  return target;
}

size_t ResourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.ResourceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .container.DeviceMapping devices = 101;
  total_size += 2UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 nano_cpus = 1;
  if (this->nano_cpus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nano_cpus());
  }

  // int64 cpu_shares = 2;
  if (this->cpu_shares() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_shares());
  }

  // int64 mem_limit = 11;
  if (this->mem_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mem_limit());
  }

  // int64 mem_soft_limit = 12;
  if (this->mem_soft_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mem_soft_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.ResourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.ResourceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.ResourceConfig)
    MergeFrom(*source);
  }
}

void ResourceConfig::MergeFrom(const ResourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.ResourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.nano_cpus() != 0) {
    _internal_set_nano_cpus(from._internal_nano_cpus());
  }
  if (from.cpu_shares() != 0) {
    _internal_set_cpu_shares(from._internal_cpu_shares());
  }
  if (from.mem_limit() != 0) {
    _internal_set_mem_limit(from._internal_mem_limit());
  }
  if (from.mem_soft_limit() != 0) {
    _internal_set_mem_soft_limit(from._internal_mem_soft_limit());
  }
}

void ResourceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.ResourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceConfig::CopyFrom(const ResourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.ResourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceConfig::IsInitialized() const {
  return true;
}

void ResourceConfig::InternalSwap(ResourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceConfig, mem_soft_limit_)
      + sizeof(ResourceConfig::mem_soft_limit_)
      - PROTOBUF_FIELD_OFFSET(ResourceConfig, nano_cpus_)>(
          reinterpret_cast<char*>(&nano_cpus_),
          reinterpret_cast<char*>(&other->nano_cpus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostConfig::InitAsDefaultInstance() {
  ::container::_HostConfig_default_instance_._instance.get_mutable()->restart_policy_ = const_cast< ::container::RestartPolicy*>(
      ::container::RestartPolicy::internal_default_instance());
  ::container::_HostConfig_default_instance_._instance.get_mutable()->resource_config_ = const_cast< ::container::ResourceConfig*>(
      ::container::ResourceConfig::internal_default_instance());
}
class HostConfig::_Internal {
 public:
  static const ::container::RestartPolicy& restart_policy(const HostConfig* msg);
  static const ::container::ResourceConfig& resource_config(const HostConfig* msg);
};

const ::container::RestartPolicy&
HostConfig::_Internal::restart_policy(const HostConfig* msg) {
  return *msg->restart_policy_;
}
const ::container::ResourceConfig&
HostConfig::_Internal::resource_config(const HostConfig* msg) {
  return *msg->resource_config_;
}
HostConfig::HostConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.HostConfig)
}
HostConfig::HostConfig(const HostConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mounts_(from.mounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  network_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_mode().empty()) {
    network_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_network_mode(),
      GetArena());
  }
  ipc_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipc_mode().empty()) {
    ipc_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipc_mode(),
      GetArena());
  }
  if (from._internal_has_restart_policy()) {
    restart_policy_ = new ::container::RestartPolicy(*from.restart_policy_);
  } else {
    restart_policy_ = nullptr;
  }
  if (from._internal_has_resource_config()) {
    resource_config_ = new ::container::ResourceConfig(*from.resource_config_);
  } else {
    resource_config_ = nullptr;
  }
  ::memcpy(&auto_remove_, &from.auto_remove_,
    static_cast<size_t>(reinterpret_cast<char*>(&privileged_) -
    reinterpret_cast<char*>(&auto_remove_)) + sizeof(privileged_));
  // @@protoc_insertion_point(copy_constructor:container.HostConfig)
}

void HostConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostConfig_container_5ftypes_2eproto.base);
  network_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipc_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&restart_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileged_) -
      reinterpret_cast<char*>(&restart_policy_)) + sizeof(privileged_));
}

HostConfig::~HostConfig() {
  // @@protoc_insertion_point(destructor:container.HostConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  network_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipc_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete restart_policy_;
  if (this != internal_default_instance()) delete resource_config_;
}

void HostConfig::ArenaDtor(void* object) {
  HostConfig* _this = reinterpret_cast< HostConfig* >(object);
  (void)_this;
}
void HostConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostConfig& HostConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostConfig_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void HostConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:container.HostConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mounts_.Clear();
  network_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipc_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && restart_policy_ != nullptr) {
    delete restart_policy_;
  }
  restart_policy_ = nullptr;
  if (GetArena() == nullptr && resource_config_ != nullptr) {
    delete resource_config_;
  }
  resource_config_ = nullptr;
  ::memset(&auto_remove_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileged_) -
      reinterpret_cast<char*>(&auto_remove_)) + sizeof(privileged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string network_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_network_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.HostConfig.network_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.RestartPolicy restart_policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_remove = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          auto_remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipc_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ipc_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.HostConfig.ipc_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .container.Mount mounts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool privileged = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          privileged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.ResourceConfig resource_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.HostConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string network_mode = 1;
  if (this->network_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_mode().data(), static_cast<int>(this->_internal_network_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.HostConfig.network_mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network_mode(), target);
  }

  // .container.RestartPolicy restart_policy = 2;
  if (this->has_restart_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::restart_policy(this), target, stream);
  }

  // bool auto_remove = 3;
  if (this->auto_remove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_auto_remove(), target);
  }

  // string ipc_mode = 4;
  if (this->ipc_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipc_mode().data(), static_cast<int>(this->_internal_ipc_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.HostConfig.ipc_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipc_mode(), target);
  }

  // repeated .container.Mount mounts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_mounts(i), target, stream);
  }

  // bool privileged = 6;
  if (this->privileged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_privileged(), target);
  }

  // .container.ResourceConfig resource_config = 7;
  if (this->has_resource_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resource_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.HostConfig)
  return target;
}

size_t HostConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.HostConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .container.Mount mounts = 5;
  total_size += 1UL * this->_internal_mounts_size();
  for (const auto& msg : this->mounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string network_mode = 1;
  if (this->network_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_mode());
  }

  // string ipc_mode = 4;
  if (this->ipc_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipc_mode());
  }

  // .container.RestartPolicy restart_policy = 2;
  if (this->has_restart_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *restart_policy_);
  }

  // .container.ResourceConfig resource_config = 7;
  if (this->has_resource_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_config_);
  }

  // bool auto_remove = 3;
  if (this->auto_remove() != 0) {
    total_size += 1 + 1;
  }

  // bool privileged = 6;
  if (this->privileged() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.HostConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HostConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.HostConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.HostConfig)
    MergeFrom(*source);
  }
}

void HostConfig::MergeFrom(const HostConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.HostConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mounts_.MergeFrom(from.mounts_);
  if (from.network_mode().size() > 0) {
    _internal_set_network_mode(from._internal_network_mode());
  }
  if (from.ipc_mode().size() > 0) {
    _internal_set_ipc_mode(from._internal_ipc_mode());
  }
  if (from.has_restart_policy()) {
    _internal_mutable_restart_policy()->::container::RestartPolicy::MergeFrom(from._internal_restart_policy());
  }
  if (from.has_resource_config()) {
    _internal_mutable_resource_config()->::container::ResourceConfig::MergeFrom(from._internal_resource_config());
  }
  if (from.auto_remove() != 0) {
    _internal_set_auto_remove(from._internal_auto_remove());
  }
  if (from.privileged() != 0) {
    _internal_set_privileged(from._internal_privileged());
  }
}

void HostConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.HostConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostConfig::CopyFrom(const HostConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.HostConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostConfig::IsInitialized() const {
  return true;
}

void HostConfig::InternalSwap(HostConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mounts_.InternalSwap(&other->mounts_);
  network_mode_.Swap(&other->network_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipc_mode_.Swap(&other->ipc_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostConfig, privileged_)
      + sizeof(HostConfig::privileged_)
      - PROTOBUF_FIELD_OFFSET(HostConfig, restart_policy_)>(
          reinterpret_cast<char*>(&restart_policy_),
          reinterpret_cast<char*>(&other->restart_policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerConfig_EnvEntry_DoNotUse::ContainerConfig_EnvEntry_DoNotUse() {}
ContainerConfig_EnvEntry_DoNotUse::ContainerConfig_EnvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerConfig_EnvEntry_DoNotUse::MergeFrom(const ContainerConfig_EnvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerConfig_EnvEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerConfig_EnvEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ContainerConfig_LabelsEntry_DoNotUse::ContainerConfig_LabelsEntry_DoNotUse() {}
ContainerConfig_LabelsEntry_DoNotUse::ContainerConfig_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerConfig_LabelsEntry_DoNotUse::MergeFrom(const ContainerConfig_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerConfig_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerConfig_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerConfig::InitAsDefaultInstance() {
}
class ContainerConfig::_Internal {
 public:
};

ContainerConfig::ContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  env_(arena),
  entrypoint_(arena),
  cmd_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.ContainerConfig)
}
ContainerConfig::ContainerConfig(const ContainerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entrypoint_(from.entrypoint_),
      cmd_(from.cmd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  env_.MergeFrom(from.env_);
  labels_.MergeFrom(from.labels_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  domain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_name().empty()) {
    domain_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_domain_name(),
      GetArena());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user(),
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  working_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_working_dir().empty()) {
    working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_working_dir(),
      GetArena());
  }
  network_disabled_ = from.network_disabled_;
  // @@protoc_insertion_point(copy_constructor:container.ContainerConfig)
}

void ContainerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerConfig_container_5ftypes_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  working_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_disabled_ = false;
}

ContainerConfig::~ContainerConfig() {
  // @@protoc_insertion_point(destructor:container.ContainerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  working_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerConfig::ArenaDtor(void* object) {
  ContainerConfig* _this = reinterpret_cast< ContainerConfig* >(object);
  (void)_this;
}
void ContainerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerConfig& ContainerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerConfig_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ContainerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:container.ContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  env_.Clear();
  entrypoint_.Clear();
  cmd_.Clear();
  labels_.Clear();
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  working_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_disabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.domain_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> env = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&env_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string working_dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_working_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.working_dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string entrypoint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entrypoint();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.entrypoint"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmd();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ContainerConfig.cmd"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // bool network_disabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          network_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.ContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_name().data(), static_cast<int>(this->_internal_domain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.domain_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain_name(), target);
  }

  // string user = 3;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // map<string, string> env = 4;
  if (!this->_internal_env().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.ContainerConfig.EnvEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.ContainerConfig.EnvEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_env().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_env().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_env().begin();
          it != this->_internal_env().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerConfig_EnvEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_env().begin();
          it != this->_internal_env().end(); ++it) {
        target = ContainerConfig_EnvEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string image = 5;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.image");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_image(), target);
  }

  // string working_dir = 6;
  if (this->working_dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_working_dir().data(), static_cast<int>(this->_internal_working_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.working_dir");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_working_dir(), target);
  }

  // repeated string entrypoint = 7;
  for (int i = 0, n = this->_internal_entrypoint_size(); i < n; i++) {
    const auto& s = this->_internal_entrypoint(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.entrypoint");
    target = stream->WriteString(7, s, target);
  }

  // repeated string cmd = 8;
  for (int i = 0, n = this->_internal_cmd_size(); i < n; i++) {
    const auto& s = this->_internal_cmd(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ContainerConfig.cmd");
    target = stream->WriteString(8, s, target);
  }

  // bool network_disabled = 9;
  if (this->network_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_network_disabled(), target);
  }

  // map<string, string> labels = 10;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.ContainerConfig.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "container.ContainerConfig.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerConfig_LabelsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = ContainerConfig_LabelsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.ContainerConfig)
  return target;
}

size_t ContainerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.ContainerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> env = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_env_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_env().begin();
      it != this->_internal_env().end(); ++it) {
    total_size += ContainerConfig_EnvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string entrypoint = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(entrypoint_.size());
  for (int i = 0, n = entrypoint_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      entrypoint_.Get(i));
  }

  // repeated string cmd = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cmd_.size());
  for (int i = 0, n = cmd_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cmd_.Get(i));
  }

  // map<string, string> labels = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ContainerConfig_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_name());
  }

  // string user = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string image = 5;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string working_dir = 6;
  if (this->working_dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_working_dir());
  }

  // bool network_disabled = 9;
  if (this->network_disabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.ContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.ContainerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.ContainerConfig)
    MergeFrom(*source);
  }
}

void ContainerConfig::MergeFrom(const ContainerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.ContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  env_.MergeFrom(from.env_);
  entrypoint_.MergeFrom(from.entrypoint_);
  cmd_.MergeFrom(from.cmd_);
  labels_.MergeFrom(from.labels_);
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.domain_name().size() > 0) {
    _internal_set_domain_name(from._internal_domain_name());
  }
  if (from.user().size() > 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
  if (from.working_dir().size() > 0) {
    _internal_set_working_dir(from._internal_working_dir());
  }
  if (from.network_disabled() != 0) {
    _internal_set_network_disabled(from._internal_network_disabled());
  }
}

void ContainerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.ContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerConfig::CopyFrom(const ContainerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.ContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerConfig::IsInitialized() const {
  return true;
}

void ContainerConfig::InternalSwap(ContainerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  env_.Swap(&other->env_);
  entrypoint_.InternalSwap(&other->entrypoint_);
  cmd_.InternalSwap(&other->cmd_);
  labels_.Swap(&other->labels_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_name_.Swap(&other->domain_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  working_dir_.Swap(&other->working_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(network_disabled_, other->network_disabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpuStat::InitAsDefaultInstance() {
}
class CpuStat::_Internal {
 public:
};

CpuStat::CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.CpuStat)
}
CpuStat::CpuStat(const CpuStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  core_used_ = from.core_used_;
  // @@protoc_insertion_point(copy_constructor:container.CpuStat)
}

void CpuStat::SharedCtor() {
  core_used_ = 0;
}

CpuStat::~CpuStat() {
  // @@protoc_insertion_point(destructor:container.CpuStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpuStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CpuStat::ArenaDtor(void* object) {
  CpuStat* _this = reinterpret_cast< CpuStat* >(object);
  (void)_this;
}
void CpuStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuStat& CpuStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuStat_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void CpuStat::Clear() {
// @@protoc_insertion_point(message_clear_start:container.CpuStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  core_used_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double core_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          core_used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.CpuStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double core_used = 1;
  if (!(this->core_used() <= 0 && this->core_used() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_core_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.CpuStat)
  return target;
}

size_t CpuStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.CpuStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double core_used = 1;
  if (!(this->core_used() <= 0 && this->core_used() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.CpuStat)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.CpuStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.CpuStat)
    MergeFrom(*source);
  }
}

void CpuStat::MergeFrom(const CpuStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.CpuStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.core_used() <= 0 && from.core_used() >= 0)) {
    _internal_set_core_used(from._internal_core_used());
  }
}

void CpuStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.CpuStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuStat::CopyFrom(const CpuStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.CpuStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuStat::IsInitialized() const {
  return true;
}

void CpuStat::InternalSwap(CpuStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(core_used_, other->core_used_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryStat::InitAsDefaultInstance() {
}
class MemoryStat::_Internal {
 public:
};

MemoryStat::MemoryStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.MemoryStat)
}
MemoryStat::MemoryStat(const MemoryStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&used_, &from.used_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentage_) -
    reinterpret_cast<char*>(&used_)) + sizeof(percentage_));
  // @@protoc_insertion_point(copy_constructor:container.MemoryStat)
}

void MemoryStat::SharedCtor() {
  ::memset(&used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_) -
      reinterpret_cast<char*>(&used_)) + sizeof(percentage_));
}

MemoryStat::~MemoryStat() {
  // @@protoc_insertion_point(destructor:container.MemoryStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoryStat::ArenaDtor(void* object) {
  MemoryStat* _this = reinterpret_cast< MemoryStat* >(object);
  (void)_this;
}
void MemoryStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryStat& MemoryStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryStat_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void MemoryStat::Clear() {
// @@protoc_insertion_point(message_clear_start:container.MemoryStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_) -
      reinterpret_cast<char*>(&used_)) + sizeof(percentage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.MemoryStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 used = 1;
  if (this->used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_used(), target);
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  // double percentage = 3;
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.MemoryStat)
  return target;
}

size_t MemoryStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.MemoryStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 used = 1;
  if (this->used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_used());
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  // double percentage = 3;
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.MemoryStat)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.MemoryStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.MemoryStat)
    MergeFrom(*source);
  }
}

void MemoryStat::MergeFrom(const MemoryStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.MemoryStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (!(from.percentage() <= 0 && from.percentage() >= 0)) {
    _internal_set_percentage(from._internal_percentage());
  }
}

void MemoryStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.MemoryStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryStat::CopyFrom(const MemoryStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.MemoryStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryStat::IsInitialized() const {
  return true;
}

void MemoryStat::InternalSwap(MemoryStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryStat, percentage_)
      + sizeof(MemoryStat::percentage_)
      - PROTOBUF_FIELD_OFFSET(MemoryStat, used_)>(
          reinterpret_cast<char*>(&used_),
          reinterpret_cast<char*>(&other->used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockStat::InitAsDefaultInstance() {
}
class BlockStat::_Internal {
 public:
};

BlockStat::BlockStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.BlockStat)
}
BlockStat::BlockStat(const BlockStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&read_, &from.read_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_) -
    reinterpret_cast<char*>(&read_)) + sizeof(write_));
  // @@protoc_insertion_point(copy_constructor:container.BlockStat)
}

void BlockStat::SharedCtor() {
  ::memset(&read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_) -
      reinterpret_cast<char*>(&read_)) + sizeof(write_));
}

BlockStat::~BlockStat() {
  // @@protoc_insertion_point(destructor:container.BlockStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockStat::ArenaDtor(void* object) {
  BlockStat* _this = reinterpret_cast< BlockStat* >(object);
  (void)_this;
}
void BlockStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockStat& BlockStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockStat_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void BlockStat::Clear() {
// @@protoc_insertion_point(message_clear_start:container.BlockStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_) -
      reinterpret_cast<char*>(&read_)) + sizeof(write_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 write = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.BlockStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 read = 1;
  if (this->read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_read(), target);
  }

  // uint64 write = 2;
  if (this->write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_write(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.BlockStat)
  return target;
}

size_t BlockStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.BlockStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 read = 1;
  if (this->read() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_read());
  }

  // uint64 write = 2;
  if (this->write() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_write());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.BlockStat)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.BlockStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.BlockStat)
    MergeFrom(*source);
  }
}

void BlockStat::MergeFrom(const BlockStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.BlockStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read() != 0) {
    _internal_set_read(from._internal_read());
  }
  if (from.write() != 0) {
    _internal_set_write(from._internal_write());
  }
}

void BlockStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.BlockStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockStat::CopyFrom(const BlockStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.BlockStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStat::IsInitialized() const {
  return true;
}

void BlockStat::InternalSwap(BlockStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockStat, write_)
      + sizeof(BlockStat::write_)
      - PROTOBUF_FIELD_OFFSET(BlockStat, read_)>(
          reinterpret_cast<char*>(&read_),
          reinterpret_cast<char*>(&other->read_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkStats::InitAsDefaultInstance() {
}
class NetworkStats::_Internal {
 public:
};

NetworkStats::NetworkStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.NetworkStats)
}
NetworkStats::NetworkStats(const NetworkStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rx_, &from.rx_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_) -
    reinterpret_cast<char*>(&rx_)) + sizeof(tx_));
  // @@protoc_insertion_point(copy_constructor:container.NetworkStats)
}

void NetworkStats::SharedCtor() {
  ::memset(&rx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) -
      reinterpret_cast<char*>(&rx_)) + sizeof(tx_));
}

NetworkStats::~NetworkStats() {
  // @@protoc_insertion_point(destructor:container.NetworkStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkStats::ArenaDtor(void* object) {
  NetworkStats* _this = reinterpret_cast< NetworkStats* >(object);
  (void)_this;
}
void NetworkStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStats& NetworkStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStats_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void NetworkStats::Clear() {
// @@protoc_insertion_point(message_clear_start:container.NetworkStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) -
      reinterpret_cast<char*>(&rx_)) + sizeof(tx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 rx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.NetworkStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rx = 1;
  if (this->rx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rx(), target);
  }

  // uint64 tx = 2;
  if (this->tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.NetworkStats)
  return target;
}

size_t NetworkStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.NetworkStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rx = 1;
  if (this->rx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rx());
  }

  // uint64 tx = 2;
  if (this->tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.NetworkStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.NetworkStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.NetworkStats)
    MergeFrom(*source);
  }
}

void NetworkStats::MergeFrom(const NetworkStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.NetworkStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rx() != 0) {
    _internal_set_rx(from._internal_rx());
  }
  if (from.tx() != 0) {
    _internal_set_tx(from._internal_tx());
  }
}

void NetworkStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.NetworkStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkStats::CopyFrom(const NetworkStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.NetworkStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStats::IsInitialized() const {
  return true;
}

void NetworkStats::InternalSwap(NetworkStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkStats, tx_)
      + sizeof(NetworkStats::tx_)
      - PROTOBUF_FIELD_OFFSET(NetworkStats, rx_)>(
          reinterpret_cast<char*>(&rx_),
          reinterpret_cast<char*>(&other->rx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceStat::InitAsDefaultInstance() {
  ::container::_ResourceStat_default_instance_._instance.get_mutable()->cpu_stat_ = const_cast< ::container::CpuStat*>(
      ::container::CpuStat::internal_default_instance());
  ::container::_ResourceStat_default_instance_._instance.get_mutable()->mem_stat_ = const_cast< ::container::MemoryStat*>(
      ::container::MemoryStat::internal_default_instance());
  ::container::_ResourceStat_default_instance_._instance.get_mutable()->block_stat_ = const_cast< ::container::BlockStat*>(
      ::container::BlockStat::internal_default_instance());
  ::container::_ResourceStat_default_instance_._instance.get_mutable()->net_stat_ = const_cast< ::container::NetworkStats*>(
      ::container::NetworkStats::internal_default_instance());
}
class ResourceStat::_Internal {
 public:
  static const ::container::CpuStat& cpu_stat(const ResourceStat* msg);
  static const ::container::MemoryStat& mem_stat(const ResourceStat* msg);
  static const ::container::BlockStat& block_stat(const ResourceStat* msg);
  static const ::container::NetworkStats& net_stat(const ResourceStat* msg);
};

const ::container::CpuStat&
ResourceStat::_Internal::cpu_stat(const ResourceStat* msg) {
  return *msg->cpu_stat_;
}
const ::container::MemoryStat&
ResourceStat::_Internal::mem_stat(const ResourceStat* msg) {
  return *msg->mem_stat_;
}
const ::container::BlockStat&
ResourceStat::_Internal::block_stat(const ResourceStat* msg) {
  return *msg->block_stat_;
}
const ::container::NetworkStats&
ResourceStat::_Internal::net_stat(const ResourceStat* msg) {
  return *msg->net_stat_;
}
ResourceStat::ResourceStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.ResourceStat)
}
ResourceStat::ResourceStat(const ResourceStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state(),
      GetArena());
  }
  if (from._internal_has_cpu_stat()) {
    cpu_stat_ = new ::container::CpuStat(*from.cpu_stat_);
  } else {
    cpu_stat_ = nullptr;
  }
  if (from._internal_has_mem_stat()) {
    mem_stat_ = new ::container::MemoryStat(*from.mem_stat_);
  } else {
    mem_stat_ = nullptr;
  }
  if (from._internal_has_block_stat()) {
    block_stat_ = new ::container::BlockStat(*from.block_stat_);
  } else {
    block_stat_ = nullptr;
  }
  if (from._internal_has_net_stat()) {
    net_stat_ = new ::container::NetworkStats(*from.net_stat_);
  } else {
    net_stat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:container.ResourceStat)
}

void ResourceStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceStat_container_5ftypes_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_stat_) -
      reinterpret_cast<char*>(&cpu_stat_)) + sizeof(net_stat_));
}

ResourceStat::~ResourceStat() {
  // @@protoc_insertion_point(destructor:container.ResourceStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cpu_stat_;
  if (this != internal_default_instance()) delete mem_stat_;
  if (this != internal_default_instance()) delete block_stat_;
  if (this != internal_default_instance()) delete net_stat_;
}

void ResourceStat::ArenaDtor(void* object) {
  ResourceStat* _this = reinterpret_cast< ResourceStat* >(object);
  (void)_this;
}
void ResourceStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceStat& ResourceStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceStat_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ResourceStat::Clear() {
// @@protoc_insertion_point(message_clear_start:container.ResourceStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cpu_stat_ != nullptr) {
    delete cpu_stat_;
  }
  cpu_stat_ = nullptr;
  if (GetArena() == nullptr && mem_stat_ != nullptr) {
    delete mem_stat_;
  }
  mem_stat_ = nullptr;
  if (GetArena() == nullptr && block_stat_ != nullptr) {
    delete block_stat_;
  }
  block_stat_ = nullptr;
  if (GetArena() == nullptr && net_stat_ != nullptr) {
    delete net_stat_;
  }
  net_stat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ResourceStat.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.ResourceStat.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.CpuStat cpu_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.MemoryStat mem_stat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mem_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.BlockStat block_stat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.NetworkStats net_stat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.ResourceStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ResourceStat.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string state = 2;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.ResourceStat.state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state(), target);
  }

  // .container.CpuStat cpu_stat = 3;
  if (this->has_cpu_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cpu_stat(this), target, stream);
  }

  // .container.MemoryStat mem_stat = 4;
  if (this->has_mem_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mem_stat(this), target, stream);
  }

  // .container.BlockStat block_stat = 5;
  if (this->has_block_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::block_stat(this), target, stream);
  }

  // .container.NetworkStats net_stat = 6;
  if (this->has_net_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::net_stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.ResourceStat)
  return target;
}

size_t ResourceStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.ResourceStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .container.CpuStat cpu_stat = 3;
  if (this->has_cpu_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_stat_);
  }

  // .container.MemoryStat mem_stat = 4;
  if (this->has_mem_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mem_stat_);
  }

  // .container.BlockStat block_stat = 5;
  if (this->has_block_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_stat_);
  }

  // .container.NetworkStats net_stat = 6;
  if (this->has_net_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_stat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.ResourceStat)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.ResourceStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.ResourceStat)
    MergeFrom(*source);
  }
}

void ResourceStat::MergeFrom(const ResourceStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.ResourceStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.has_cpu_stat()) {
    _internal_mutable_cpu_stat()->::container::CpuStat::MergeFrom(from._internal_cpu_stat());
  }
  if (from.has_mem_stat()) {
    _internal_mutable_mem_stat()->::container::MemoryStat::MergeFrom(from._internal_mem_stat());
  }
  if (from.has_block_stat()) {
    _internal_mutable_block_stat()->::container::BlockStat::MergeFrom(from._internal_block_stat());
  }
  if (from.has_net_stat()) {
    _internal_mutable_net_stat()->::container::NetworkStats::MergeFrom(from._internal_net_stat());
  }
}

void ResourceStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.ResourceStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceStat::CopyFrom(const ResourceStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.ResourceStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceStat::IsInitialized() const {
  return true;
}

void ResourceStat::InternalSwap(ResourceStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceStat, net_stat_)
      + sizeof(ResourceStat::net_stat_)
      - PROTOBUF_FIELD_OFFSET(ResourceStat, cpu_stat_)>(
          reinterpret_cast<char*>(&cpu_stat_),
          reinterpret_cast<char*>(&other->cpu_stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkAddress::InitAsDefaultInstance() {
}
class NetworkAddress::_Internal {
 public:
};

NetworkAddress::NetworkAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.NetworkAddress)
}
NetworkAddress::NetworkAddress(const NetworkAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:container.NetworkAddress)
}

void NetworkAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkAddress_container_5ftypes_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0;
}

NetworkAddress::~NetworkAddress() {
  // @@protoc_insertion_point(destructor:container.NetworkAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkAddress::ArenaDtor(void* object) {
  NetworkAddress* _this = reinterpret_cast< NetworkAddress* >(object);
  (void)_this;
}
void NetworkAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkAddress& NetworkAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkAddress_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void NetworkAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:container.NetworkAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_len_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkAddress.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.NetworkAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkAddress.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.NetworkAddress)
  return target;
}

size_t NetworkAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.NetworkAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.NetworkAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.NetworkAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.NetworkAddress)
    MergeFrom(*source);
  }
}

void NetworkAddress::MergeFrom(const NetworkAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.NetworkAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void NetworkAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.NetworkAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAddress::CopyFrom(const NetworkAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.NetworkAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAddress::IsInitialized() const {
  return true;
}

void NetworkAddress::InternalSwap(NetworkAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkSettingBase::InitAsDefaultInstance() {
  ::container::_NetworkSettingBase_default_instance_._instance.get_mutable()->secondary_ip_addresses_ = const_cast< ::container::NetworkAddress*>(
      ::container::NetworkAddress::internal_default_instance());
  ::container::_NetworkSettingBase_default_instance_._instance.get_mutable()->secondary_ipv6_addresses_ = const_cast< ::container::NetworkAddress*>(
      ::container::NetworkAddress::internal_default_instance());
}
class NetworkSettingBase::_Internal {
 public:
  static const ::container::NetworkAddress& secondary_ip_addresses(const NetworkSettingBase* msg);
  static const ::container::NetworkAddress& secondary_ipv6_addresses(const NetworkSettingBase* msg);
};

const ::container::NetworkAddress&
NetworkSettingBase::_Internal::secondary_ip_addresses(const NetworkSettingBase* msg) {
  return *msg->secondary_ip_addresses_;
}
const ::container::NetworkAddress&
NetworkSettingBase::_Internal::secondary_ipv6_addresses(const NetworkSettingBase* msg) {
  return *msg->secondary_ipv6_addresses_;
}
NetworkSettingBase::NetworkSettingBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:container.NetworkSettingBase)
}
NetworkSettingBase::NetworkSettingBase(const NetworkSettingBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bridge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bridge().empty()) {
    bridge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bridge(),
      GetArena());
  }
  sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandbox_id().empty()) {
    sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandbox_id(),
      GetArena());
  }
  link_local_ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_local_ipv6_address().empty()) {
    link_local_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_link_local_ipv6_address(),
      GetArena());
  }
  sandbox_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandbox_key().empty()) {
    sandbox_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandbox_key(),
      GetArena());
  }
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint_id().empty()) {
    endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint_id(),
      GetArena());
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gateway().empty()) {
    gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gateway(),
      GetArena());
  }
  global_ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_ipv6_address().empty()) {
    global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_ipv6_address(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  ipv6_gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_gateway().empty()) {
    ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv6_gateway(),
      GetArena());
  }
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_address(),
      GetArena());
  }
  if (from._internal_has_secondary_ip_addresses()) {
    secondary_ip_addresses_ = new ::container::NetworkAddress(*from.secondary_ip_addresses_);
  } else {
    secondary_ip_addresses_ = nullptr;
  }
  if (from._internal_has_secondary_ipv6_addresses()) {
    secondary_ipv6_addresses_ = new ::container::NetworkAddress(*from.secondary_ipv6_addresses_);
  } else {
    secondary_ipv6_addresses_ = nullptr;
  }
  ::memcpy(&hairpin_mode_, &from.hairpin_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_prefix_len_) -
    reinterpret_cast<char*>(&hairpin_mode_)) + sizeof(ip_prefix_len_));
  // @@protoc_insertion_point(copy_constructor:container.NetworkSettingBase)
}

void NetworkSettingBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkSettingBase_container_5ftypes_2eproto.base);
  bridge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_local_ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandbox_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&secondary_ip_addresses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_prefix_len_) -
      reinterpret_cast<char*>(&secondary_ip_addresses_)) + sizeof(ip_prefix_len_));
}

NetworkSettingBase::~NetworkSettingBase() {
  // @@protoc_insertion_point(destructor:container.NetworkSettingBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkSettingBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bridge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_local_ipv6_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandbox_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_ipv6_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete secondary_ip_addresses_;
  if (this != internal_default_instance()) delete secondary_ipv6_addresses_;
}

void NetworkSettingBase::ArenaDtor(void* object) {
  NetworkSettingBase* _this = reinterpret_cast< NetworkSettingBase* >(object);
  (void)_this;
}
void NetworkSettingBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkSettingBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkSettingBase& NetworkSettingBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkSettingBase_container_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void NetworkSettingBase::Clear() {
// @@protoc_insertion_point(message_clear_start:container.NetworkSettingBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  link_local_ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandbox_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && secondary_ip_addresses_ != nullptr) {
    delete secondary_ip_addresses_;
  }
  secondary_ip_addresses_ = nullptr;
  if (GetArena() == nullptr && secondary_ipv6_addresses_ != nullptr) {
    delete secondary_ipv6_addresses_;
  }
  secondary_ipv6_addresses_ = nullptr;
  ::memset(&hairpin_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_prefix_len_) -
      reinterpret_cast<char*>(&hairpin_mode_)) + sizeof(ip_prefix_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkSettingBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bridge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bridge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.bridge"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sandbox_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hairpin_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hairpin_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link_local_ipv6_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_link_local_ipv6_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.link_local_ipv6_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_local_ipv6_prefix_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          link_local_ipv6_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sandbox_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sandbox_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.sandbox_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.NetworkAddress secondary_ip_addresses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_ip_addresses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .container.NetworkAddress secondary_ipv6_addresses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_ipv6_addresses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_endpoint_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.endpoint_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gateway = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.gateway"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string global_ipv6_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_global_ipv6_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.global_ipv6_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 global_ipv6_prefix_len = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          global_ipv6_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip_prefix_len = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ip_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_gateway = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_ipv6_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.ipv6_gateway"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac_address = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "container.NetworkSettingBase.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkSettingBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:container.NetworkSettingBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bridge = 1;
  if (this->bridge().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bridge().data(), static_cast<int>(this->_internal_bridge().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.bridge");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bridge(), target);
  }

  // string sandbox_id = 2;
  if (this->sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandbox_id().data(), static_cast<int>(this->_internal_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.sandbox_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sandbox_id(), target);
  }

  // bool hairpin_mode = 3;
  if (this->hairpin_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hairpin_mode(), target);
  }

  // string link_local_ipv6_address = 4;
  if (this->link_local_ipv6_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_local_ipv6_address().data(), static_cast<int>(this->_internal_link_local_ipv6_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.link_local_ipv6_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_link_local_ipv6_address(), target);
  }

  // int32 link_local_ipv6_prefix_len = 5;
  if (this->link_local_ipv6_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_link_local_ipv6_prefix_len(), target);
  }

  // string sandbox_key = 6;
  if (this->sandbox_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandbox_key().data(), static_cast<int>(this->_internal_sandbox_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.sandbox_key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sandbox_key(), target);
  }

  // .container.NetworkAddress secondary_ip_addresses = 7;
  if (this->has_secondary_ip_addresses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::secondary_ip_addresses(this), target, stream);
  }

  // .container.NetworkAddress secondary_ipv6_addresses = 8;
  if (this->has_secondary_ipv6_addresses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::secondary_ipv6_addresses(this), target, stream);
  }

  // string endpoint_id = 9;
  if (this->endpoint_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint_id().data(), static_cast<int>(this->_internal_endpoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.endpoint_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_endpoint_id(), target);
  }

  // string gateway = 10;
  if (this->gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.gateway");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gateway(), target);
  }

  // string global_ipv6_address = 11;
  if (this->global_ipv6_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_global_ipv6_address().data(), static_cast<int>(this->_internal_global_ipv6_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.global_ipv6_address");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_global_ipv6_address(), target);
  }

  // int32 global_ipv6_prefix_len = 12;
  if (this->global_ipv6_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_global_ipv6_prefix_len(), target);
  }

  // string ip_address = 13;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.ip_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_ip_address(), target);
  }

  // int32 ip_prefix_len = 14;
  if (this->ip_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_ip_prefix_len(), target);
  }

  // string ipv6_gateway = 15;
  if (this->ipv6_gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_gateway().data(), static_cast<int>(this->_internal_ipv6_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.ipv6_gateway");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_ipv6_gateway(), target);
  }

  // string mac_address = 16;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "container.NetworkSettingBase.mac_address");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_mac_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:container.NetworkSettingBase)
  return target;
}

size_t NetworkSettingBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:container.NetworkSettingBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bridge = 1;
  if (this->bridge().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bridge());
  }

  // string sandbox_id = 2;
  if (this->sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandbox_id());
  }

  // string link_local_ipv6_address = 4;
  if (this->link_local_ipv6_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_local_ipv6_address());
  }

  // string sandbox_key = 6;
  if (this->sandbox_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandbox_key());
  }

  // string endpoint_id = 9;
  if (this->endpoint_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint_id());
  }

  // string gateway = 10;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());
  }

  // string global_ipv6_address = 11;
  if (this->global_ipv6_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_ipv6_address());
  }

  // string ip_address = 13;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string ipv6_gateway = 15;
  if (this->ipv6_gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_gateway());
  }

  // string mac_address = 16;
  if (this->mac_address().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // .container.NetworkAddress secondary_ip_addresses = 7;
  if (this->has_secondary_ip_addresses()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *secondary_ip_addresses_);
  }

  // .container.NetworkAddress secondary_ipv6_addresses = 8;
  if (this->has_secondary_ipv6_addresses()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *secondary_ipv6_addresses_);
  }

  // bool hairpin_mode = 3;
  if (this->hairpin_mode() != 0) {
    total_size += 1 + 1;
  }

  // int32 link_local_ipv6_prefix_len = 5;
  if (this->link_local_ipv6_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_local_ipv6_prefix_len());
  }

  // int32 global_ipv6_prefix_len = 12;
  if (this->global_ipv6_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_global_ipv6_prefix_len());
  }

  // int32 ip_prefix_len = 14;
  if (this->ip_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkSettingBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:container.NetworkSettingBase)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSettingBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkSettingBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:container.NetworkSettingBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:container.NetworkSettingBase)
    MergeFrom(*source);
  }
}

void NetworkSettingBase::MergeFrom(const NetworkSettingBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:container.NetworkSettingBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bridge().size() > 0) {
    _internal_set_bridge(from._internal_bridge());
  }
  if (from.sandbox_id().size() > 0) {
    _internal_set_sandbox_id(from._internal_sandbox_id());
  }
  if (from.link_local_ipv6_address().size() > 0) {
    _internal_set_link_local_ipv6_address(from._internal_link_local_ipv6_address());
  }
  if (from.sandbox_key().size() > 0) {
    _internal_set_sandbox_key(from._internal_sandbox_key());
  }
  if (from.endpoint_id().size() > 0) {
    _internal_set_endpoint_id(from._internal_endpoint_id());
  }
  if (from.gateway().size() > 0) {
    _internal_set_gateway(from._internal_gateway());
  }
  if (from.global_ipv6_address().size() > 0) {
    _internal_set_global_ipv6_address(from._internal_global_ipv6_address());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.ipv6_gateway().size() > 0) {
    _internal_set_ipv6_gateway(from._internal_ipv6_gateway());
  }
  if (from.mac_address().size() > 0) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from.has_secondary_ip_addresses()) {
    _internal_mutable_secondary_ip_addresses()->::container::NetworkAddress::MergeFrom(from._internal_secondary_ip_addresses());
  }
  if (from.has_secondary_ipv6_addresses()) {
    _internal_mutable_secondary_ipv6_addresses()->::container::NetworkAddress::MergeFrom(from._internal_secondary_ipv6_addresses());
  }
  if (from.hairpin_mode() != 0) {
    _internal_set_hairpin_mode(from._internal_hairpin_mode());
  }
  if (from.link_local_ipv6_prefix_len() != 0) {
    _internal_set_link_local_ipv6_prefix_len(from._internal_link_local_ipv6_prefix_len());
  }
  if (from.global_ipv6_prefix_len() != 0) {
    _internal_set_global_ipv6_prefix_len(from._internal_global_ipv6_prefix_len());
  }
  if (from.ip_prefix_len() != 0) {
    _internal_set_ip_prefix_len(from._internal_ip_prefix_len());
  }
}

void NetworkSettingBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:container.NetworkSettingBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSettingBase::CopyFrom(const NetworkSettingBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:container.NetworkSettingBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSettingBase::IsInitialized() const {
  return true;
}

void NetworkSettingBase::InternalSwap(NetworkSettingBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bridge_.Swap(&other->bridge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandbox_id_.Swap(&other->sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  link_local_ipv6_address_.Swap(&other->link_local_ipv6_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandbox_key_.Swap(&other->sandbox_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_id_.Swap(&other->endpoint_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_ipv6_address_.Swap(&other->global_ipv6_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_gateway_.Swap(&other->ipv6_gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkSettingBase, ip_prefix_len_)
      + sizeof(NetworkSettingBase::ip_prefix_len_)
      - PROTOBUF_FIELD_OFFSET(NetworkSettingBase, secondary_ip_addresses_)>(
          reinterpret_cast<char*>(&secondary_ip_addresses_),
          reinterpret_cast<char*>(&other->secondary_ip_addresses_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkSettingBase::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace container
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::container::Port* Arena::CreateMaybeMessage< ::container::Port >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::container::MountPoint* Arena::CreateMaybeMessage< ::container::MountPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::MountPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::container::IPAMConfig* Arena::CreateMaybeMessage< ::container::IPAMConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::IPAMConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::container::EndpointSetting_DriverOptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::container::EndpointSetting_DriverOptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::EndpointSetting_DriverOptsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::container::EndpointSetting* Arena::CreateMaybeMessage< ::container::EndpointSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::EndpointSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::container::NodeContainer* Arena::CreateMaybeMessage< ::container::NodeContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::NodeContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ContainerInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::container::ContainerInfo_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ContainerInfo_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ContainerInfo* Arena::CreateMaybeMessage< ::container::ContainerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ContainerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ContainerIdList* Arena::CreateMaybeMessage< ::container::ContainerIdList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ContainerIdList >(arena);
}
template<> PROTOBUF_NOINLINE ::container::Mount* Arena::CreateMaybeMessage< ::container::Mount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::Mount >(arena);
}
template<> PROTOBUF_NOINLINE ::container::RestartPolicy* Arena::CreateMaybeMessage< ::container::RestartPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::RestartPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::container::DeviceMapping* Arena::CreateMaybeMessage< ::container::DeviceMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::DeviceMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ResourceConfig* Arena::CreateMaybeMessage< ::container::ResourceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ResourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::container::HostConfig* Arena::CreateMaybeMessage< ::container::HostConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::HostConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ContainerConfig_EnvEntry_DoNotUse* Arena::CreateMaybeMessage< ::container::ContainerConfig_EnvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ContainerConfig_EnvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ContainerConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::container::ContainerConfig_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ContainerConfig_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ContainerConfig* Arena::CreateMaybeMessage< ::container::ContainerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ContainerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::container::CpuStat* Arena::CreateMaybeMessage< ::container::CpuStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::CpuStat >(arena);
}
template<> PROTOBUF_NOINLINE ::container::MemoryStat* Arena::CreateMaybeMessage< ::container::MemoryStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::MemoryStat >(arena);
}
template<> PROTOBUF_NOINLINE ::container::BlockStat* Arena::CreateMaybeMessage< ::container::BlockStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::BlockStat >(arena);
}
template<> PROTOBUF_NOINLINE ::container::NetworkStats* Arena::CreateMaybeMessage< ::container::NetworkStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::NetworkStats >(arena);
}
template<> PROTOBUF_NOINLINE ::container::ResourceStat* Arena::CreateMaybeMessage< ::container::ResourceStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::ResourceStat >(arena);
}
template<> PROTOBUF_NOINLINE ::container::NetworkAddress* Arena::CreateMaybeMessage< ::container::NetworkAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::NetworkAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::container::NetworkSettingBase* Arena::CreateMaybeMessage< ::container::NetworkSettingBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::container::NetworkSettingBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
