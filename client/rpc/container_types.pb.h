// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_container_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_container_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_container_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_container_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_container_5ftypes_2eproto;
namespace container {
class BlockStat;
class BlockStatDefaultTypeInternal;
extern BlockStatDefaultTypeInternal _BlockStat_default_instance_;
class ContainerConfig;
class ContainerConfigDefaultTypeInternal;
extern ContainerConfigDefaultTypeInternal _ContainerConfig_default_instance_;
class ContainerConfig_EnvEntry_DoNotUse;
class ContainerConfig_EnvEntry_DoNotUseDefaultTypeInternal;
extern ContainerConfig_EnvEntry_DoNotUseDefaultTypeInternal _ContainerConfig_EnvEntry_DoNotUse_default_instance_;
class ContainerConfig_LabelsEntry_DoNotUse;
class ContainerConfig_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ContainerConfig_LabelsEntry_DoNotUseDefaultTypeInternal _ContainerConfig_LabelsEntry_DoNotUse_default_instance_;
class ContainerIdList;
class ContainerIdListDefaultTypeInternal;
extern ContainerIdListDefaultTypeInternal _ContainerIdList_default_instance_;
class ContainerInfo;
class ContainerInfoDefaultTypeInternal;
extern ContainerInfoDefaultTypeInternal _ContainerInfo_default_instance_;
class ContainerInfo_LabelsEntry_DoNotUse;
class ContainerInfo_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ContainerInfo_LabelsEntry_DoNotUseDefaultTypeInternal _ContainerInfo_LabelsEntry_DoNotUse_default_instance_;
class CpuStat;
class CpuStatDefaultTypeInternal;
extern CpuStatDefaultTypeInternal _CpuStat_default_instance_;
class DeviceMapping;
class DeviceMappingDefaultTypeInternal;
extern DeviceMappingDefaultTypeInternal _DeviceMapping_default_instance_;
class EndpointSetting;
class EndpointSettingDefaultTypeInternal;
extern EndpointSettingDefaultTypeInternal _EndpointSetting_default_instance_;
class EndpointSetting_DriverOptsEntry_DoNotUse;
class EndpointSetting_DriverOptsEntry_DoNotUseDefaultTypeInternal;
extern EndpointSetting_DriverOptsEntry_DoNotUseDefaultTypeInternal _EndpointSetting_DriverOptsEntry_DoNotUse_default_instance_;
class HostConfig;
class HostConfigDefaultTypeInternal;
extern HostConfigDefaultTypeInternal _HostConfig_default_instance_;
class IPAMConfig;
class IPAMConfigDefaultTypeInternal;
extern IPAMConfigDefaultTypeInternal _IPAMConfig_default_instance_;
class MemoryStat;
class MemoryStatDefaultTypeInternal;
extern MemoryStatDefaultTypeInternal _MemoryStat_default_instance_;
class Mount;
class MountDefaultTypeInternal;
extern MountDefaultTypeInternal _Mount_default_instance_;
class MountPoint;
class MountPointDefaultTypeInternal;
extern MountPointDefaultTypeInternal _MountPoint_default_instance_;
class NetworkAddress;
class NetworkAddressDefaultTypeInternal;
extern NetworkAddressDefaultTypeInternal _NetworkAddress_default_instance_;
class NetworkSettingBase;
class NetworkSettingBaseDefaultTypeInternal;
extern NetworkSettingBaseDefaultTypeInternal _NetworkSettingBase_default_instance_;
class NetworkStats;
class NetworkStatsDefaultTypeInternal;
extern NetworkStatsDefaultTypeInternal _NetworkStats_default_instance_;
class NodeContainer;
class NodeContainerDefaultTypeInternal;
extern NodeContainerDefaultTypeInternal _NodeContainer_default_instance_;
class Port;
class PortDefaultTypeInternal;
extern PortDefaultTypeInternal _Port_default_instance_;
class ResourceConfig;
class ResourceConfigDefaultTypeInternal;
extern ResourceConfigDefaultTypeInternal _ResourceConfig_default_instance_;
class ResourceStat;
class ResourceStatDefaultTypeInternal;
extern ResourceStatDefaultTypeInternal _ResourceStat_default_instance_;
class RestartPolicy;
class RestartPolicyDefaultTypeInternal;
extern RestartPolicyDefaultTypeInternal _RestartPolicy_default_instance_;
}  // namespace container
PROTOBUF_NAMESPACE_OPEN
template<> ::container::BlockStat* Arena::CreateMaybeMessage<::container::BlockStat>(Arena*);
template<> ::container::ContainerConfig* Arena::CreateMaybeMessage<::container::ContainerConfig>(Arena*);
template<> ::container::ContainerConfig_EnvEntry_DoNotUse* Arena::CreateMaybeMessage<::container::ContainerConfig_EnvEntry_DoNotUse>(Arena*);
template<> ::container::ContainerConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::container::ContainerConfig_LabelsEntry_DoNotUse>(Arena*);
template<> ::container::ContainerIdList* Arena::CreateMaybeMessage<::container::ContainerIdList>(Arena*);
template<> ::container::ContainerInfo* Arena::CreateMaybeMessage<::container::ContainerInfo>(Arena*);
template<> ::container::ContainerInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::container::ContainerInfo_LabelsEntry_DoNotUse>(Arena*);
template<> ::container::CpuStat* Arena::CreateMaybeMessage<::container::CpuStat>(Arena*);
template<> ::container::DeviceMapping* Arena::CreateMaybeMessage<::container::DeviceMapping>(Arena*);
template<> ::container::EndpointSetting* Arena::CreateMaybeMessage<::container::EndpointSetting>(Arena*);
template<> ::container::EndpointSetting_DriverOptsEntry_DoNotUse* Arena::CreateMaybeMessage<::container::EndpointSetting_DriverOptsEntry_DoNotUse>(Arena*);
template<> ::container::HostConfig* Arena::CreateMaybeMessage<::container::HostConfig>(Arena*);
template<> ::container::IPAMConfig* Arena::CreateMaybeMessage<::container::IPAMConfig>(Arena*);
template<> ::container::MemoryStat* Arena::CreateMaybeMessage<::container::MemoryStat>(Arena*);
template<> ::container::Mount* Arena::CreateMaybeMessage<::container::Mount>(Arena*);
template<> ::container::MountPoint* Arena::CreateMaybeMessage<::container::MountPoint>(Arena*);
template<> ::container::NetworkAddress* Arena::CreateMaybeMessage<::container::NetworkAddress>(Arena*);
template<> ::container::NetworkSettingBase* Arena::CreateMaybeMessage<::container::NetworkSettingBase>(Arena*);
template<> ::container::NetworkStats* Arena::CreateMaybeMessage<::container::NetworkStats>(Arena*);
template<> ::container::NodeContainer* Arena::CreateMaybeMessage<::container::NodeContainer>(Arena*);
template<> ::container::Port* Arena::CreateMaybeMessage<::container::Port>(Arena*);
template<> ::container::ResourceConfig* Arena::CreateMaybeMessage<::container::ResourceConfig>(Arena*);
template<> ::container::ResourceStat* Arena::CreateMaybeMessage<::container::ResourceStat>(Arena*);
template<> ::container::RestartPolicy* Arena::CreateMaybeMessage<::container::RestartPolicy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace container {

// ===================================================================

class Port PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.Port) */ {
 public:
  inline Port() : Port(nullptr) {};
  virtual ~Port();

  Port(const Port& from);
  Port(Port&& from) noexcept
    : Port() {
    *this = ::std::move(from);
  }

  inline Port& operator=(const Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline Port& operator=(Port&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Port* internal_default_instance() {
    return reinterpret_cast<const Port*>(
               &_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Port& a, Port& b) {
    a.Swap(&b);
  }
  inline void Swap(Port* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Port* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Port* New() const final {
    return CreateMaybeMessage<Port>(nullptr);
  }

  Port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Port& from);
  void MergeFrom(const Port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.Port";
  }
  protected:
  explicit Port(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kTypeFieldNumber = 4,
    kPrivatePortFieldNumber = 2,
    kPublicPortFieldNumber = 3,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint32 private_port = 2;
  void clear_private_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 private_port() const;
  void set_private_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_private_port() const;
  void _internal_set_private_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 public_port = 3;
  void clear_public_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 public_port() const;
  void set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_port() const;
  void _internal_set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:container.Port)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 private_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 public_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class MountPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.MountPoint) */ {
 public:
  inline MountPoint() : MountPoint(nullptr) {};
  virtual ~MountPoint();

  MountPoint(const MountPoint& from);
  MountPoint(MountPoint&& from) noexcept
    : MountPoint() {
    *this = ::std::move(from);
  }

  inline MountPoint& operator=(const MountPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountPoint& operator=(MountPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MountPoint* internal_default_instance() {
    return reinterpret_cast<const MountPoint*>(
               &_MountPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MountPoint& a, MountPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MountPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountPoint* New() const final {
    return CreateMaybeMessage<MountPoint>(nullptr);
  }

  MountPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountPoint& from);
  void MergeFrom(const MountPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.MountPoint";
  }
  protected:
  explicit MountPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kSourceFieldNumber = 3,
    kDestinationFieldNumber = 4,
    kDriverFieldNumber = 5,
    kModeFieldNumber = 6,
    kPropagationFieldNumber = 8,
    kRwFieldNumber = 7,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string source = 3;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string destination = 4;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destination();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destination(
      std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // string driver = 5;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_driver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_driver(
      std::string* driver);
  private:
  const std::string& _internal_driver() const;
  void _internal_set_driver(const std::string& value);
  std::string* _internal_mutable_driver();
  public:

  // string mode = 6;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mode(
      std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string propagation = 8;
  void clear_propagation();
  const std::string& propagation() const;
  void set_propagation(const std::string& value);
  void set_propagation(std::string&& value);
  void set_propagation(const char* value);
  void set_propagation(const char* value, size_t size);
  std::string* mutable_propagation();
  std::string* release_propagation();
  void set_allocated_propagation(std::string* propagation);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_propagation();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_propagation(
      std::string* propagation);
  private:
  const std::string& _internal_propagation() const;
  void _internal_set_propagation(const std::string& value);
  std::string* _internal_mutable_propagation();
  public:

  // bool rw = 7;
  void clear_rw();
  bool rw() const;
  void set_rw(bool value);
  private:
  bool _internal_rw() const;
  void _internal_set_rw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.MountPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propagation_;
  bool rw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class IPAMConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.IPAMConfig) */ {
 public:
  inline IPAMConfig() : IPAMConfig(nullptr) {};
  virtual ~IPAMConfig();

  IPAMConfig(const IPAMConfig& from);
  IPAMConfig(IPAMConfig&& from) noexcept
    : IPAMConfig() {
    *this = ::std::move(from);
  }

  inline IPAMConfig& operator=(const IPAMConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPAMConfig& operator=(IPAMConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPAMConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPAMConfig* internal_default_instance() {
    return reinterpret_cast<const IPAMConfig*>(
               &_IPAMConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IPAMConfig& a, IPAMConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IPAMConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPAMConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPAMConfig* New() const final {
    return CreateMaybeMessage<IPAMConfig>(nullptr);
  }

  IPAMConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPAMConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPAMConfig& from);
  void MergeFrom(const IPAMConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPAMConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.IPAMConfig";
  }
  protected:
  explicit IPAMConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkLocalIpsFieldNumber = 3,
    kIpv4AddressFieldNumber = 1,
    kIpv6AddressFieldNumber = 2,
  };
  // repeated string link_local_ips = 3;
  int link_local_ips_size() const;
  private:
  int _internal_link_local_ips_size() const;
  public:
  void clear_link_local_ips();
  const std::string& link_local_ips(int index) const;
  std::string* mutable_link_local_ips(int index);
  void set_link_local_ips(int index, const std::string& value);
  void set_link_local_ips(int index, std::string&& value);
  void set_link_local_ips(int index, const char* value);
  void set_link_local_ips(int index, const char* value, size_t size);
  std::string* add_link_local_ips();
  void add_link_local_ips(const std::string& value);
  void add_link_local_ips(std::string&& value);
  void add_link_local_ips(const char* value);
  void add_link_local_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& link_local_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_link_local_ips();
  private:
  const std::string& _internal_link_local_ips(int index) const;
  std::string* _internal_add_link_local_ips();
  public:

  // string ipv4_address = 1;
  void clear_ipv4_address();
  const std::string& ipv4_address() const;
  void set_ipv4_address(const std::string& value);
  void set_ipv4_address(std::string&& value);
  void set_ipv4_address(const char* value);
  void set_ipv4_address(const char* value, size_t size);
  std::string* mutable_ipv4_address();
  std::string* release_ipv4_address();
  void set_allocated_ipv4_address(std::string* ipv4_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv4_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv4_address(
      std::string* ipv4_address);
  private:
  const std::string& _internal_ipv4_address() const;
  void _internal_set_ipv4_address(const std::string& value);
  std::string* _internal_mutable_ipv4_address();
  public:

  // string ipv6_address = 2;
  void clear_ipv6_address();
  const std::string& ipv6_address() const;
  void set_ipv6_address(const std::string& value);
  void set_ipv6_address(std::string&& value);
  void set_ipv6_address(const char* value);
  void set_ipv6_address(const char* value, size_t size);
  std::string* mutable_ipv6_address();
  std::string* release_ipv6_address();
  void set_allocated_ipv6_address(std::string* ipv6_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv6_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv6_address(
      std::string* ipv6_address);
  private:
  const std::string& _internal_ipv6_address() const;
  void _internal_set_ipv6_address(const std::string& value);
  std::string* _internal_mutable_ipv6_address();
  public:

  // @@protoc_insertion_point(class_scope:container.IPAMConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> link_local_ips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class EndpointSetting_DriverOptsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EndpointSetting_DriverOptsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EndpointSetting_DriverOptsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  EndpointSetting_DriverOptsEntry_DoNotUse();
  EndpointSetting_DriverOptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EndpointSetting_DriverOptsEntry_DoNotUse& other);
  static const EndpointSetting_DriverOptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EndpointSetting_DriverOptsEntry_DoNotUse*>(&_EndpointSetting_DriverOptsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.EndpointSetting.DriverOptsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.EndpointSetting.DriverOptsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class EndpointSetting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.EndpointSetting) */ {
 public:
  inline EndpointSetting() : EndpointSetting(nullptr) {};
  virtual ~EndpointSetting();

  EndpointSetting(const EndpointSetting& from);
  EndpointSetting(EndpointSetting&& from) noexcept
    : EndpointSetting() {
    *this = ::std::move(from);
  }

  inline EndpointSetting& operator=(const EndpointSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointSetting& operator=(EndpointSetting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndpointSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointSetting* internal_default_instance() {
    return reinterpret_cast<const EndpointSetting*>(
               &_EndpointSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EndpointSetting& a, EndpointSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointSetting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndpointSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndpointSetting* New() const final {
    return CreateMaybeMessage<EndpointSetting>(nullptr);
  }

  EndpointSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndpointSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndpointSetting& from);
  void MergeFrom(const EndpointSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.EndpointSetting";
  }
  protected:
  explicit EndpointSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 2,
    kAliasesFieldNumber = 3,
    kDriverOptsFieldNumber = 13,
    kNetworkIdFieldNumber = 4,
    kEndpointIdFieldNumber = 5,
    kGatewayFieldNumber = 6,
    kIpAddressFieldNumber = 7,
    kIpv6GatewayFieldNumber = 9,
    kGlobalIpv6AddressFieldNumber = 10,
    kMacAddressFieldNumber = 12,
    kIpamConfigFieldNumber = 1,
    kIpPrefixLenFieldNumber = 8,
    kGlobalIpv6PrefixLenFieldNumber = 11,
  };
  // repeated string links = 2;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  const std::string& links(int index) const;
  std::string* mutable_links(int index);
  void set_links(int index, const std::string& value);
  void set_links(int index, std::string&& value);
  void set_links(int index, const char* value);
  void set_links(int index, const char* value, size_t size);
  std::string* add_links();
  void add_links(const std::string& value);
  void add_links(std::string&& value);
  void add_links(const char* value);
  void add_links(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& links() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_links();
  private:
  const std::string& _internal_links(int index) const;
  std::string* _internal_add_links();
  public:

  // repeated string aliases = 3;
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;
  public:
  void clear_aliases();
  const std::string& aliases(int index) const;
  std::string* mutable_aliases(int index);
  void set_aliases(int index, const std::string& value);
  void set_aliases(int index, std::string&& value);
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, size_t size);
  std::string* add_aliases();
  void add_aliases(const std::string& value);
  void add_aliases(std::string&& value);
  void add_aliases(const char* value);
  void add_aliases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aliases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aliases();
  private:
  const std::string& _internal_aliases(int index) const;
  std::string* _internal_add_aliases();
  public:

  // map<string, string> driver_opts = 13;
  int driver_opts_size() const;
  private:
  int _internal_driver_opts_size() const;
  public:
  void clear_driver_opts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_driver_opts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_driver_opts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      driver_opts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_driver_opts();

  // string network_id = 4;
  void clear_network_id();
  const std::string& network_id() const;
  void set_network_id(const std::string& value);
  void set_network_id(std::string&& value);
  void set_network_id(const char* value);
  void set_network_id(const char* value, size_t size);
  std::string* mutable_network_id();
  std::string* release_network_id();
  void set_allocated_network_id(std::string* network_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_network_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_network_id(
      std::string* network_id);
  private:
  const std::string& _internal_network_id() const;
  void _internal_set_network_id(const std::string& value);
  std::string* _internal_mutable_network_id();
  public:

  // string endpoint_id = 5;
  void clear_endpoint_id();
  const std::string& endpoint_id() const;
  void set_endpoint_id(const std::string& value);
  void set_endpoint_id(std::string&& value);
  void set_endpoint_id(const char* value);
  void set_endpoint_id(const char* value, size_t size);
  std::string* mutable_endpoint_id();
  std::string* release_endpoint_id();
  void set_allocated_endpoint_id(std::string* endpoint_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endpoint_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endpoint_id(
      std::string* endpoint_id);
  private:
  const std::string& _internal_endpoint_id() const;
  void _internal_set_endpoint_id(const std::string& value);
  std::string* _internal_mutable_endpoint_id();
  public:

  // string gateway = 6;
  void clear_gateway();
  const std::string& gateway() const;
  void set_gateway(const std::string& value);
  void set_gateway(std::string&& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  std::string* mutable_gateway();
  std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gateway();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gateway(
      std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // string ip_address = 7;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string ipv6_gateway = 9;
  void clear_ipv6_gateway();
  const std::string& ipv6_gateway() const;
  void set_ipv6_gateway(const std::string& value);
  void set_ipv6_gateway(std::string&& value);
  void set_ipv6_gateway(const char* value);
  void set_ipv6_gateway(const char* value, size_t size);
  std::string* mutable_ipv6_gateway();
  std::string* release_ipv6_gateway();
  void set_allocated_ipv6_gateway(std::string* ipv6_gateway);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv6_gateway();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv6_gateway(
      std::string* ipv6_gateway);
  private:
  const std::string& _internal_ipv6_gateway() const;
  void _internal_set_ipv6_gateway(const std::string& value);
  std::string* _internal_mutable_ipv6_gateway();
  public:

  // string global_ipv6_address = 10;
  void clear_global_ipv6_address();
  const std::string& global_ipv6_address() const;
  void set_global_ipv6_address(const std::string& value);
  void set_global_ipv6_address(std::string&& value);
  void set_global_ipv6_address(const char* value);
  void set_global_ipv6_address(const char* value, size_t size);
  std::string* mutable_global_ipv6_address();
  std::string* release_global_ipv6_address();
  void set_allocated_global_ipv6_address(std::string* global_ipv6_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_ipv6_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_ipv6_address(
      std::string* global_ipv6_address);
  private:
  const std::string& _internal_global_ipv6_address() const;
  void _internal_set_global_ipv6_address(const std::string& value);
  std::string* _internal_mutable_global_ipv6_address();
  public:

  // string mac_address = 12;
  void clear_mac_address();
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mac_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mac_address(
      std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // .container.IPAMConfig ipam_config = 1;
  bool has_ipam_config() const;
  private:
  bool _internal_has_ipam_config() const;
  public:
  void clear_ipam_config();
  const ::container::IPAMConfig& ipam_config() const;
  ::container::IPAMConfig* release_ipam_config();
  ::container::IPAMConfig* mutable_ipam_config();
  void set_allocated_ipam_config(::container::IPAMConfig* ipam_config);
  private:
  const ::container::IPAMConfig& _internal_ipam_config() const;
  ::container::IPAMConfig* _internal_mutable_ipam_config();
  public:
  void unsafe_arena_set_allocated_ipam_config(
      ::container::IPAMConfig* ipam_config);
  ::container::IPAMConfig* unsafe_arena_release_ipam_config();

  // int32 ip_prefix_len = 8;
  void clear_ip_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_prefix_len() const;
  void set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_prefix_len() const;
  void _internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 global_ipv6_prefix_len = 11;
  void clear_global_ipv6_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 global_ipv6_prefix_len() const;
  void set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_global_ipv6_prefix_len() const;
  void _internal_set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:container.EndpointSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> links_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aliases_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EndpointSetting_DriverOptsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > driver_opts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_ipv6_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::container::IPAMConfig* ipam_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_ipv6_prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class NodeContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.NodeContainer) */ {
 public:
  inline NodeContainer() : NodeContainer(nullptr) {};
  virtual ~NodeContainer();

  NodeContainer(const NodeContainer& from);
  NodeContainer(NodeContainer&& from) noexcept
    : NodeContainer() {
    *this = ::std::move(from);
  }

  inline NodeContainer& operator=(const NodeContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeContainer& operator=(NodeContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeContainer* internal_default_instance() {
    return reinterpret_cast<const NodeContainer*>(
               &_NodeContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NodeContainer& a, NodeContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeContainer* New() const final {
    return CreateMaybeMessage<NodeContainer>(nullptr);
  }

  NodeContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeContainer& from);
  void MergeFrom(const NodeContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.NodeContainer";
  }
  protected:
  explicit NodeContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeAddressFieldNumber = 2,
    kInfoFieldNumber = 10,
    kNodeIdFieldNumber = 1,
  };
  // string node_address = 2;
  void clear_node_address();
  const std::string& node_address() const;
  void set_node_address(const std::string& value);
  void set_node_address(std::string&& value);
  void set_node_address(const char* value);
  void set_node_address(const char* value, size_t size);
  std::string* mutable_node_address();
  std::string* release_node_address();
  void set_allocated_node_address(std::string* node_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_node_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_node_address(
      std::string* node_address);
  private:
  const std::string& _internal_node_address() const;
  void _internal_set_node_address(const std::string& value);
  std::string* _internal_mutable_node_address();
  public:

  // .container.ContainerInfo info = 10;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::container::ContainerInfo& info() const;
  ::container::ContainerInfo* release_info();
  ::container::ContainerInfo* mutable_info();
  void set_allocated_info(::container::ContainerInfo* info);
  private:
  const ::container::ContainerInfo& _internal_info() const;
  ::container::ContainerInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::container::ContainerInfo* info);
  ::container::ContainerInfo* unsafe_arena_release_info();

  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.NodeContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_address_;
  ::container::ContainerInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ContainerInfo_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerInfo_LabelsEntry_DoNotUse();
  ContainerInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerInfo_LabelsEntry_DoNotUse& other);
  static const ContainerInfo_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerInfo_LabelsEntry_DoNotUse*>(&_ContainerInfo_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.ContainerInfo.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.ContainerInfo.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ContainerInfo) */ {
 public:
  inline ContainerInfo() : ContainerInfo(nullptr) {};
  virtual ~ContainerInfo();

  ContainerInfo(const ContainerInfo& from);
  ContainerInfo(ContainerInfo&& from) noexcept
    : ContainerInfo() {
    *this = ::std::move(from);
  }

  inline ContainerInfo& operator=(const ContainerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerInfo& operator=(ContainerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerInfo* internal_default_instance() {
    return reinterpret_cast<const ContainerInfo*>(
               &_ContainerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContainerInfo& a, ContainerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerInfo* New() const final {
    return CreateMaybeMessage<ContainerInfo>(nullptr);
  }

  ContainerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerInfo& from);
  void MergeFrom(const ContainerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ContainerInfo";
  }
  protected:
  explicit ContainerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 10,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kImageIdFieldNumber = 4,
    kCommandFieldNumber = 5,
    kStateFieldNumber = 6,
    kResourceStatFieldNumber = 101,
    kCreatedFieldNumber = 7,
    kSizeRwFieldNumber = 8,
    kSizeRootFsFieldNumber = 9,
  };
  // map<string, string> labels = 10;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string image_id = 4;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_id(
      std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // string command = 5;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string state = 6;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state(
      std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .container.ResourceStat resource_stat = 101;
  bool has_resource_stat() const;
  private:
  bool _internal_has_resource_stat() const;
  public:
  void clear_resource_stat();
  const ::container::ResourceStat& resource_stat() const;
  ::container::ResourceStat* release_resource_stat();
  ::container::ResourceStat* mutable_resource_stat();
  void set_allocated_resource_stat(::container::ResourceStat* resource_stat);
  private:
  const ::container::ResourceStat& _internal_resource_stat() const;
  ::container::ResourceStat* _internal_mutable_resource_stat();
  public:
  void unsafe_arena_set_allocated_resource_stat(
      ::container::ResourceStat* resource_stat);
  ::container::ResourceStat* unsafe_arena_release_resource_stat();

  // int64 created = 7;
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created() const;
  void _internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size_rw = 8;
  void clear_size_rw();
  ::PROTOBUF_NAMESPACE_ID::int64 size_rw() const;
  void set_size_rw(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size_rw() const;
  void _internal_set_size_rw(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size_root_fs = 9;
  void clear_size_root_fs();
  ::PROTOBUF_NAMESPACE_ID::int64 size_root_fs() const;
  void set_size_root_fs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size_root_fs() const;
  void _internal_set_size_root_fs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.ContainerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerInfo_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::container::ResourceStat* resource_stat_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_rw_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_root_fs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ContainerIdList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ContainerIdList) */ {
 public:
  inline ContainerIdList() : ContainerIdList(nullptr) {};
  virtual ~ContainerIdList();

  ContainerIdList(const ContainerIdList& from);
  ContainerIdList(ContainerIdList&& from) noexcept
    : ContainerIdList() {
    *this = ::std::move(from);
  }

  inline ContainerIdList& operator=(const ContainerIdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerIdList& operator=(ContainerIdList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerIdList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerIdList* internal_default_instance() {
    return reinterpret_cast<const ContainerIdList*>(
               &_ContainerIdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ContainerIdList& a, ContainerIdList& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerIdList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerIdList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerIdList* New() const final {
    return CreateMaybeMessage<ContainerIdList>(nullptr);
  }

  ContainerIdList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerIdList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerIdList& from);
  void MergeFrom(const ContainerIdList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerIdList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ContainerIdList";
  }
  protected:
  explicit ContainerIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdsFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated string container_ids = 2;
  int container_ids_size() const;
  private:
  int _internal_container_ids_size() const;
  public:
  void clear_container_ids();
  const std::string& container_ids(int index) const;
  std::string* mutable_container_ids(int index);
  void set_container_ids(int index, const std::string& value);
  void set_container_ids(int index, std::string&& value);
  void set_container_ids(int index, const char* value);
  void set_container_ids(int index, const char* value, size_t size);
  std::string* add_container_ids();
  void add_container_ids(const std::string& value);
  void add_container_ids(std::string&& value);
  void add_container_ids(const char* value);
  void add_container_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& container_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_container_ids();
  private:
  const std::string& _internal_container_ids(int index) const;
  std::string* _internal_add_container_ids();
  public:

  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.ContainerIdList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> container_ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Mount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.Mount) */ {
 public:
  inline Mount() : Mount(nullptr) {};
  virtual ~Mount();

  Mount(const Mount& from);
  Mount(Mount&& from) noexcept
    : Mount() {
    *this = ::std::move(from);
  }

  inline Mount& operator=(const Mount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mount& operator=(Mount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mount* internal_default_instance() {
    return reinterpret_cast<const Mount*>(
               &_Mount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Mount& a, Mount& b) {
    a.Swap(&b);
  }
  inline void Swap(Mount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mount* New() const final {
    return CreateMaybeMessage<Mount>(nullptr);
  }

  Mount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mount& from);
  void MergeFrom(const Mount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.Mount";
  }
  protected:
  explicit Mount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSourceFieldNumber = 2,
    kTargetFieldNumber = 3,
    kConsistencyFieldNumber = 5,
    kReadOnlyFieldNumber = 4,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string target = 3;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string consistency = 5;
  void clear_consistency();
  const std::string& consistency() const;
  void set_consistency(const std::string& value);
  void set_consistency(std::string&& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  std::string* mutable_consistency();
  std::string* release_consistency();
  void set_allocated_consistency(std::string* consistency);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_consistency();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_consistency(
      std::string* consistency);
  private:
  const std::string& _internal_consistency() const;
  void _internal_set_consistency(const std::string& value);
  std::string* _internal_mutable_consistency();
  public:

  // bool read_only = 4;
  void clear_read_only();
  bool read_only() const;
  void set_read_only(bool value);
  private:
  bool _internal_read_only() const;
  void _internal_set_read_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.Mount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consistency_;
  bool read_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RestartPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.RestartPolicy) */ {
 public:
  inline RestartPolicy() : RestartPolicy(nullptr) {};
  virtual ~RestartPolicy();

  RestartPolicy(const RestartPolicy& from);
  RestartPolicy(RestartPolicy&& from) noexcept
    : RestartPolicy() {
    *this = ::std::move(from);
  }

  inline RestartPolicy& operator=(const RestartPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartPolicy& operator=(RestartPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartPolicy* internal_default_instance() {
    return reinterpret_cast<const RestartPolicy*>(
               &_RestartPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RestartPolicy& a, RestartPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartPolicy* New() const final {
    return CreateMaybeMessage<RestartPolicy>(nullptr);
  }

  RestartPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartPolicy& from);
  void MergeFrom(const RestartPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.RestartPolicy";
  }
  protected:
  explicit RestartPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMaxRetryFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 max_retry = 2;
  void clear_max_retry();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry() const;
  void set_max_retry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_retry() const;
  void _internal_set_max_retry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:container.RestartPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class DeviceMapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.DeviceMapping) */ {
 public:
  inline DeviceMapping() : DeviceMapping(nullptr) {};
  virtual ~DeviceMapping();

  DeviceMapping(const DeviceMapping& from);
  DeviceMapping(DeviceMapping&& from) noexcept
    : DeviceMapping() {
    *this = ::std::move(from);
  }

  inline DeviceMapping& operator=(const DeviceMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMapping& operator=(DeviceMapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceMapping* internal_default_instance() {
    return reinterpret_cast<const DeviceMapping*>(
               &_DeviceMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeviceMapping& a, DeviceMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceMapping* New() const final {
    return CreateMaybeMessage<DeviceMapping>(nullptr);
  }

  DeviceMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceMapping& from);
  void MergeFrom(const DeviceMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.DeviceMapping";
  }
  protected:
  explicit DeviceMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathOnHostFieldNumber = 1,
    kPathInContainerFieldNumber = 2,
    kCgroupPermissionsFieldNumber = 3,
  };
  // string path_on_host = 1;
  void clear_path_on_host();
  const std::string& path_on_host() const;
  void set_path_on_host(const std::string& value);
  void set_path_on_host(std::string&& value);
  void set_path_on_host(const char* value);
  void set_path_on_host(const char* value, size_t size);
  std::string* mutable_path_on_host();
  std::string* release_path_on_host();
  void set_allocated_path_on_host(std::string* path_on_host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path_on_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path_on_host(
      std::string* path_on_host);
  private:
  const std::string& _internal_path_on_host() const;
  void _internal_set_path_on_host(const std::string& value);
  std::string* _internal_mutable_path_on_host();
  public:

  // string path_in_container = 2;
  void clear_path_in_container();
  const std::string& path_in_container() const;
  void set_path_in_container(const std::string& value);
  void set_path_in_container(std::string&& value);
  void set_path_in_container(const char* value);
  void set_path_in_container(const char* value, size_t size);
  std::string* mutable_path_in_container();
  std::string* release_path_in_container();
  void set_allocated_path_in_container(std::string* path_in_container);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path_in_container();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path_in_container(
      std::string* path_in_container);
  private:
  const std::string& _internal_path_in_container() const;
  void _internal_set_path_in_container(const std::string& value);
  std::string* _internal_mutable_path_in_container();
  public:

  // string cgroup_permissions = 3;
  void clear_cgroup_permissions();
  const std::string& cgroup_permissions() const;
  void set_cgroup_permissions(const std::string& value);
  void set_cgroup_permissions(std::string&& value);
  void set_cgroup_permissions(const char* value);
  void set_cgroup_permissions(const char* value, size_t size);
  std::string* mutable_cgroup_permissions();
  std::string* release_cgroup_permissions();
  void set_allocated_cgroup_permissions(std::string* cgroup_permissions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cgroup_permissions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cgroup_permissions(
      std::string* cgroup_permissions);
  private:
  const std::string& _internal_cgroup_permissions() const;
  void _internal_set_cgroup_permissions(const std::string& value);
  std::string* _internal_mutable_cgroup_permissions();
  public:

  // @@protoc_insertion_point(class_scope:container.DeviceMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_on_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_in_container_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgroup_permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResourceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ResourceConfig) */ {
 public:
  inline ResourceConfig() : ResourceConfig(nullptr) {};
  virtual ~ResourceConfig();

  ResourceConfig(const ResourceConfig& from);
  ResourceConfig(ResourceConfig&& from) noexcept
    : ResourceConfig() {
    *this = ::std::move(from);
  }

  inline ResourceConfig& operator=(const ResourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceConfig& operator=(ResourceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceConfig*>(
               &_ResourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ResourceConfig& a, ResourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceConfig* New() const final {
    return CreateMaybeMessage<ResourceConfig>(nullptr);
  }

  ResourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceConfig& from);
  void MergeFrom(const ResourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ResourceConfig";
  }
  protected:
  explicit ResourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 101,
    kNanoCpusFieldNumber = 1,
    kCpuSharesFieldNumber = 2,
    kMemLimitFieldNumber = 11,
    kMemSoftLimitFieldNumber = 12,
  };
  // repeated .container.DeviceMapping devices = 101;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::container::DeviceMapping* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::DeviceMapping >*
      mutable_devices();
  private:
  const ::container::DeviceMapping& _internal_devices(int index) const;
  ::container::DeviceMapping* _internal_add_devices();
  public:
  const ::container::DeviceMapping& devices(int index) const;
  ::container::DeviceMapping* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::DeviceMapping >&
      devices() const;

  // int64 nano_cpus = 1;
  void clear_nano_cpus();
  ::PROTOBUF_NAMESPACE_ID::int64 nano_cpus() const;
  void set_nano_cpus(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nano_cpus() const;
  void _internal_set_nano_cpus(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cpu_shares = 2;
  void clear_cpu_shares();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_shares() const;
  void set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_shares() const;
  void _internal_set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 mem_limit = 11;
  void clear_mem_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_limit() const;
  void set_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mem_limit() const;
  void _internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 mem_soft_limit = 12;
  void clear_mem_soft_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_soft_limit() const;
  void set_mem_soft_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mem_soft_limit() const;
  void _internal_set_mem_soft_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.ResourceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::DeviceMapping > devices_;
  ::PROTOBUF_NAMESPACE_ID::int64 nano_cpus_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_shares_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_soft_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class HostConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.HostConfig) */ {
 public:
  inline HostConfig() : HostConfig(nullptr) {};
  virtual ~HostConfig();

  HostConfig(const HostConfig& from);
  HostConfig(HostConfig&& from) noexcept
    : HostConfig() {
    *this = ::std::move(from);
  }

  inline HostConfig& operator=(const HostConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostConfig& operator=(HostConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostConfig* internal_default_instance() {
    return reinterpret_cast<const HostConfig*>(
               &_HostConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HostConfig& a, HostConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HostConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostConfig* New() const final {
    return CreateMaybeMessage<HostConfig>(nullptr);
  }

  HostConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostConfig& from);
  void MergeFrom(const HostConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.HostConfig";
  }
  protected:
  explicit HostConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountsFieldNumber = 5,
    kNetworkModeFieldNumber = 1,
    kIpcModeFieldNumber = 4,
    kRestartPolicyFieldNumber = 2,
    kResourceConfigFieldNumber = 7,
    kAutoRemoveFieldNumber = 3,
    kPrivilegedFieldNumber = 6,
  };
  // repeated .container.Mount mounts = 5;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::container::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >*
      mutable_mounts();
  private:
  const ::container::Mount& _internal_mounts(int index) const;
  ::container::Mount* _internal_add_mounts();
  public:
  const ::container::Mount& mounts(int index) const;
  ::container::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >&
      mounts() const;

  // string network_mode = 1;
  void clear_network_mode();
  const std::string& network_mode() const;
  void set_network_mode(const std::string& value);
  void set_network_mode(std::string&& value);
  void set_network_mode(const char* value);
  void set_network_mode(const char* value, size_t size);
  std::string* mutable_network_mode();
  std::string* release_network_mode();
  void set_allocated_network_mode(std::string* network_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_network_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_network_mode(
      std::string* network_mode);
  private:
  const std::string& _internal_network_mode() const;
  void _internal_set_network_mode(const std::string& value);
  std::string* _internal_mutable_network_mode();
  public:

  // string ipc_mode = 4;
  void clear_ipc_mode();
  const std::string& ipc_mode() const;
  void set_ipc_mode(const std::string& value);
  void set_ipc_mode(std::string&& value);
  void set_ipc_mode(const char* value);
  void set_ipc_mode(const char* value, size_t size);
  std::string* mutable_ipc_mode();
  std::string* release_ipc_mode();
  void set_allocated_ipc_mode(std::string* ipc_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipc_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipc_mode(
      std::string* ipc_mode);
  private:
  const std::string& _internal_ipc_mode() const;
  void _internal_set_ipc_mode(const std::string& value);
  std::string* _internal_mutable_ipc_mode();
  public:

  // .container.RestartPolicy restart_policy = 2;
  bool has_restart_policy() const;
  private:
  bool _internal_has_restart_policy() const;
  public:
  void clear_restart_policy();
  const ::container::RestartPolicy& restart_policy() const;
  ::container::RestartPolicy* release_restart_policy();
  ::container::RestartPolicy* mutable_restart_policy();
  void set_allocated_restart_policy(::container::RestartPolicy* restart_policy);
  private:
  const ::container::RestartPolicy& _internal_restart_policy() const;
  ::container::RestartPolicy* _internal_mutable_restart_policy();
  public:
  void unsafe_arena_set_allocated_restart_policy(
      ::container::RestartPolicy* restart_policy);
  ::container::RestartPolicy* unsafe_arena_release_restart_policy();

  // .container.ResourceConfig resource_config = 7;
  bool has_resource_config() const;
  private:
  bool _internal_has_resource_config() const;
  public:
  void clear_resource_config();
  const ::container::ResourceConfig& resource_config() const;
  ::container::ResourceConfig* release_resource_config();
  ::container::ResourceConfig* mutable_resource_config();
  void set_allocated_resource_config(::container::ResourceConfig* resource_config);
  private:
  const ::container::ResourceConfig& _internal_resource_config() const;
  ::container::ResourceConfig* _internal_mutable_resource_config();
  public:
  void unsafe_arena_set_allocated_resource_config(
      ::container::ResourceConfig* resource_config);
  ::container::ResourceConfig* unsafe_arena_release_resource_config();

  // bool auto_remove = 3;
  void clear_auto_remove();
  bool auto_remove() const;
  void set_auto_remove(bool value);
  private:
  bool _internal_auto_remove() const;
  void _internal_set_auto_remove(bool value);
  public:

  // bool privileged = 6;
  void clear_privileged();
  bool privileged() const;
  void set_privileged(bool value);
  private:
  bool _internal_privileged() const;
  void _internal_set_privileged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.HostConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount > mounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipc_mode_;
  ::container::RestartPolicy* restart_policy_;
  ::container::ResourceConfig* resource_config_;
  bool auto_remove_;
  bool privileged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ContainerConfig_EnvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_EnvEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_EnvEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerConfig_EnvEntry_DoNotUse();
  ContainerConfig_EnvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerConfig_EnvEntry_DoNotUse& other);
  static const ContainerConfig_EnvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerConfig_EnvEntry_DoNotUse*>(&_ContainerConfig_EnvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.ContainerConfig.EnvEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.ContainerConfig.EnvEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerConfig_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerConfig_LabelsEntry_DoNotUse();
  ContainerConfig_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerConfig_LabelsEntry_DoNotUse& other);
  static const ContainerConfig_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerConfig_LabelsEntry_DoNotUse*>(&_ContainerConfig_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.ContainerConfig.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.ContainerConfig.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ContainerConfig) */ {
 public:
  inline ContainerConfig() : ContainerConfig(nullptr) {};
  virtual ~ContainerConfig();

  ContainerConfig(const ContainerConfig& from);
  ContainerConfig(ContainerConfig&& from) noexcept
    : ContainerConfig() {
    *this = ::std::move(from);
  }

  inline ContainerConfig& operator=(const ContainerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerConfig& operator=(ContainerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerConfig* internal_default_instance() {
    return reinterpret_cast<const ContainerConfig*>(
               &_ContainerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ContainerConfig& a, ContainerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerConfig* New() const final {
    return CreateMaybeMessage<ContainerConfig>(nullptr);
  }

  ContainerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerConfig& from);
  void MergeFrom(const ContainerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ContainerConfig";
  }
  protected:
  explicit ContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnvFieldNumber = 4,
    kEntrypointFieldNumber = 7,
    kCmdFieldNumber = 8,
    kLabelsFieldNumber = 10,
    kHostnameFieldNumber = 1,
    kDomainNameFieldNumber = 2,
    kUserFieldNumber = 3,
    kImageFieldNumber = 5,
    kWorkingDirFieldNumber = 6,
    kNetworkDisabledFieldNumber = 9,
  };
  // map<string, string> env = 4;
  int env_size() const;
  private:
  int _internal_env_size() const;
  public:
  void clear_env();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_env() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_env();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      env() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_env();

  // repeated string entrypoint = 7;
  int entrypoint_size() const;
  private:
  int _internal_entrypoint_size() const;
  public:
  void clear_entrypoint();
  const std::string& entrypoint(int index) const;
  std::string* mutable_entrypoint(int index);
  void set_entrypoint(int index, const std::string& value);
  void set_entrypoint(int index, std::string&& value);
  void set_entrypoint(int index, const char* value);
  void set_entrypoint(int index, const char* value, size_t size);
  std::string* add_entrypoint();
  void add_entrypoint(const std::string& value);
  void add_entrypoint(std::string&& value);
  void add_entrypoint(const char* value);
  void add_entrypoint(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entrypoint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entrypoint();
  private:
  const std::string& _internal_entrypoint(int index) const;
  std::string* _internal_add_entrypoint();
  public:

  // repeated string cmd = 8;
  int cmd_size() const;
  private:
  int _internal_cmd_size() const;
  public:
  void clear_cmd();
  const std::string& cmd(int index) const;
  std::string* mutable_cmd(int index);
  void set_cmd(int index, const std::string& value);
  void set_cmd(int index, std::string&& value);
  void set_cmd(int index, const char* value);
  void set_cmd(int index, const char* value, size_t size);
  std::string* add_cmd();
  void add_cmd(const std::string& value);
  void add_cmd(std::string&& value);
  void add_cmd(const char* value);
  void add_cmd(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cmd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cmd();
  private:
  const std::string& _internal_cmd(int index) const;
  std::string* _internal_add_cmd();
  public:

  // map<string, string> labels = 10;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string domain_name = 2;
  void clear_domain_name();
  const std::string& domain_name() const;
  void set_domain_name(const std::string& value);
  void set_domain_name(std::string&& value);
  void set_domain_name(const char* value);
  void set_domain_name(const char* value, size_t size);
  std::string* mutable_domain_name();
  std::string* release_domain_name();
  void set_allocated_domain_name(std::string* domain_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domain_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domain_name(
      std::string* domain_name);
  private:
  const std::string& _internal_domain_name() const;
  void _internal_set_domain_name(const std::string& value);
  std::string* _internal_mutable_domain_name();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string image = 5;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string working_dir = 6;
  void clear_working_dir();
  const std::string& working_dir() const;
  void set_working_dir(const std::string& value);
  void set_working_dir(std::string&& value);
  void set_working_dir(const char* value);
  void set_working_dir(const char* value, size_t size);
  std::string* mutable_working_dir();
  std::string* release_working_dir();
  void set_allocated_working_dir(std::string* working_dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_working_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_working_dir(
      std::string* working_dir);
  private:
  const std::string& _internal_working_dir() const;
  void _internal_set_working_dir(const std::string& value);
  std::string* _internal_mutable_working_dir();
  public:

  // bool network_disabled = 9;
  void clear_network_disabled();
  bool network_disabled() const;
  void set_network_disabled(bool value);
  private:
  bool _internal_network_disabled() const;
  void _internal_set_network_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.ContainerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerConfig_EnvEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > env_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entrypoint_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerConfig_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_dir_;
  bool network_disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class CpuStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.CpuStat) */ {
 public:
  inline CpuStat() : CpuStat(nullptr) {};
  virtual ~CpuStat();

  CpuStat(const CpuStat& from);
  CpuStat(CpuStat&& from) noexcept
    : CpuStat() {
    *this = ::std::move(from);
  }

  inline CpuStat& operator=(const CpuStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuStat& operator=(CpuStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuStat* internal_default_instance() {
    return reinterpret_cast<const CpuStat*>(
               &_CpuStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CpuStat& a, CpuStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuStat* New() const final {
    return CreateMaybeMessage<CpuStat>(nullptr);
  }

  CpuStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuStat& from);
  void MergeFrom(const CpuStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.CpuStat";
  }
  protected:
  explicit CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreUsedFieldNumber = 1,
  };
  // double core_used = 1;
  void clear_core_used();
  double core_used() const;
  void set_core_used(double value);
  private:
  double _internal_core_used() const;
  void _internal_set_core_used(double value);
  public:

  // @@protoc_insertion_point(class_scope:container.CpuStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double core_used_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class MemoryStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.MemoryStat) */ {
 public:
  inline MemoryStat() : MemoryStat(nullptr) {};
  virtual ~MemoryStat();

  MemoryStat(const MemoryStat& from);
  MemoryStat(MemoryStat&& from) noexcept
    : MemoryStat() {
    *this = ::std::move(from);
  }

  inline MemoryStat& operator=(const MemoryStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryStat& operator=(MemoryStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryStat* internal_default_instance() {
    return reinterpret_cast<const MemoryStat*>(
               &_MemoryStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MemoryStat& a, MemoryStat& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryStat* New() const final {
    return CreateMaybeMessage<MemoryStat>(nullptr);
  }

  MemoryStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryStat& from);
  void MergeFrom(const MemoryStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.MemoryStat";
  }
  protected:
  explicit MemoryStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsedFieldNumber = 1,
    kLimitFieldNumber = 2,
    kPercentageFieldNumber = 3,
  };
  // uint64 used = 1;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double percentage = 3;
  void clear_percentage();
  double percentage() const;
  void set_percentage(double value);
  private:
  double _internal_percentage() const;
  void _internal_set_percentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:container.MemoryStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  double percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BlockStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.BlockStat) */ {
 public:
  inline BlockStat() : BlockStat(nullptr) {};
  virtual ~BlockStat();

  BlockStat(const BlockStat& from);
  BlockStat(BlockStat&& from) noexcept
    : BlockStat() {
    *this = ::std::move(from);
  }

  inline BlockStat& operator=(const BlockStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockStat& operator=(BlockStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockStat* internal_default_instance() {
    return reinterpret_cast<const BlockStat*>(
               &_BlockStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BlockStat& a, BlockStat& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockStat* New() const final {
    return CreateMaybeMessage<BlockStat>(nullptr);
  }

  BlockStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockStat& from);
  void MergeFrom(const BlockStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.BlockStat";
  }
  protected:
  explicit BlockStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
    kWriteFieldNumber = 2,
  };
  // uint64 read = 1;
  void clear_read();
  ::PROTOBUF_NAMESPACE_ID::uint64 read() const;
  void set_read(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_read() const;
  void _internal_set_read(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 write = 2;
  void clear_write();
  ::PROTOBUF_NAMESPACE_ID::uint64 write() const;
  void set_write(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_write() const;
  void _internal_set_write(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.BlockStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 read_;
  ::PROTOBUF_NAMESPACE_ID::uint64 write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class NetworkStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.NetworkStats) */ {
 public:
  inline NetworkStats() : NetworkStats(nullptr) {};
  virtual ~NetworkStats();

  NetworkStats(const NetworkStats& from);
  NetworkStats(NetworkStats&& from) noexcept
    : NetworkStats() {
    *this = ::std::move(from);
  }

  inline NetworkStats& operator=(const NetworkStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStats& operator=(NetworkStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkStats* internal_default_instance() {
    return reinterpret_cast<const NetworkStats*>(
               &_NetworkStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(NetworkStats& a, NetworkStats& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkStats* New() const final {
    return CreateMaybeMessage<NetworkStats>(nullptr);
  }

  NetworkStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkStats& from);
  void MergeFrom(const NetworkStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.NetworkStats";
  }
  protected:
  explicit NetworkStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRxFieldNumber = 1,
    kTxFieldNumber = 2,
  };
  // uint64 rx = 1;
  void clear_rx();
  ::PROTOBUF_NAMESPACE_ID::uint64 rx() const;
  void set_rx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rx() const;
  void _internal_set_rx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx = 2;
  void clear_tx();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx() const;
  void set_tx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx() const;
  void _internal_set_tx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.NetworkStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rx_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResourceStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ResourceStat) */ {
 public:
  inline ResourceStat() : ResourceStat(nullptr) {};
  virtual ~ResourceStat();

  ResourceStat(const ResourceStat& from);
  ResourceStat(ResourceStat&& from) noexcept
    : ResourceStat() {
    *this = ::std::move(from);
  }

  inline ResourceStat& operator=(const ResourceStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceStat& operator=(ResourceStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceStat* internal_default_instance() {
    return reinterpret_cast<const ResourceStat*>(
               &_ResourceStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResourceStat& a, ResourceStat& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceStat* New() const final {
    return CreateMaybeMessage<ResourceStat>(nullptr);
  }

  ResourceStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceStat& from);
  void MergeFrom(const ResourceStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ResourceStat";
  }
  protected:
  explicit ResourceStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuStatFieldNumber = 3,
    kMemStatFieldNumber = 4,
    kBlockStatFieldNumber = 5,
    kNetStatFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state(
      std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .container.CpuStat cpu_stat = 3;
  bool has_cpu_stat() const;
  private:
  bool _internal_has_cpu_stat() const;
  public:
  void clear_cpu_stat();
  const ::container::CpuStat& cpu_stat() const;
  ::container::CpuStat* release_cpu_stat();
  ::container::CpuStat* mutable_cpu_stat();
  void set_allocated_cpu_stat(::container::CpuStat* cpu_stat);
  private:
  const ::container::CpuStat& _internal_cpu_stat() const;
  ::container::CpuStat* _internal_mutable_cpu_stat();
  public:
  void unsafe_arena_set_allocated_cpu_stat(
      ::container::CpuStat* cpu_stat);
  ::container::CpuStat* unsafe_arena_release_cpu_stat();

  // .container.MemoryStat mem_stat = 4;
  bool has_mem_stat() const;
  private:
  bool _internal_has_mem_stat() const;
  public:
  void clear_mem_stat();
  const ::container::MemoryStat& mem_stat() const;
  ::container::MemoryStat* release_mem_stat();
  ::container::MemoryStat* mutable_mem_stat();
  void set_allocated_mem_stat(::container::MemoryStat* mem_stat);
  private:
  const ::container::MemoryStat& _internal_mem_stat() const;
  ::container::MemoryStat* _internal_mutable_mem_stat();
  public:
  void unsafe_arena_set_allocated_mem_stat(
      ::container::MemoryStat* mem_stat);
  ::container::MemoryStat* unsafe_arena_release_mem_stat();

  // .container.BlockStat block_stat = 5;
  bool has_block_stat() const;
  private:
  bool _internal_has_block_stat() const;
  public:
  void clear_block_stat();
  const ::container::BlockStat& block_stat() const;
  ::container::BlockStat* release_block_stat();
  ::container::BlockStat* mutable_block_stat();
  void set_allocated_block_stat(::container::BlockStat* block_stat);
  private:
  const ::container::BlockStat& _internal_block_stat() const;
  ::container::BlockStat* _internal_mutable_block_stat();
  public:
  void unsafe_arena_set_allocated_block_stat(
      ::container::BlockStat* block_stat);
  ::container::BlockStat* unsafe_arena_release_block_stat();

  // .container.NetworkStats net_stat = 6;
  bool has_net_stat() const;
  private:
  bool _internal_has_net_stat() const;
  public:
  void clear_net_stat();
  const ::container::NetworkStats& net_stat() const;
  ::container::NetworkStats* release_net_stat();
  ::container::NetworkStats* mutable_net_stat();
  void set_allocated_net_stat(::container::NetworkStats* net_stat);
  private:
  const ::container::NetworkStats& _internal_net_stat() const;
  ::container::NetworkStats* _internal_mutable_net_stat();
  public:
  void unsafe_arena_set_allocated_net_stat(
      ::container::NetworkStats* net_stat);
  ::container::NetworkStats* unsafe_arena_release_net_stat();

  // @@protoc_insertion_point(class_scope:container.ResourceStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::container::CpuStat* cpu_stat_;
  ::container::MemoryStat* mem_stat_;
  ::container::BlockStat* block_stat_;
  ::container::NetworkStats* net_stat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class NetworkAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.NetworkAddress) */ {
 public:
  inline NetworkAddress() : NetworkAddress(nullptr) {};
  virtual ~NetworkAddress();

  NetworkAddress(const NetworkAddress& from);
  NetworkAddress(NetworkAddress&& from) noexcept
    : NetworkAddress() {
    *this = ::std::move(from);
  }

  inline NetworkAddress& operator=(const NetworkAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkAddress& operator=(NetworkAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkAddress* internal_default_instance() {
    return reinterpret_cast<const NetworkAddress*>(
               &_NetworkAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(NetworkAddress& a, NetworkAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkAddress* New() const final {
    return CreateMaybeMessage<NetworkAddress>(nullptr);
  }

  NetworkAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkAddress& from);
  void MergeFrom(const NetworkAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.NetworkAddress";
  }
  protected:
  explicit NetworkAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kPrefixLenFieldNumber = 2,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_addr(
      std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // int32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:container.NetworkAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class NetworkSettingBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.NetworkSettingBase) */ {
 public:
  inline NetworkSettingBase() : NetworkSettingBase(nullptr) {};
  virtual ~NetworkSettingBase();

  NetworkSettingBase(const NetworkSettingBase& from);
  NetworkSettingBase(NetworkSettingBase&& from) noexcept
    : NetworkSettingBase() {
    *this = ::std::move(from);
  }

  inline NetworkSettingBase& operator=(const NetworkSettingBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkSettingBase& operator=(NetworkSettingBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkSettingBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkSettingBase* internal_default_instance() {
    return reinterpret_cast<const NetworkSettingBase*>(
               &_NetworkSettingBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(NetworkSettingBase& a, NetworkSettingBase& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkSettingBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkSettingBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkSettingBase* New() const final {
    return CreateMaybeMessage<NetworkSettingBase>(nullptr);
  }

  NetworkSettingBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkSettingBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkSettingBase& from);
  void MergeFrom(const NetworkSettingBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkSettingBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.NetworkSettingBase";
  }
  protected:
  explicit NetworkSettingBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5ftypes_2eproto);
    return ::descriptor_table_container_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgeFieldNumber = 1,
    kSandboxIdFieldNumber = 2,
    kLinkLocalIpv6AddressFieldNumber = 4,
    kSandboxKeyFieldNumber = 6,
    kEndpointIdFieldNumber = 9,
    kGatewayFieldNumber = 10,
    kGlobalIpv6AddressFieldNumber = 11,
    kIpAddressFieldNumber = 13,
    kIpv6GatewayFieldNumber = 15,
    kMacAddressFieldNumber = 16,
    kSecondaryIpAddressesFieldNumber = 7,
    kSecondaryIpv6AddressesFieldNumber = 8,
    kHairpinModeFieldNumber = 3,
    kLinkLocalIpv6PrefixLenFieldNumber = 5,
    kGlobalIpv6PrefixLenFieldNumber = 12,
    kIpPrefixLenFieldNumber = 14,
  };
  // string bridge = 1;
  void clear_bridge();
  const std::string& bridge() const;
  void set_bridge(const std::string& value);
  void set_bridge(std::string&& value);
  void set_bridge(const char* value);
  void set_bridge(const char* value, size_t size);
  std::string* mutable_bridge();
  std::string* release_bridge();
  void set_allocated_bridge(std::string* bridge);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bridge();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bridge(
      std::string* bridge);
  private:
  const std::string& _internal_bridge() const;
  void _internal_set_bridge(const std::string& value);
  std::string* _internal_mutable_bridge();
  public:

  // string sandbox_id = 2;
  void clear_sandbox_id();
  const std::string& sandbox_id() const;
  void set_sandbox_id(const std::string& value);
  void set_sandbox_id(std::string&& value);
  void set_sandbox_id(const char* value);
  void set_sandbox_id(const char* value, size_t size);
  std::string* mutable_sandbox_id();
  std::string* release_sandbox_id();
  void set_allocated_sandbox_id(std::string* sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandbox_id(
      std::string* sandbox_id);
  private:
  const std::string& _internal_sandbox_id() const;
  void _internal_set_sandbox_id(const std::string& value);
  std::string* _internal_mutable_sandbox_id();
  public:

  // string link_local_ipv6_address = 4;
  void clear_link_local_ipv6_address();
  const std::string& link_local_ipv6_address() const;
  void set_link_local_ipv6_address(const std::string& value);
  void set_link_local_ipv6_address(std::string&& value);
  void set_link_local_ipv6_address(const char* value);
  void set_link_local_ipv6_address(const char* value, size_t size);
  std::string* mutable_link_local_ipv6_address();
  std::string* release_link_local_ipv6_address();
  void set_allocated_link_local_ipv6_address(std::string* link_local_ipv6_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_link_local_ipv6_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_link_local_ipv6_address(
      std::string* link_local_ipv6_address);
  private:
  const std::string& _internal_link_local_ipv6_address() const;
  void _internal_set_link_local_ipv6_address(const std::string& value);
  std::string* _internal_mutable_link_local_ipv6_address();
  public:

  // string sandbox_key = 6;
  void clear_sandbox_key();
  const std::string& sandbox_key() const;
  void set_sandbox_key(const std::string& value);
  void set_sandbox_key(std::string&& value);
  void set_sandbox_key(const char* value);
  void set_sandbox_key(const char* value, size_t size);
  std::string* mutable_sandbox_key();
  std::string* release_sandbox_key();
  void set_allocated_sandbox_key(std::string* sandbox_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandbox_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandbox_key(
      std::string* sandbox_key);
  private:
  const std::string& _internal_sandbox_key() const;
  void _internal_set_sandbox_key(const std::string& value);
  std::string* _internal_mutable_sandbox_key();
  public:

  // string endpoint_id = 9;
  void clear_endpoint_id();
  const std::string& endpoint_id() const;
  void set_endpoint_id(const std::string& value);
  void set_endpoint_id(std::string&& value);
  void set_endpoint_id(const char* value);
  void set_endpoint_id(const char* value, size_t size);
  std::string* mutable_endpoint_id();
  std::string* release_endpoint_id();
  void set_allocated_endpoint_id(std::string* endpoint_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endpoint_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endpoint_id(
      std::string* endpoint_id);
  private:
  const std::string& _internal_endpoint_id() const;
  void _internal_set_endpoint_id(const std::string& value);
  std::string* _internal_mutable_endpoint_id();
  public:

  // string gateway = 10;
  void clear_gateway();
  const std::string& gateway() const;
  void set_gateway(const std::string& value);
  void set_gateway(std::string&& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  std::string* mutable_gateway();
  std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gateway();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gateway(
      std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // string global_ipv6_address = 11;
  void clear_global_ipv6_address();
  const std::string& global_ipv6_address() const;
  void set_global_ipv6_address(const std::string& value);
  void set_global_ipv6_address(std::string&& value);
  void set_global_ipv6_address(const char* value);
  void set_global_ipv6_address(const char* value, size_t size);
  std::string* mutable_global_ipv6_address();
  std::string* release_global_ipv6_address();
  void set_allocated_global_ipv6_address(std::string* global_ipv6_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_ipv6_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_ipv6_address(
      std::string* global_ipv6_address);
  private:
  const std::string& _internal_global_ipv6_address() const;
  void _internal_set_global_ipv6_address(const std::string& value);
  std::string* _internal_mutable_global_ipv6_address();
  public:

  // string ip_address = 13;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string ipv6_gateway = 15;
  void clear_ipv6_gateway();
  const std::string& ipv6_gateway() const;
  void set_ipv6_gateway(const std::string& value);
  void set_ipv6_gateway(std::string&& value);
  void set_ipv6_gateway(const char* value);
  void set_ipv6_gateway(const char* value, size_t size);
  std::string* mutable_ipv6_gateway();
  std::string* release_ipv6_gateway();
  void set_allocated_ipv6_gateway(std::string* ipv6_gateway);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv6_gateway();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv6_gateway(
      std::string* ipv6_gateway);
  private:
  const std::string& _internal_ipv6_gateway() const;
  void _internal_set_ipv6_gateway(const std::string& value);
  std::string* _internal_mutable_ipv6_gateway();
  public:

  // string mac_address = 16;
  void clear_mac_address();
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mac_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mac_address(
      std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // .container.NetworkAddress secondary_ip_addresses = 7;
  bool has_secondary_ip_addresses() const;
  private:
  bool _internal_has_secondary_ip_addresses() const;
  public:
  void clear_secondary_ip_addresses();
  const ::container::NetworkAddress& secondary_ip_addresses() const;
  ::container::NetworkAddress* release_secondary_ip_addresses();
  ::container::NetworkAddress* mutable_secondary_ip_addresses();
  void set_allocated_secondary_ip_addresses(::container::NetworkAddress* secondary_ip_addresses);
  private:
  const ::container::NetworkAddress& _internal_secondary_ip_addresses() const;
  ::container::NetworkAddress* _internal_mutable_secondary_ip_addresses();
  public:
  void unsafe_arena_set_allocated_secondary_ip_addresses(
      ::container::NetworkAddress* secondary_ip_addresses);
  ::container::NetworkAddress* unsafe_arena_release_secondary_ip_addresses();

  // .container.NetworkAddress secondary_ipv6_addresses = 8;
  bool has_secondary_ipv6_addresses() const;
  private:
  bool _internal_has_secondary_ipv6_addresses() const;
  public:
  void clear_secondary_ipv6_addresses();
  const ::container::NetworkAddress& secondary_ipv6_addresses() const;
  ::container::NetworkAddress* release_secondary_ipv6_addresses();
  ::container::NetworkAddress* mutable_secondary_ipv6_addresses();
  void set_allocated_secondary_ipv6_addresses(::container::NetworkAddress* secondary_ipv6_addresses);
  private:
  const ::container::NetworkAddress& _internal_secondary_ipv6_addresses() const;
  ::container::NetworkAddress* _internal_mutable_secondary_ipv6_addresses();
  public:
  void unsafe_arena_set_allocated_secondary_ipv6_addresses(
      ::container::NetworkAddress* secondary_ipv6_addresses);
  ::container::NetworkAddress* unsafe_arena_release_secondary_ipv6_addresses();

  // bool hairpin_mode = 3;
  void clear_hairpin_mode();
  bool hairpin_mode() const;
  void set_hairpin_mode(bool value);
  private:
  bool _internal_hairpin_mode() const;
  void _internal_set_hairpin_mode(bool value);
  public:

  // int32 link_local_ipv6_prefix_len = 5;
  void clear_link_local_ipv6_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 link_local_ipv6_prefix_len() const;
  void set_link_local_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_local_ipv6_prefix_len() const;
  void _internal_set_link_local_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 global_ipv6_prefix_len = 12;
  void clear_global_ipv6_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 global_ipv6_prefix_len() const;
  void set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_global_ipv6_prefix_len() const;
  void _internal_set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ip_prefix_len = 14;
  void clear_ip_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_prefix_len() const;
  void set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_prefix_len() const;
  void _internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:container.NetworkSettingBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridge_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandbox_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_local_ipv6_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandbox_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_ipv6_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::container::NetworkAddress* secondary_ip_addresses_;
  ::container::NetworkAddress* secondary_ipv6_addresses_;
  bool hairpin_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_local_ipv6_prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_ipv6_prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Port

// string ip = 1;
inline void Port::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Port::ip() const {
  // @@protoc_insertion_point(field_get:container.Port.ip)
  return _internal_ip();
}
inline void Port::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:container.Port.ip)
}
inline std::string* Port::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:container.Port.ip)
  return _internal_mutable_ip();
}
inline const std::string& Port::_internal_ip() const {
  return ip_.Get();
}
inline void Port::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Port::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.Port.ip)
}
inline void Port::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.Port.ip)
}
inline void Port::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.Port.ip)
}
inline std::string* Port::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Port::release_ip() {
  // @@protoc_insertion_point(field_release:container.Port.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Port::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.Port.ip)
}
inline std::string* Port::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.Port.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Port::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.Port.ip)
}

// uint32 private_port = 2;
inline void Port::clear_private_port() {
  private_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Port::_internal_private_port() const {
  return private_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Port::private_port() const {
  // @@protoc_insertion_point(field_get:container.Port.private_port)
  return _internal_private_port();
}
inline void Port::_internal_set_private_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  private_port_ = value;
}
inline void Port::set_private_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_private_port(value);
  // @@protoc_insertion_point(field_set:container.Port.private_port)
}

// uint32 public_port = 3;
inline void Port::clear_public_port() {
  public_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Port::_internal_public_port() const {
  return public_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Port::public_port() const {
  // @@protoc_insertion_point(field_get:container.Port.public_port)
  return _internal_public_port();
}
inline void Port::_internal_set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  public_port_ = value;
}
inline void Port::set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:container.Port.public_port)
}

// string type = 4;
inline void Port::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Port::type() const {
  // @@protoc_insertion_point(field_get:container.Port.type)
  return _internal_type();
}
inline void Port::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:container.Port.type)
}
inline std::string* Port::mutable_type() {
  // @@protoc_insertion_point(field_mutable:container.Port.type)
  return _internal_mutable_type();
}
inline const std::string& Port::_internal_type() const {
  return type_.Get();
}
inline void Port::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Port::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.Port.type)
}
inline void Port::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.Port.type)
}
inline void Port::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.Port.type)
}
inline std::string* Port::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Port::release_type() {
  // @@protoc_insertion_point(field_release:container.Port.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Port::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.Port.type)
}
inline std::string* Port::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.Port.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Port::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.Port.type)
}

// -------------------------------------------------------------------

// MountPoint

// string type = 1;
inline void MountPoint::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::type() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.type)
  return _internal_type();
}
inline void MountPoint::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.type)
}
inline std::string* MountPoint::mutable_type() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.type)
  return _internal_mutable_type();
}
inline const std::string& MountPoint::_internal_type() const {
  return type_.Get();
}
inline void MountPoint::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.type)
}
inline void MountPoint::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.type)
}
inline void MountPoint::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.type)
}
inline std::string* MountPoint::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_type() {
  // @@protoc_insertion_point(field_release:container.MountPoint.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.type)
}
inline std::string* MountPoint::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.type)
}

// string name = 2;
inline void MountPoint::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::name() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.name)
  return _internal_name();
}
inline void MountPoint::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.name)
}
inline std::string* MountPoint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.name)
  return _internal_mutable_name();
}
inline const std::string& MountPoint::_internal_name() const {
  return name_.Get();
}
inline void MountPoint::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.name)
}
inline void MountPoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.name)
}
inline void MountPoint::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.name)
}
inline std::string* MountPoint::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_name() {
  // @@protoc_insertion_point(field_release:container.MountPoint.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.name)
}
inline std::string* MountPoint::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.name)
}

// string source = 3;
inline void MountPoint::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::source() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.source)
  return _internal_source();
}
inline void MountPoint::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.source)
}
inline std::string* MountPoint::mutable_source() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.source)
  return _internal_mutable_source();
}
inline const std::string& MountPoint::_internal_source() const {
  return source_.Get();
}
inline void MountPoint::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.source)
}
inline void MountPoint::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.source)
}
inline void MountPoint::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.source)
}
inline std::string* MountPoint::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_source() {
  // @@protoc_insertion_point(field_release:container.MountPoint.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.source)
}
inline std::string* MountPoint::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.source)
}

// string destination = 4;
inline void MountPoint::clear_destination() {
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::destination() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.destination)
  return _internal_destination();
}
inline void MountPoint::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.destination)
}
inline std::string* MountPoint::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.destination)
  return _internal_mutable_destination();
}
inline const std::string& MountPoint::_internal_destination() const {
  return destination_.Get();
}
inline void MountPoint::_internal_set_destination(const std::string& value) {
  
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_destination(std::string&& value) {
  
  destination_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.destination)
}
inline void MountPoint::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.destination)
}
inline void MountPoint::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.destination)
}
inline std::string* MountPoint::_internal_mutable_destination() {
  
  return destination_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_destination() {
  // @@protoc_insertion_point(field_release:container.MountPoint.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.destination)
}
inline std::string* MountPoint::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.destination)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return destination_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_destination(
    std::string* destination) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destination, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.destination)
}

// string driver = 5;
inline void MountPoint::clear_driver() {
  driver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::driver() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.driver)
  return _internal_driver();
}
inline void MountPoint::set_driver(const std::string& value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.driver)
}
inline std::string* MountPoint::mutable_driver() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.driver)
  return _internal_mutable_driver();
}
inline const std::string& MountPoint::_internal_driver() const {
  return driver_.Get();
}
inline void MountPoint::_internal_set_driver(const std::string& value) {
  
  driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_driver(std::string&& value) {
  
  driver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.driver)
}
inline void MountPoint::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.driver)
}
inline void MountPoint::set_driver(const char* value,
    size_t size) {
  
  driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.driver)
}
inline std::string* MountPoint::_internal_mutable_driver() {
  
  return driver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_driver() {
  // @@protoc_insertion_point(field_release:container.MountPoint.driver)
  return driver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    
  } else {
    
  }
  driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.driver)
}
inline std::string* MountPoint::unsafe_arena_release_driver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.driver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return driver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_driver(
    std::string* driver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (driver != nullptr) {
    
  } else {
    
  }
  driver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      driver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.driver)
}

// string mode = 6;
inline void MountPoint::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::mode() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.mode)
  return _internal_mode();
}
inline void MountPoint::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.mode)
}
inline std::string* MountPoint::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.mode)
  return _internal_mutable_mode();
}
inline const std::string& MountPoint::_internal_mode() const {
  return mode_.Get();
}
inline void MountPoint::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.mode)
}
inline void MountPoint::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.mode)
}
inline void MountPoint::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.mode)
}
inline std::string* MountPoint::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_mode() {
  // @@protoc_insertion_point(field_release:container.MountPoint.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.mode)
}
inline std::string* MountPoint::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_mode(
    std::string* mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.mode)
}

// bool rw = 7;
inline void MountPoint::clear_rw() {
  rw_ = false;
}
inline bool MountPoint::_internal_rw() const {
  return rw_;
}
inline bool MountPoint::rw() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.rw)
  return _internal_rw();
}
inline void MountPoint::_internal_set_rw(bool value) {
  
  rw_ = value;
}
inline void MountPoint::set_rw(bool value) {
  _internal_set_rw(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.rw)
}

// string propagation = 8;
inline void MountPoint::clear_propagation() {
  propagation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MountPoint::propagation() const {
  // @@protoc_insertion_point(field_get:container.MountPoint.propagation)
  return _internal_propagation();
}
inline void MountPoint::set_propagation(const std::string& value) {
  _internal_set_propagation(value);
  // @@protoc_insertion_point(field_set:container.MountPoint.propagation)
}
inline std::string* MountPoint::mutable_propagation() {
  // @@protoc_insertion_point(field_mutable:container.MountPoint.propagation)
  return _internal_mutable_propagation();
}
inline const std::string& MountPoint::_internal_propagation() const {
  return propagation_.Get();
}
inline void MountPoint::_internal_set_propagation(const std::string& value) {
  
  propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MountPoint::set_propagation(std::string&& value) {
  
  propagation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MountPoint.propagation)
}
inline void MountPoint::set_propagation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MountPoint.propagation)
}
inline void MountPoint::set_propagation(const char* value,
    size_t size) {
  
  propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MountPoint.propagation)
}
inline std::string* MountPoint::_internal_mutable_propagation() {
  
  return propagation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MountPoint::release_propagation() {
  // @@protoc_insertion_point(field_release:container.MountPoint.propagation)
  return propagation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountPoint::set_allocated_propagation(std::string* propagation) {
  if (propagation != nullptr) {
    
  } else {
    
  }
  propagation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propagation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MountPoint.propagation)
}
inline std::string* MountPoint::unsafe_arena_release_propagation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MountPoint.propagation)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return propagation_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MountPoint::unsafe_arena_set_allocated_propagation(
    std::string* propagation) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (propagation != nullptr) {
    
  } else {
    
  }
  propagation_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      propagation, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MountPoint.propagation)
}

// -------------------------------------------------------------------

// IPAMConfig

// string ipv4_address = 1;
inline void IPAMConfig::clear_ipv4_address() {
  ipv4_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPAMConfig::ipv4_address() const {
  // @@protoc_insertion_point(field_get:container.IPAMConfig.ipv4_address)
  return _internal_ipv4_address();
}
inline void IPAMConfig::set_ipv4_address(const std::string& value) {
  _internal_set_ipv4_address(value);
  // @@protoc_insertion_point(field_set:container.IPAMConfig.ipv4_address)
}
inline std::string* IPAMConfig::mutable_ipv4_address() {
  // @@protoc_insertion_point(field_mutable:container.IPAMConfig.ipv4_address)
  return _internal_mutable_ipv4_address();
}
inline const std::string& IPAMConfig::_internal_ipv4_address() const {
  return ipv4_address_.Get();
}
inline void IPAMConfig::_internal_set_ipv4_address(const std::string& value) {
  
  ipv4_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPAMConfig::set_ipv4_address(std::string&& value) {
  
  ipv4_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.IPAMConfig.ipv4_address)
}
inline void IPAMConfig::set_ipv4_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.IPAMConfig.ipv4_address)
}
inline void IPAMConfig::set_ipv4_address(const char* value,
    size_t size) {
  
  ipv4_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.IPAMConfig.ipv4_address)
}
inline std::string* IPAMConfig::_internal_mutable_ipv4_address() {
  
  return ipv4_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPAMConfig::release_ipv4_address() {
  // @@protoc_insertion_point(field_release:container.IPAMConfig.ipv4_address)
  return ipv4_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPAMConfig::set_allocated_ipv4_address(std::string* ipv4_address) {
  if (ipv4_address != nullptr) {
    
  } else {
    
  }
  ipv4_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.IPAMConfig.ipv4_address)
}
inline std::string* IPAMConfig::unsafe_arena_release_ipv4_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.IPAMConfig.ipv4_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipv4_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPAMConfig::unsafe_arena_set_allocated_ipv4_address(
    std::string* ipv4_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipv4_address != nullptr) {
    
  } else {
    
  }
  ipv4_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv4_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.IPAMConfig.ipv4_address)
}

// string ipv6_address = 2;
inline void IPAMConfig::clear_ipv6_address() {
  ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPAMConfig::ipv6_address() const {
  // @@protoc_insertion_point(field_get:container.IPAMConfig.ipv6_address)
  return _internal_ipv6_address();
}
inline void IPAMConfig::set_ipv6_address(const std::string& value) {
  _internal_set_ipv6_address(value);
  // @@protoc_insertion_point(field_set:container.IPAMConfig.ipv6_address)
}
inline std::string* IPAMConfig::mutable_ipv6_address() {
  // @@protoc_insertion_point(field_mutable:container.IPAMConfig.ipv6_address)
  return _internal_mutable_ipv6_address();
}
inline const std::string& IPAMConfig::_internal_ipv6_address() const {
  return ipv6_address_.Get();
}
inline void IPAMConfig::_internal_set_ipv6_address(const std::string& value) {
  
  ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPAMConfig::set_ipv6_address(std::string&& value) {
  
  ipv6_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.IPAMConfig.ipv6_address)
}
inline void IPAMConfig::set_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.IPAMConfig.ipv6_address)
}
inline void IPAMConfig::set_ipv6_address(const char* value,
    size_t size) {
  
  ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.IPAMConfig.ipv6_address)
}
inline std::string* IPAMConfig::_internal_mutable_ipv6_address() {
  
  return ipv6_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPAMConfig::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:container.IPAMConfig.ipv6_address)
  return ipv6_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPAMConfig::set_allocated_ipv6_address(std::string* ipv6_address) {
  if (ipv6_address != nullptr) {
    
  } else {
    
  }
  ipv6_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.IPAMConfig.ipv6_address)
}
inline std::string* IPAMConfig::unsafe_arena_release_ipv6_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.IPAMConfig.ipv6_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipv6_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPAMConfig::unsafe_arena_set_allocated_ipv6_address(
    std::string* ipv6_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipv6_address != nullptr) {
    
  } else {
    
  }
  ipv6_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.IPAMConfig.ipv6_address)
}

// repeated string link_local_ips = 3;
inline int IPAMConfig::_internal_link_local_ips_size() const {
  return link_local_ips_.size();
}
inline int IPAMConfig::link_local_ips_size() const {
  return _internal_link_local_ips_size();
}
inline void IPAMConfig::clear_link_local_ips() {
  link_local_ips_.Clear();
}
inline std::string* IPAMConfig::add_link_local_ips() {
  // @@protoc_insertion_point(field_add_mutable:container.IPAMConfig.link_local_ips)
  return _internal_add_link_local_ips();
}
inline const std::string& IPAMConfig::_internal_link_local_ips(int index) const {
  return link_local_ips_.Get(index);
}
inline const std::string& IPAMConfig::link_local_ips(int index) const {
  // @@protoc_insertion_point(field_get:container.IPAMConfig.link_local_ips)
  return _internal_link_local_ips(index);
}
inline std::string* IPAMConfig::mutable_link_local_ips(int index) {
  // @@protoc_insertion_point(field_mutable:container.IPAMConfig.link_local_ips)
  return link_local_ips_.Mutable(index);
}
inline void IPAMConfig::set_link_local_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.IPAMConfig.link_local_ips)
  link_local_ips_.Mutable(index)->assign(value);
}
inline void IPAMConfig::set_link_local_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.IPAMConfig.link_local_ips)
  link_local_ips_.Mutable(index)->assign(std::move(value));
}
inline void IPAMConfig::set_link_local_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  link_local_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.IPAMConfig.link_local_ips)
}
inline void IPAMConfig::set_link_local_ips(int index, const char* value, size_t size) {
  link_local_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.IPAMConfig.link_local_ips)
}
inline std::string* IPAMConfig::_internal_add_link_local_ips() {
  return link_local_ips_.Add();
}
inline void IPAMConfig::add_link_local_ips(const std::string& value) {
  link_local_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.IPAMConfig.link_local_ips)
}
inline void IPAMConfig::add_link_local_ips(std::string&& value) {
  link_local_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.IPAMConfig.link_local_ips)
}
inline void IPAMConfig::add_link_local_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  link_local_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.IPAMConfig.link_local_ips)
}
inline void IPAMConfig::add_link_local_ips(const char* value, size_t size) {
  link_local_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.IPAMConfig.link_local_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IPAMConfig::link_local_ips() const {
  // @@protoc_insertion_point(field_list:container.IPAMConfig.link_local_ips)
  return link_local_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IPAMConfig::mutable_link_local_ips() {
  // @@protoc_insertion_point(field_mutable_list:container.IPAMConfig.link_local_ips)
  return &link_local_ips_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EndpointSetting

// .container.IPAMConfig ipam_config = 1;
inline bool EndpointSetting::_internal_has_ipam_config() const {
  return this != internal_default_instance() && ipam_config_ != nullptr;
}
inline bool EndpointSetting::has_ipam_config() const {
  return _internal_has_ipam_config();
}
inline void EndpointSetting::clear_ipam_config() {
  if (GetArena() == nullptr && ipam_config_ != nullptr) {
    delete ipam_config_;
  }
  ipam_config_ = nullptr;
}
inline const ::container::IPAMConfig& EndpointSetting::_internal_ipam_config() const {
  const ::container::IPAMConfig* p = ipam_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::IPAMConfig*>(
      &::container::_IPAMConfig_default_instance_);
}
inline const ::container::IPAMConfig& EndpointSetting::ipam_config() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.ipam_config)
  return _internal_ipam_config();
}
inline void EndpointSetting::unsafe_arena_set_allocated_ipam_config(
    ::container::IPAMConfig* ipam_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipam_config_);
  }
  ipam_config_ = ipam_config;
  if (ipam_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.ipam_config)
}
inline ::container::IPAMConfig* EndpointSetting::release_ipam_config() {
  auto temp = unsafe_arena_release_ipam_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::IPAMConfig* EndpointSetting::unsafe_arena_release_ipam_config() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.ipam_config)
  
  ::container::IPAMConfig* temp = ipam_config_;
  ipam_config_ = nullptr;
  return temp;
}
inline ::container::IPAMConfig* EndpointSetting::_internal_mutable_ipam_config() {
  
  if (ipam_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::IPAMConfig>(GetArena());
    ipam_config_ = p;
  }
  return ipam_config_;
}
inline ::container::IPAMConfig* EndpointSetting::mutable_ipam_config() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.ipam_config)
  return _internal_mutable_ipam_config();
}
inline void EndpointSetting::set_allocated_ipam_config(::container::IPAMConfig* ipam_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ipam_config_;
  }
  if (ipam_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ipam_config);
    if (message_arena != submessage_arena) {
      ipam_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipam_config, submessage_arena);
    }
    
  } else {
    
  }
  ipam_config_ = ipam_config;
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.ipam_config)
}

// repeated string links = 2;
inline int EndpointSetting::_internal_links_size() const {
  return links_.size();
}
inline int EndpointSetting::links_size() const {
  return _internal_links_size();
}
inline void EndpointSetting::clear_links() {
  links_.Clear();
}
inline std::string* EndpointSetting::add_links() {
  // @@protoc_insertion_point(field_add_mutable:container.EndpointSetting.links)
  return _internal_add_links();
}
inline const std::string& EndpointSetting::_internal_links(int index) const {
  return links_.Get(index);
}
inline const std::string& EndpointSetting::links(int index) const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.links)
  return _internal_links(index);
}
inline std::string* EndpointSetting::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.links)
  return links_.Mutable(index);
}
inline void EndpointSetting::set_links(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.EndpointSetting.links)
  links_.Mutable(index)->assign(value);
}
inline void EndpointSetting::set_links(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.EndpointSetting.links)
  links_.Mutable(index)->assign(std::move(value));
}
inline void EndpointSetting::set_links(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  links_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.links)
}
inline void EndpointSetting::set_links(int index, const char* value, size_t size) {
  links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.links)
}
inline std::string* EndpointSetting::_internal_add_links() {
  return links_.Add();
}
inline void EndpointSetting::add_links(const std::string& value) {
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.EndpointSetting.links)
}
inline void EndpointSetting::add_links(std::string&& value) {
  links_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.EndpointSetting.links)
}
inline void EndpointSetting::add_links(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.EndpointSetting.links)
}
inline void EndpointSetting::add_links(const char* value, size_t size) {
  links_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.EndpointSetting.links)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EndpointSetting::links() const {
  // @@protoc_insertion_point(field_list:container.EndpointSetting.links)
  return links_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EndpointSetting::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:container.EndpointSetting.links)
  return &links_;
}

// repeated string aliases = 3;
inline int EndpointSetting::_internal_aliases_size() const {
  return aliases_.size();
}
inline int EndpointSetting::aliases_size() const {
  return _internal_aliases_size();
}
inline void EndpointSetting::clear_aliases() {
  aliases_.Clear();
}
inline std::string* EndpointSetting::add_aliases() {
  // @@protoc_insertion_point(field_add_mutable:container.EndpointSetting.aliases)
  return _internal_add_aliases();
}
inline const std::string& EndpointSetting::_internal_aliases(int index) const {
  return aliases_.Get(index);
}
inline const std::string& EndpointSetting::aliases(int index) const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.aliases)
  return _internal_aliases(index);
}
inline std::string* EndpointSetting::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.aliases)
  return aliases_.Mutable(index);
}
inline void EndpointSetting::set_aliases(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.EndpointSetting.aliases)
  aliases_.Mutable(index)->assign(value);
}
inline void EndpointSetting::set_aliases(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.EndpointSetting.aliases)
  aliases_.Mutable(index)->assign(std::move(value));
}
inline void EndpointSetting::set_aliases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.aliases)
}
inline void EndpointSetting::set_aliases(int index, const char* value, size_t size) {
  aliases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.aliases)
}
inline std::string* EndpointSetting::_internal_add_aliases() {
  return aliases_.Add();
}
inline void EndpointSetting::add_aliases(const std::string& value) {
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.EndpointSetting.aliases)
}
inline void EndpointSetting::add_aliases(std::string&& value) {
  aliases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.EndpointSetting.aliases)
}
inline void EndpointSetting::add_aliases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.EndpointSetting.aliases)
}
inline void EndpointSetting::add_aliases(const char* value, size_t size) {
  aliases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.EndpointSetting.aliases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EndpointSetting::aliases() const {
  // @@protoc_insertion_point(field_list:container.EndpointSetting.aliases)
  return aliases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EndpointSetting::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:container.EndpointSetting.aliases)
  return &aliases_;
}

// string network_id = 4;
inline void EndpointSetting::clear_network_id() {
  network_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::network_id() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.network_id)
  return _internal_network_id();
}
inline void EndpointSetting::set_network_id(const std::string& value) {
  _internal_set_network_id(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.network_id)
}
inline std::string* EndpointSetting::mutable_network_id() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.network_id)
  return _internal_mutable_network_id();
}
inline const std::string& EndpointSetting::_internal_network_id() const {
  return network_id_.Get();
}
inline void EndpointSetting::_internal_set_network_id(const std::string& value) {
  
  network_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_network_id(std::string&& value) {
  
  network_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.network_id)
}
inline void EndpointSetting::set_network_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.network_id)
}
inline void EndpointSetting::set_network_id(const char* value,
    size_t size) {
  
  network_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.network_id)
}
inline std::string* EndpointSetting::_internal_mutable_network_id() {
  
  return network_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_network_id() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.network_id)
  return network_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_network_id(std::string* network_id) {
  if (network_id != nullptr) {
    
  } else {
    
  }
  network_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.network_id)
}
inline std::string* EndpointSetting::unsafe_arena_release_network_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.network_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return network_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_network_id(
    std::string* network_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (network_id != nullptr) {
    
  } else {
    
  }
  network_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      network_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.network_id)
}

// string endpoint_id = 5;
inline void EndpointSetting::clear_endpoint_id() {
  endpoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::endpoint_id() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.endpoint_id)
  return _internal_endpoint_id();
}
inline void EndpointSetting::set_endpoint_id(const std::string& value) {
  _internal_set_endpoint_id(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.endpoint_id)
}
inline std::string* EndpointSetting::mutable_endpoint_id() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.endpoint_id)
  return _internal_mutable_endpoint_id();
}
inline const std::string& EndpointSetting::_internal_endpoint_id() const {
  return endpoint_id_.Get();
}
inline void EndpointSetting::_internal_set_endpoint_id(const std::string& value) {
  
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_endpoint_id(std::string&& value) {
  
  endpoint_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.endpoint_id)
}
inline void EndpointSetting::set_endpoint_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.endpoint_id)
}
inline void EndpointSetting::set_endpoint_id(const char* value,
    size_t size) {
  
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.endpoint_id)
}
inline std::string* EndpointSetting::_internal_mutable_endpoint_id() {
  
  return endpoint_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_endpoint_id() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.endpoint_id)
  return endpoint_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_endpoint_id(std::string* endpoint_id) {
  if (endpoint_id != nullptr) {
    
  } else {
    
  }
  endpoint_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.endpoint_id)
}
inline std::string* EndpointSetting::unsafe_arena_release_endpoint_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.endpoint_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endpoint_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_endpoint_id(
    std::string* endpoint_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endpoint_id != nullptr) {
    
  } else {
    
  }
  endpoint_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endpoint_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.endpoint_id)
}

// string gateway = 6;
inline void EndpointSetting::clear_gateway() {
  gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::gateway() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.gateway)
  return _internal_gateway();
}
inline void EndpointSetting::set_gateway(const std::string& value) {
  _internal_set_gateway(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.gateway)
}
inline std::string* EndpointSetting::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.gateway)
  return _internal_mutable_gateway();
}
inline const std::string& EndpointSetting::_internal_gateway() const {
  return gateway_.Get();
}
inline void EndpointSetting::_internal_set_gateway(const std::string& value) {
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_gateway(std::string&& value) {
  
  gateway_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.gateway)
}
inline void EndpointSetting::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.gateway)
}
inline void EndpointSetting::set_gateway(const char* value,
    size_t size) {
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.gateway)
}
inline std::string* EndpointSetting::_internal_mutable_gateway() {
  
  return gateway_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_gateway() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.gateway)
  return gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.gateway)
}
inline std::string* EndpointSetting::unsafe_arena_release_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.gateway)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gateway_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_gateway(
    std::string* gateway) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gateway, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.gateway)
}

// string ip_address = 7;
inline void EndpointSetting::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::ip_address() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.ip_address)
  return _internal_ip_address();
}
inline void EndpointSetting::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.ip_address)
}
inline std::string* EndpointSetting::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EndpointSetting::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void EndpointSetting::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.ip_address)
}
inline void EndpointSetting::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.ip_address)
}
inline void EndpointSetting::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.ip_address)
}
inline std::string* EndpointSetting::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_ip_address() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.ip_address)
}
inline std::string* EndpointSetting::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.ip_address)
}

// int32 ip_prefix_len = 8;
inline void EndpointSetting::clear_ip_prefix_len() {
  ip_prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointSetting::_internal_ip_prefix_len() const {
  return ip_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointSetting::ip_prefix_len() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.ip_prefix_len)
  return _internal_ip_prefix_len();
}
inline void EndpointSetting::_internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_prefix_len_ = value;
}
inline void EndpointSetting::set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_prefix_len(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.ip_prefix_len)
}

// string ipv6_gateway = 9;
inline void EndpointSetting::clear_ipv6_gateway() {
  ipv6_gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::ipv6_gateway() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.ipv6_gateway)
  return _internal_ipv6_gateway();
}
inline void EndpointSetting::set_ipv6_gateway(const std::string& value) {
  _internal_set_ipv6_gateway(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.ipv6_gateway)
}
inline std::string* EndpointSetting::mutable_ipv6_gateway() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.ipv6_gateway)
  return _internal_mutable_ipv6_gateway();
}
inline const std::string& EndpointSetting::_internal_ipv6_gateway() const {
  return ipv6_gateway_.Get();
}
inline void EndpointSetting::_internal_set_ipv6_gateway(const std::string& value) {
  
  ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_ipv6_gateway(std::string&& value) {
  
  ipv6_gateway_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.ipv6_gateway)
}
inline void EndpointSetting::set_ipv6_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.ipv6_gateway)
}
inline void EndpointSetting::set_ipv6_gateway(const char* value,
    size_t size) {
  
  ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.ipv6_gateway)
}
inline std::string* EndpointSetting::_internal_mutable_ipv6_gateway() {
  
  return ipv6_gateway_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_ipv6_gateway() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.ipv6_gateway)
  return ipv6_gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_ipv6_gateway(std::string* ipv6_gateway) {
  if (ipv6_gateway != nullptr) {
    
  } else {
    
  }
  ipv6_gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6_gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.ipv6_gateway)
}
inline std::string* EndpointSetting::unsafe_arena_release_ipv6_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.ipv6_gateway)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipv6_gateway_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_ipv6_gateway(
    std::string* ipv6_gateway) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipv6_gateway != nullptr) {
    
  } else {
    
  }
  ipv6_gateway_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_gateway, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.ipv6_gateway)
}

// string global_ipv6_address = 10;
inline void EndpointSetting::clear_global_ipv6_address() {
  global_ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::global_ipv6_address() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.global_ipv6_address)
  return _internal_global_ipv6_address();
}
inline void EndpointSetting::set_global_ipv6_address(const std::string& value) {
  _internal_set_global_ipv6_address(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.global_ipv6_address)
}
inline std::string* EndpointSetting::mutable_global_ipv6_address() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.global_ipv6_address)
  return _internal_mutable_global_ipv6_address();
}
inline const std::string& EndpointSetting::_internal_global_ipv6_address() const {
  return global_ipv6_address_.Get();
}
inline void EndpointSetting::_internal_set_global_ipv6_address(const std::string& value) {
  
  global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_global_ipv6_address(std::string&& value) {
  
  global_ipv6_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.global_ipv6_address)
}
inline void EndpointSetting::set_global_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.global_ipv6_address)
}
inline void EndpointSetting::set_global_ipv6_address(const char* value,
    size_t size) {
  
  global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.global_ipv6_address)
}
inline std::string* EndpointSetting::_internal_mutable_global_ipv6_address() {
  
  return global_ipv6_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_global_ipv6_address() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.global_ipv6_address)
  return global_ipv6_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_global_ipv6_address(std::string* global_ipv6_address) {
  if (global_ipv6_address != nullptr) {
    
  } else {
    
  }
  global_ipv6_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_ipv6_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.global_ipv6_address)
}
inline std::string* EndpointSetting::unsafe_arena_release_global_ipv6_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.global_ipv6_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_ipv6_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_global_ipv6_address(
    std::string* global_ipv6_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_ipv6_address != nullptr) {
    
  } else {
    
  }
  global_ipv6_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_ipv6_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.global_ipv6_address)
}

// int32 global_ipv6_prefix_len = 11;
inline void EndpointSetting::clear_global_ipv6_prefix_len() {
  global_ipv6_prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointSetting::_internal_global_ipv6_prefix_len() const {
  return global_ipv6_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointSetting::global_ipv6_prefix_len() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.global_ipv6_prefix_len)
  return _internal_global_ipv6_prefix_len();
}
inline void EndpointSetting::_internal_set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  global_ipv6_prefix_len_ = value;
}
inline void EndpointSetting::set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_global_ipv6_prefix_len(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.global_ipv6_prefix_len)
}

// string mac_address = 12;
inline void EndpointSetting::clear_mac_address() {
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointSetting::mac_address() const {
  // @@protoc_insertion_point(field_get:container.EndpointSetting.mac_address)
  return _internal_mac_address();
}
inline void EndpointSetting::set_mac_address(const std::string& value) {
  _internal_set_mac_address(value);
  // @@protoc_insertion_point(field_set:container.EndpointSetting.mac_address)
}
inline std::string* EndpointSetting::mutable_mac_address() {
  // @@protoc_insertion_point(field_mutable:container.EndpointSetting.mac_address)
  return _internal_mutable_mac_address();
}
inline const std::string& EndpointSetting::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void EndpointSetting::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointSetting::set_mac_address(std::string&& value) {
  
  mac_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.EndpointSetting.mac_address)
}
inline void EndpointSetting::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.EndpointSetting.mac_address)
}
inline void EndpointSetting::set_mac_address(const char* value,
    size_t size) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.EndpointSetting.mac_address)
}
inline std::string* EndpointSetting::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointSetting::release_mac_address() {
  // @@protoc_insertion_point(field_release:container.EndpointSetting.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointSetting::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.EndpointSetting.mac_address)
}
inline std::string* EndpointSetting::unsafe_arena_release_mac_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.EndpointSetting.mac_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mac_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndpointSetting::unsafe_arena_set_allocated_mac_address(
    std::string* mac_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mac_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.EndpointSetting.mac_address)
}

// map<string, string> driver_opts = 13;
inline int EndpointSetting::_internal_driver_opts_size() const {
  return driver_opts_.size();
}
inline int EndpointSetting::driver_opts_size() const {
  return _internal_driver_opts_size();
}
inline void EndpointSetting::clear_driver_opts() {
  driver_opts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EndpointSetting::_internal_driver_opts() const {
  return driver_opts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EndpointSetting::driver_opts() const {
  // @@protoc_insertion_point(field_map:container.EndpointSetting.driver_opts)
  return _internal_driver_opts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EndpointSetting::_internal_mutable_driver_opts() {
  return driver_opts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EndpointSetting::mutable_driver_opts() {
  // @@protoc_insertion_point(field_mutable_map:container.EndpointSetting.driver_opts)
  return _internal_mutable_driver_opts();
}

// -------------------------------------------------------------------

// NodeContainer

// int64 node_id = 1;
inline void NodeContainer::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeContainer::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeContainer::node_id() const {
  // @@protoc_insertion_point(field_get:container.NodeContainer.node_id)
  return _internal_node_id();
}
inline void NodeContainer::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void NodeContainer::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.NodeContainer.node_id)
}

// string node_address = 2;
inline void NodeContainer::clear_node_address() {
  node_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NodeContainer::node_address() const {
  // @@protoc_insertion_point(field_get:container.NodeContainer.node_address)
  return _internal_node_address();
}
inline void NodeContainer::set_node_address(const std::string& value) {
  _internal_set_node_address(value);
  // @@protoc_insertion_point(field_set:container.NodeContainer.node_address)
}
inline std::string* NodeContainer::mutable_node_address() {
  // @@protoc_insertion_point(field_mutable:container.NodeContainer.node_address)
  return _internal_mutable_node_address();
}
inline const std::string& NodeContainer::_internal_node_address() const {
  return node_address_.Get();
}
inline void NodeContainer::_internal_set_node_address(const std::string& value) {
  
  node_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeContainer::set_node_address(std::string&& value) {
  
  node_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NodeContainer.node_address)
}
inline void NodeContainer::set_node_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NodeContainer.node_address)
}
inline void NodeContainer::set_node_address(const char* value,
    size_t size) {
  
  node_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NodeContainer.node_address)
}
inline std::string* NodeContainer::_internal_mutable_node_address() {
  
  return node_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeContainer::release_node_address() {
  // @@protoc_insertion_point(field_release:container.NodeContainer.node_address)
  return node_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeContainer::set_allocated_node_address(std::string* node_address) {
  if (node_address != nullptr) {
    
  } else {
    
  }
  node_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NodeContainer.node_address)
}
inline std::string* NodeContainer::unsafe_arena_release_node_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NodeContainer.node_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return node_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeContainer::unsafe_arena_set_allocated_node_address(
    std::string* node_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (node_address != nullptr) {
    
  } else {
    
  }
  node_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      node_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NodeContainer.node_address)
}

// .container.ContainerInfo info = 10;
inline bool NodeContainer::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool NodeContainer::has_info() const {
  return _internal_has_info();
}
inline void NodeContainer::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::container::ContainerInfo& NodeContainer::_internal_info() const {
  const ::container::ContainerInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ContainerInfo*>(
      &::container::_ContainerInfo_default_instance_);
}
inline const ::container::ContainerInfo& NodeContainer::info() const {
  // @@protoc_insertion_point(field_get:container.NodeContainer.info)
  return _internal_info();
}
inline void NodeContainer::unsafe_arena_set_allocated_info(
    ::container::ContainerInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NodeContainer.info)
}
inline ::container::ContainerInfo* NodeContainer::release_info() {
  auto temp = unsafe_arena_release_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ContainerInfo* NodeContainer::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:container.NodeContainer.info)
  
  ::container::ContainerInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::container::ContainerInfo* NodeContainer::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ContainerInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::container::ContainerInfo* NodeContainer::mutable_info() {
  // @@protoc_insertion_point(field_mutable:container.NodeContainer.info)
  return _internal_mutable_info();
}
inline void NodeContainer::set_allocated_info(::container::ContainerInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:container.NodeContainer.info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerInfo

// string id = 1;
inline void ContainerInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerInfo::id() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.id)
  return _internal_id();
}
inline void ContainerInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.id)
}
inline std::string* ContainerInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.id)
  return _internal_mutable_id();
}
inline const std::string& ContainerInfo::_internal_id() const {
  return id_.Get();
}
inline void ContainerInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerInfo::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerInfo.id)
}
inline void ContainerInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerInfo.id)
}
inline void ContainerInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerInfo.id)
}
inline std::string* ContainerInfo::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerInfo::release_id() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.id)
}
inline std::string* ContainerInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerInfo.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerInfo::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.id)
}

// string name = 2;
inline void ContainerInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerInfo::name() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.name)
  return _internal_name();
}
inline void ContainerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.name)
}
inline std::string* ContainerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ContainerInfo::_internal_name() const {
  return name_.Get();
}
inline void ContainerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerInfo.name)
}
inline void ContainerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerInfo.name)
}
inline void ContainerInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerInfo.name)
}
inline std::string* ContainerInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerInfo::release_name() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.name)
}
inline std::string* ContainerInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.name)
}

// string image = 3;
inline void ContainerInfo::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerInfo::image() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.image)
  return _internal_image();
}
inline void ContainerInfo::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.image)
}
inline std::string* ContainerInfo::mutable_image() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.image)
  return _internal_mutable_image();
}
inline const std::string& ContainerInfo::_internal_image() const {
  return image_.Get();
}
inline void ContainerInfo::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerInfo::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerInfo.image)
}
inline void ContainerInfo::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerInfo.image)
}
inline void ContainerInfo::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerInfo.image)
}
inline std::string* ContainerInfo::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerInfo::release_image() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerInfo::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.image)
}
inline std::string* ContainerInfo::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerInfo.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerInfo::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.image)
}

// string image_id = 4;
inline void ContainerInfo::clear_image_id() {
  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerInfo::image_id() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.image_id)
  return _internal_image_id();
}
inline void ContainerInfo::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.image_id)
}
inline std::string* ContainerInfo::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& ContainerInfo::_internal_image_id() const {
  return image_id_.Get();
}
inline void ContainerInfo::_internal_set_image_id(const std::string& value) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerInfo::set_image_id(std::string&& value) {
  
  image_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerInfo.image_id)
}
inline void ContainerInfo::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerInfo.image_id)
}
inline void ContainerInfo::set_image_id(const char* value,
    size_t size) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerInfo.image_id)
}
inline std::string* ContainerInfo::_internal_mutable_image_id() {
  
  return image_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerInfo::release_image_id() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.image_id)
  return image_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerInfo::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.image_id)
}
inline std::string* ContainerInfo::unsafe_arena_release_image_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerInfo.image_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerInfo::unsafe_arena_set_allocated_image_id(
    std::string* image_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.image_id)
}

// string command = 5;
inline void ContainerInfo::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerInfo::command() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.command)
  return _internal_command();
}
inline void ContainerInfo::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.command)
}
inline std::string* ContainerInfo::mutable_command() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.command)
  return _internal_mutable_command();
}
inline const std::string& ContainerInfo::_internal_command() const {
  return command_.Get();
}
inline void ContainerInfo::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerInfo::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerInfo.command)
}
inline void ContainerInfo::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerInfo.command)
}
inline void ContainerInfo::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerInfo.command)
}
inline std::string* ContainerInfo::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerInfo::release_command() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerInfo::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.command)
}
inline std::string* ContainerInfo::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerInfo.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerInfo::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.command)
}

// string state = 6;
inline void ContainerInfo::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerInfo::state() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.state)
  return _internal_state();
}
inline void ContainerInfo::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.state)
}
inline std::string* ContainerInfo::mutable_state() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.state)
  return _internal_mutable_state();
}
inline const std::string& ContainerInfo::_internal_state() const {
  return state_.Get();
}
inline void ContainerInfo::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerInfo::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerInfo.state)
}
inline void ContainerInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerInfo.state)
}
inline void ContainerInfo::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerInfo.state)
}
inline std::string* ContainerInfo::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerInfo::release_state() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.state)
}
inline std::string* ContainerInfo::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerInfo.state)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerInfo::unsafe_arena_set_allocated_state(
    std::string* state) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state != nullptr) {
    
  } else {
    
  }
  state_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.state)
}

// int64 created = 7;
inline void ContainerInfo::clear_created() {
  created_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerInfo::_internal_created() const {
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerInfo::created() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.created)
  return _internal_created();
}
inline void ContainerInfo::_internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_ = value;
}
inline void ContainerInfo::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.created)
}

// int64 size_rw = 8;
inline void ContainerInfo::clear_size_rw() {
  size_rw_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerInfo::_internal_size_rw() const {
  return size_rw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerInfo::size_rw() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.size_rw)
  return _internal_size_rw();
}
inline void ContainerInfo::_internal_set_size_rw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_rw_ = value;
}
inline void ContainerInfo::set_size_rw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size_rw(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.size_rw)
}

// int64 size_root_fs = 9;
inline void ContainerInfo::clear_size_root_fs() {
  size_root_fs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerInfo::_internal_size_root_fs() const {
  return size_root_fs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerInfo::size_root_fs() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.size_root_fs)
  return _internal_size_root_fs();
}
inline void ContainerInfo::_internal_set_size_root_fs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_root_fs_ = value;
}
inline void ContainerInfo::set_size_root_fs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size_root_fs(value);
  // @@protoc_insertion_point(field_set:container.ContainerInfo.size_root_fs)
}

// map<string, string> labels = 10;
inline int ContainerInfo::_internal_labels_size() const {
  return labels_.size();
}
inline int ContainerInfo::labels_size() const {
  return _internal_labels_size();
}
inline void ContainerInfo::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerInfo::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerInfo::labels() const {
  // @@protoc_insertion_point(field_map:container.ContainerInfo.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerInfo::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerInfo::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:container.ContainerInfo.labels)
  return _internal_mutable_labels();
}

// .container.ResourceStat resource_stat = 101;
inline bool ContainerInfo::_internal_has_resource_stat() const {
  return this != internal_default_instance() && resource_stat_ != nullptr;
}
inline bool ContainerInfo::has_resource_stat() const {
  return _internal_has_resource_stat();
}
inline void ContainerInfo::clear_resource_stat() {
  if (GetArena() == nullptr && resource_stat_ != nullptr) {
    delete resource_stat_;
  }
  resource_stat_ = nullptr;
}
inline const ::container::ResourceStat& ContainerInfo::_internal_resource_stat() const {
  const ::container::ResourceStat* p = resource_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ResourceStat*>(
      &::container::_ResourceStat_default_instance_);
}
inline const ::container::ResourceStat& ContainerInfo::resource_stat() const {
  // @@protoc_insertion_point(field_get:container.ContainerInfo.resource_stat)
  return _internal_resource_stat();
}
inline void ContainerInfo::unsafe_arena_set_allocated_resource_stat(
    ::container::ResourceStat* resource_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_stat_);
  }
  resource_stat_ = resource_stat;
  if (resource_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerInfo.resource_stat)
}
inline ::container::ResourceStat* ContainerInfo::release_resource_stat() {
  auto temp = unsafe_arena_release_resource_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ResourceStat* ContainerInfo::unsafe_arena_release_resource_stat() {
  // @@protoc_insertion_point(field_release:container.ContainerInfo.resource_stat)
  
  ::container::ResourceStat* temp = resource_stat_;
  resource_stat_ = nullptr;
  return temp;
}
inline ::container::ResourceStat* ContainerInfo::_internal_mutable_resource_stat() {
  
  if (resource_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ResourceStat>(GetArena());
    resource_stat_ = p;
  }
  return resource_stat_;
}
inline ::container::ResourceStat* ContainerInfo::mutable_resource_stat() {
  // @@protoc_insertion_point(field_mutable:container.ContainerInfo.resource_stat)
  return _internal_mutable_resource_stat();
}
inline void ContainerInfo::set_allocated_resource_stat(::container::ResourceStat* resource_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_stat_;
  }
  if (resource_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_stat);
    if (message_arena != submessage_arena) {
      resource_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_stat, submessage_arena);
    }
    
  } else {
    
  }
  resource_stat_ = resource_stat;
  // @@protoc_insertion_point(field_set_allocated:container.ContainerInfo.resource_stat)
}

// -------------------------------------------------------------------

// ContainerIdList

// int64 node_id = 1;
inline void ContainerIdList::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerIdList::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerIdList::node_id() const {
  // @@protoc_insertion_point(field_get:container.ContainerIdList.node_id)
  return _internal_node_id();
}
inline void ContainerIdList::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void ContainerIdList::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.ContainerIdList.node_id)
}

// repeated string container_ids = 2;
inline int ContainerIdList::_internal_container_ids_size() const {
  return container_ids_.size();
}
inline int ContainerIdList::container_ids_size() const {
  return _internal_container_ids_size();
}
inline void ContainerIdList::clear_container_ids() {
  container_ids_.Clear();
}
inline std::string* ContainerIdList::add_container_ids() {
  // @@protoc_insertion_point(field_add_mutable:container.ContainerIdList.container_ids)
  return _internal_add_container_ids();
}
inline const std::string& ContainerIdList::_internal_container_ids(int index) const {
  return container_ids_.Get(index);
}
inline const std::string& ContainerIdList::container_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.ContainerIdList.container_ids)
  return _internal_container_ids(index);
}
inline std::string* ContainerIdList::mutable_container_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.ContainerIdList.container_ids)
  return container_ids_.Mutable(index);
}
inline void ContainerIdList::set_container_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.ContainerIdList.container_ids)
  container_ids_.Mutable(index)->assign(value);
}
inline void ContainerIdList::set_container_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.ContainerIdList.container_ids)
  container_ids_.Mutable(index)->assign(std::move(value));
}
inline void ContainerIdList::set_container_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  container_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.ContainerIdList.container_ids)
}
inline void ContainerIdList::set_container_ids(int index, const char* value, size_t size) {
  container_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.ContainerIdList.container_ids)
}
inline std::string* ContainerIdList::_internal_add_container_ids() {
  return container_ids_.Add();
}
inline void ContainerIdList::add_container_ids(const std::string& value) {
  container_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.ContainerIdList.container_ids)
}
inline void ContainerIdList::add_container_ids(std::string&& value) {
  container_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.ContainerIdList.container_ids)
}
inline void ContainerIdList::add_container_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  container_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.ContainerIdList.container_ids)
}
inline void ContainerIdList::add_container_ids(const char* value, size_t size) {
  container_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.ContainerIdList.container_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContainerIdList::container_ids() const {
  // @@protoc_insertion_point(field_list:container.ContainerIdList.container_ids)
  return container_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContainerIdList::mutable_container_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.ContainerIdList.container_ids)
  return &container_ids_;
}

// -------------------------------------------------------------------

// Mount

// string type = 1;
inline void Mount::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mount::type() const {
  // @@protoc_insertion_point(field_get:container.Mount.type)
  return _internal_type();
}
inline void Mount::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:container.Mount.type)
}
inline std::string* Mount::mutable_type() {
  // @@protoc_insertion_point(field_mutable:container.Mount.type)
  return _internal_mutable_type();
}
inline const std::string& Mount::_internal_type() const {
  return type_.Get();
}
inline void Mount::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mount::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.Mount.type)
}
inline void Mount::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.Mount.type)
}
inline void Mount::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.Mount.type)
}
inline std::string* Mount::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mount::release_type() {
  // @@protoc_insertion_point(field_release:container.Mount.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mount::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.Mount.type)
}
inline std::string* Mount::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.Mount.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mount::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.Mount.type)
}

// string source = 2;
inline void Mount::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mount::source() const {
  // @@protoc_insertion_point(field_get:container.Mount.source)
  return _internal_source();
}
inline void Mount::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:container.Mount.source)
}
inline std::string* Mount::mutable_source() {
  // @@protoc_insertion_point(field_mutable:container.Mount.source)
  return _internal_mutable_source();
}
inline const std::string& Mount::_internal_source() const {
  return source_.Get();
}
inline void Mount::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mount::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.Mount.source)
}
inline void Mount::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.Mount.source)
}
inline void Mount::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.Mount.source)
}
inline std::string* Mount::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mount::release_source() {
  // @@protoc_insertion_point(field_release:container.Mount.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mount::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.Mount.source)
}
inline std::string* Mount::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.Mount.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mount::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.Mount.source)
}

// string target = 3;
inline void Mount::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mount::target() const {
  // @@protoc_insertion_point(field_get:container.Mount.target)
  return _internal_target();
}
inline void Mount::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:container.Mount.target)
}
inline std::string* Mount::mutable_target() {
  // @@protoc_insertion_point(field_mutable:container.Mount.target)
  return _internal_mutable_target();
}
inline const std::string& Mount::_internal_target() const {
  return target_.Get();
}
inline void Mount::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mount::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.Mount.target)
}
inline void Mount::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.Mount.target)
}
inline void Mount::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.Mount.target)
}
inline std::string* Mount::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mount::release_target() {
  // @@protoc_insertion_point(field_release:container.Mount.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mount::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.Mount.target)
}
inline std::string* Mount::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.Mount.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mount::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.Mount.target)
}

// bool read_only = 4;
inline void Mount::clear_read_only() {
  read_only_ = false;
}
inline bool Mount::_internal_read_only() const {
  return read_only_;
}
inline bool Mount::read_only() const {
  // @@protoc_insertion_point(field_get:container.Mount.read_only)
  return _internal_read_only();
}
inline void Mount::_internal_set_read_only(bool value) {
  
  read_only_ = value;
}
inline void Mount::set_read_only(bool value) {
  _internal_set_read_only(value);
  // @@protoc_insertion_point(field_set:container.Mount.read_only)
}

// string consistency = 5;
inline void Mount::clear_consistency() {
  consistency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mount::consistency() const {
  // @@protoc_insertion_point(field_get:container.Mount.consistency)
  return _internal_consistency();
}
inline void Mount::set_consistency(const std::string& value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:container.Mount.consistency)
}
inline std::string* Mount::mutable_consistency() {
  // @@protoc_insertion_point(field_mutable:container.Mount.consistency)
  return _internal_mutable_consistency();
}
inline const std::string& Mount::_internal_consistency() const {
  return consistency_.Get();
}
inline void Mount::_internal_set_consistency(const std::string& value) {
  
  consistency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mount::set_consistency(std::string&& value) {
  
  consistency_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.Mount.consistency)
}
inline void Mount::set_consistency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consistency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.Mount.consistency)
}
inline void Mount::set_consistency(const char* value,
    size_t size) {
  
  consistency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.Mount.consistency)
}
inline std::string* Mount::_internal_mutable_consistency() {
  
  return consistency_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mount::release_consistency() {
  // @@protoc_insertion_point(field_release:container.Mount.consistency)
  return consistency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mount::set_allocated_consistency(std::string* consistency) {
  if (consistency != nullptr) {
    
  } else {
    
  }
  consistency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consistency,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.Mount.consistency)
}
inline std::string* Mount::unsafe_arena_release_consistency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.Mount.consistency)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return consistency_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mount::unsafe_arena_set_allocated_consistency(
    std::string* consistency) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (consistency != nullptr) {
    
  } else {
    
  }
  consistency_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      consistency, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.Mount.consistency)
}

// -------------------------------------------------------------------

// RestartPolicy

// string name = 1;
inline void RestartPolicy::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestartPolicy::name() const {
  // @@protoc_insertion_point(field_get:container.RestartPolicy.name)
  return _internal_name();
}
inline void RestartPolicy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:container.RestartPolicy.name)
}
inline std::string* RestartPolicy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:container.RestartPolicy.name)
  return _internal_mutable_name();
}
inline const std::string& RestartPolicy::_internal_name() const {
  return name_.Get();
}
inline void RestartPolicy::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestartPolicy::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.RestartPolicy.name)
}
inline void RestartPolicy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.RestartPolicy.name)
}
inline void RestartPolicy::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.RestartPolicy.name)
}
inline std::string* RestartPolicy::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestartPolicy::release_name() {
  // @@protoc_insertion_point(field_release:container.RestartPolicy.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestartPolicy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.RestartPolicy.name)
}
inline std::string* RestartPolicy::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.RestartPolicy.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestartPolicy::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.RestartPolicy.name)
}

// int32 max_retry = 2;
inline void RestartPolicy::clear_max_retry() {
  max_retry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestartPolicy::_internal_max_retry() const {
  return max_retry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestartPolicy::max_retry() const {
  // @@protoc_insertion_point(field_get:container.RestartPolicy.max_retry)
  return _internal_max_retry();
}
inline void RestartPolicy::_internal_set_max_retry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_retry_ = value;
}
inline void RestartPolicy::set_max_retry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_retry(value);
  // @@protoc_insertion_point(field_set:container.RestartPolicy.max_retry)
}

// -------------------------------------------------------------------

// DeviceMapping

// string path_on_host = 1;
inline void DeviceMapping::clear_path_on_host() {
  path_on_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceMapping::path_on_host() const {
  // @@protoc_insertion_point(field_get:container.DeviceMapping.path_on_host)
  return _internal_path_on_host();
}
inline void DeviceMapping::set_path_on_host(const std::string& value) {
  _internal_set_path_on_host(value);
  // @@protoc_insertion_point(field_set:container.DeviceMapping.path_on_host)
}
inline std::string* DeviceMapping::mutable_path_on_host() {
  // @@protoc_insertion_point(field_mutable:container.DeviceMapping.path_on_host)
  return _internal_mutable_path_on_host();
}
inline const std::string& DeviceMapping::_internal_path_on_host() const {
  return path_on_host_.Get();
}
inline void DeviceMapping::_internal_set_path_on_host(const std::string& value) {
  
  path_on_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceMapping::set_path_on_host(std::string&& value) {
  
  path_on_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.DeviceMapping.path_on_host)
}
inline void DeviceMapping::set_path_on_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_on_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.DeviceMapping.path_on_host)
}
inline void DeviceMapping::set_path_on_host(const char* value,
    size_t size) {
  
  path_on_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.DeviceMapping.path_on_host)
}
inline std::string* DeviceMapping::_internal_mutable_path_on_host() {
  
  return path_on_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceMapping::release_path_on_host() {
  // @@protoc_insertion_point(field_release:container.DeviceMapping.path_on_host)
  return path_on_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceMapping::set_allocated_path_on_host(std::string* path_on_host) {
  if (path_on_host != nullptr) {
    
  } else {
    
  }
  path_on_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path_on_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.DeviceMapping.path_on_host)
}
inline std::string* DeviceMapping::unsafe_arena_release_path_on_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.DeviceMapping.path_on_host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_on_host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceMapping::unsafe_arena_set_allocated_path_on_host(
    std::string* path_on_host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path_on_host != nullptr) {
    
  } else {
    
  }
  path_on_host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path_on_host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.DeviceMapping.path_on_host)
}

// string path_in_container = 2;
inline void DeviceMapping::clear_path_in_container() {
  path_in_container_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceMapping::path_in_container() const {
  // @@protoc_insertion_point(field_get:container.DeviceMapping.path_in_container)
  return _internal_path_in_container();
}
inline void DeviceMapping::set_path_in_container(const std::string& value) {
  _internal_set_path_in_container(value);
  // @@protoc_insertion_point(field_set:container.DeviceMapping.path_in_container)
}
inline std::string* DeviceMapping::mutable_path_in_container() {
  // @@protoc_insertion_point(field_mutable:container.DeviceMapping.path_in_container)
  return _internal_mutable_path_in_container();
}
inline const std::string& DeviceMapping::_internal_path_in_container() const {
  return path_in_container_.Get();
}
inline void DeviceMapping::_internal_set_path_in_container(const std::string& value) {
  
  path_in_container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceMapping::set_path_in_container(std::string&& value) {
  
  path_in_container_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.DeviceMapping.path_in_container)
}
inline void DeviceMapping::set_path_in_container(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_in_container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.DeviceMapping.path_in_container)
}
inline void DeviceMapping::set_path_in_container(const char* value,
    size_t size) {
  
  path_in_container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.DeviceMapping.path_in_container)
}
inline std::string* DeviceMapping::_internal_mutable_path_in_container() {
  
  return path_in_container_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceMapping::release_path_in_container() {
  // @@protoc_insertion_point(field_release:container.DeviceMapping.path_in_container)
  return path_in_container_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceMapping::set_allocated_path_in_container(std::string* path_in_container) {
  if (path_in_container != nullptr) {
    
  } else {
    
  }
  path_in_container_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path_in_container,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.DeviceMapping.path_in_container)
}
inline std::string* DeviceMapping::unsafe_arena_release_path_in_container() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.DeviceMapping.path_in_container)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_in_container_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceMapping::unsafe_arena_set_allocated_path_in_container(
    std::string* path_in_container) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path_in_container != nullptr) {
    
  } else {
    
  }
  path_in_container_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path_in_container, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.DeviceMapping.path_in_container)
}

// string cgroup_permissions = 3;
inline void DeviceMapping::clear_cgroup_permissions() {
  cgroup_permissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceMapping::cgroup_permissions() const {
  // @@protoc_insertion_point(field_get:container.DeviceMapping.cgroup_permissions)
  return _internal_cgroup_permissions();
}
inline void DeviceMapping::set_cgroup_permissions(const std::string& value) {
  _internal_set_cgroup_permissions(value);
  // @@protoc_insertion_point(field_set:container.DeviceMapping.cgroup_permissions)
}
inline std::string* DeviceMapping::mutable_cgroup_permissions() {
  // @@protoc_insertion_point(field_mutable:container.DeviceMapping.cgroup_permissions)
  return _internal_mutable_cgroup_permissions();
}
inline const std::string& DeviceMapping::_internal_cgroup_permissions() const {
  return cgroup_permissions_.Get();
}
inline void DeviceMapping::_internal_set_cgroup_permissions(const std::string& value) {
  
  cgroup_permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceMapping::set_cgroup_permissions(std::string&& value) {
  
  cgroup_permissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.DeviceMapping.cgroup_permissions)
}
inline void DeviceMapping::set_cgroup_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cgroup_permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.DeviceMapping.cgroup_permissions)
}
inline void DeviceMapping::set_cgroup_permissions(const char* value,
    size_t size) {
  
  cgroup_permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.DeviceMapping.cgroup_permissions)
}
inline std::string* DeviceMapping::_internal_mutable_cgroup_permissions() {
  
  return cgroup_permissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceMapping::release_cgroup_permissions() {
  // @@protoc_insertion_point(field_release:container.DeviceMapping.cgroup_permissions)
  return cgroup_permissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceMapping::set_allocated_cgroup_permissions(std::string* cgroup_permissions) {
  if (cgroup_permissions != nullptr) {
    
  } else {
    
  }
  cgroup_permissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgroup_permissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.DeviceMapping.cgroup_permissions)
}
inline std::string* DeviceMapping::unsafe_arena_release_cgroup_permissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.DeviceMapping.cgroup_permissions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cgroup_permissions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceMapping::unsafe_arena_set_allocated_cgroup_permissions(
    std::string* cgroup_permissions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cgroup_permissions != nullptr) {
    
  } else {
    
  }
  cgroup_permissions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cgroup_permissions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.DeviceMapping.cgroup_permissions)
}

// -------------------------------------------------------------------

// ResourceConfig

// int64 nano_cpus = 1;
inline void ResourceConfig::clear_nano_cpus() {
  nano_cpus_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::_internal_nano_cpus() const {
  return nano_cpus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::nano_cpus() const {
  // @@protoc_insertion_point(field_get:container.ResourceConfig.nano_cpus)
  return _internal_nano_cpus();
}
inline void ResourceConfig::_internal_set_nano_cpus(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nano_cpus_ = value;
}
inline void ResourceConfig::set_nano_cpus(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nano_cpus(value);
  // @@protoc_insertion_point(field_set:container.ResourceConfig.nano_cpus)
}

// int64 cpu_shares = 2;
inline void ResourceConfig::clear_cpu_shares() {
  cpu_shares_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::_internal_cpu_shares() const {
  return cpu_shares_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::cpu_shares() const {
  // @@protoc_insertion_point(field_get:container.ResourceConfig.cpu_shares)
  return _internal_cpu_shares();
}
inline void ResourceConfig::_internal_set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_shares_ = value;
}
inline void ResourceConfig::set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_shares(value);
  // @@protoc_insertion_point(field_set:container.ResourceConfig.cpu_shares)
}

// int64 mem_limit = 11;
inline void ResourceConfig::clear_mem_limit() {
  mem_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::_internal_mem_limit() const {
  return mem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::mem_limit() const {
  // @@protoc_insertion_point(field_get:container.ResourceConfig.mem_limit)
  return _internal_mem_limit();
}
inline void ResourceConfig::_internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mem_limit_ = value;
}
inline void ResourceConfig::set_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mem_limit(value);
  // @@protoc_insertion_point(field_set:container.ResourceConfig.mem_limit)
}

// int64 mem_soft_limit = 12;
inline void ResourceConfig::clear_mem_soft_limit() {
  mem_soft_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::_internal_mem_soft_limit() const {
  return mem_soft_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceConfig::mem_soft_limit() const {
  // @@protoc_insertion_point(field_get:container.ResourceConfig.mem_soft_limit)
  return _internal_mem_soft_limit();
}
inline void ResourceConfig::_internal_set_mem_soft_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mem_soft_limit_ = value;
}
inline void ResourceConfig::set_mem_soft_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mem_soft_limit(value);
  // @@protoc_insertion_point(field_set:container.ResourceConfig.mem_soft_limit)
}

// repeated .container.DeviceMapping devices = 101;
inline int ResourceConfig::_internal_devices_size() const {
  return devices_.size();
}
inline int ResourceConfig::devices_size() const {
  return _internal_devices_size();
}
inline void ResourceConfig::clear_devices() {
  devices_.Clear();
}
inline ::container::DeviceMapping* ResourceConfig::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:container.ResourceConfig.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::DeviceMapping >*
ResourceConfig::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:container.ResourceConfig.devices)
  return &devices_;
}
inline const ::container::DeviceMapping& ResourceConfig::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::container::DeviceMapping& ResourceConfig::devices(int index) const {
  // @@protoc_insertion_point(field_get:container.ResourceConfig.devices)
  return _internal_devices(index);
}
inline ::container::DeviceMapping* ResourceConfig::_internal_add_devices() {
  return devices_.Add();
}
inline ::container::DeviceMapping* ResourceConfig::add_devices() {
  // @@protoc_insertion_point(field_add:container.ResourceConfig.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::DeviceMapping >&
ResourceConfig::devices() const {
  // @@protoc_insertion_point(field_list:container.ResourceConfig.devices)
  return devices_;
}

// -------------------------------------------------------------------

// HostConfig

// string network_mode = 1;
inline void HostConfig::clear_network_mode() {
  network_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostConfig::network_mode() const {
  // @@protoc_insertion_point(field_get:container.HostConfig.network_mode)
  return _internal_network_mode();
}
inline void HostConfig::set_network_mode(const std::string& value) {
  _internal_set_network_mode(value);
  // @@protoc_insertion_point(field_set:container.HostConfig.network_mode)
}
inline std::string* HostConfig::mutable_network_mode() {
  // @@protoc_insertion_point(field_mutable:container.HostConfig.network_mode)
  return _internal_mutable_network_mode();
}
inline const std::string& HostConfig::_internal_network_mode() const {
  return network_mode_.Get();
}
inline void HostConfig::_internal_set_network_mode(const std::string& value) {
  
  network_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostConfig::set_network_mode(std::string&& value) {
  
  network_mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.HostConfig.network_mode)
}
inline void HostConfig::set_network_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.HostConfig.network_mode)
}
inline void HostConfig::set_network_mode(const char* value,
    size_t size) {
  
  network_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.HostConfig.network_mode)
}
inline std::string* HostConfig::_internal_mutable_network_mode() {
  
  return network_mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostConfig::release_network_mode() {
  // @@protoc_insertion_point(field_release:container.HostConfig.network_mode)
  return network_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostConfig::set_allocated_network_mode(std::string* network_mode) {
  if (network_mode != nullptr) {
    
  } else {
    
  }
  network_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.HostConfig.network_mode)
}
inline std::string* HostConfig::unsafe_arena_release_network_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.HostConfig.network_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return network_mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostConfig::unsafe_arena_set_allocated_network_mode(
    std::string* network_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (network_mode != nullptr) {
    
  } else {
    
  }
  network_mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      network_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.HostConfig.network_mode)
}

// .container.RestartPolicy restart_policy = 2;
inline bool HostConfig::_internal_has_restart_policy() const {
  return this != internal_default_instance() && restart_policy_ != nullptr;
}
inline bool HostConfig::has_restart_policy() const {
  return _internal_has_restart_policy();
}
inline void HostConfig::clear_restart_policy() {
  if (GetArena() == nullptr && restart_policy_ != nullptr) {
    delete restart_policy_;
  }
  restart_policy_ = nullptr;
}
inline const ::container::RestartPolicy& HostConfig::_internal_restart_policy() const {
  const ::container::RestartPolicy* p = restart_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::RestartPolicy*>(
      &::container::_RestartPolicy_default_instance_);
}
inline const ::container::RestartPolicy& HostConfig::restart_policy() const {
  // @@protoc_insertion_point(field_get:container.HostConfig.restart_policy)
  return _internal_restart_policy();
}
inline void HostConfig::unsafe_arena_set_allocated_restart_policy(
    ::container::RestartPolicy* restart_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_policy_);
  }
  restart_policy_ = restart_policy;
  if (restart_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.HostConfig.restart_policy)
}
inline ::container::RestartPolicy* HostConfig::release_restart_policy() {
  auto temp = unsafe_arena_release_restart_policy();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::RestartPolicy* HostConfig::unsafe_arena_release_restart_policy() {
  // @@protoc_insertion_point(field_release:container.HostConfig.restart_policy)
  
  ::container::RestartPolicy* temp = restart_policy_;
  restart_policy_ = nullptr;
  return temp;
}
inline ::container::RestartPolicy* HostConfig::_internal_mutable_restart_policy() {
  
  if (restart_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::RestartPolicy>(GetArena());
    restart_policy_ = p;
  }
  return restart_policy_;
}
inline ::container::RestartPolicy* HostConfig::mutable_restart_policy() {
  // @@protoc_insertion_point(field_mutable:container.HostConfig.restart_policy)
  return _internal_mutable_restart_policy();
}
inline void HostConfig::set_allocated_restart_policy(::container::RestartPolicy* restart_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete restart_policy_;
  }
  if (restart_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(restart_policy);
    if (message_arena != submessage_arena) {
      restart_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_policy, submessage_arena);
    }
    
  } else {
    
  }
  restart_policy_ = restart_policy;
  // @@protoc_insertion_point(field_set_allocated:container.HostConfig.restart_policy)
}

// bool auto_remove = 3;
inline void HostConfig::clear_auto_remove() {
  auto_remove_ = false;
}
inline bool HostConfig::_internal_auto_remove() const {
  return auto_remove_;
}
inline bool HostConfig::auto_remove() const {
  // @@protoc_insertion_point(field_get:container.HostConfig.auto_remove)
  return _internal_auto_remove();
}
inline void HostConfig::_internal_set_auto_remove(bool value) {
  
  auto_remove_ = value;
}
inline void HostConfig::set_auto_remove(bool value) {
  _internal_set_auto_remove(value);
  // @@protoc_insertion_point(field_set:container.HostConfig.auto_remove)
}

// string ipc_mode = 4;
inline void HostConfig::clear_ipc_mode() {
  ipc_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostConfig::ipc_mode() const {
  // @@protoc_insertion_point(field_get:container.HostConfig.ipc_mode)
  return _internal_ipc_mode();
}
inline void HostConfig::set_ipc_mode(const std::string& value) {
  _internal_set_ipc_mode(value);
  // @@protoc_insertion_point(field_set:container.HostConfig.ipc_mode)
}
inline std::string* HostConfig::mutable_ipc_mode() {
  // @@protoc_insertion_point(field_mutable:container.HostConfig.ipc_mode)
  return _internal_mutable_ipc_mode();
}
inline const std::string& HostConfig::_internal_ipc_mode() const {
  return ipc_mode_.Get();
}
inline void HostConfig::_internal_set_ipc_mode(const std::string& value) {
  
  ipc_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostConfig::set_ipc_mode(std::string&& value) {
  
  ipc_mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.HostConfig.ipc_mode)
}
inline void HostConfig::set_ipc_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipc_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.HostConfig.ipc_mode)
}
inline void HostConfig::set_ipc_mode(const char* value,
    size_t size) {
  
  ipc_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.HostConfig.ipc_mode)
}
inline std::string* HostConfig::_internal_mutable_ipc_mode() {
  
  return ipc_mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostConfig::release_ipc_mode() {
  // @@protoc_insertion_point(field_release:container.HostConfig.ipc_mode)
  return ipc_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostConfig::set_allocated_ipc_mode(std::string* ipc_mode) {
  if (ipc_mode != nullptr) {
    
  } else {
    
  }
  ipc_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipc_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.HostConfig.ipc_mode)
}
inline std::string* HostConfig::unsafe_arena_release_ipc_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.HostConfig.ipc_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipc_mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostConfig::unsafe_arena_set_allocated_ipc_mode(
    std::string* ipc_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipc_mode != nullptr) {
    
  } else {
    
  }
  ipc_mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipc_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.HostConfig.ipc_mode)
}

// repeated .container.Mount mounts = 5;
inline int HostConfig::_internal_mounts_size() const {
  return mounts_.size();
}
inline int HostConfig::mounts_size() const {
  return _internal_mounts_size();
}
inline void HostConfig::clear_mounts() {
  mounts_.Clear();
}
inline ::container::Mount* HostConfig::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:container.HostConfig.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >*
HostConfig::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:container.HostConfig.mounts)
  return &mounts_;
}
inline const ::container::Mount& HostConfig::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::container::Mount& HostConfig::mounts(int index) const {
  // @@protoc_insertion_point(field_get:container.HostConfig.mounts)
  return _internal_mounts(index);
}
inline ::container::Mount* HostConfig::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::container::Mount* HostConfig::add_mounts() {
  // @@protoc_insertion_point(field_add:container.HostConfig.mounts)
  return _internal_add_mounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >&
HostConfig::mounts() const {
  // @@protoc_insertion_point(field_list:container.HostConfig.mounts)
  return mounts_;
}

// bool privileged = 6;
inline void HostConfig::clear_privileged() {
  privileged_ = false;
}
inline bool HostConfig::_internal_privileged() const {
  return privileged_;
}
inline bool HostConfig::privileged() const {
  // @@protoc_insertion_point(field_get:container.HostConfig.privileged)
  return _internal_privileged();
}
inline void HostConfig::_internal_set_privileged(bool value) {
  
  privileged_ = value;
}
inline void HostConfig::set_privileged(bool value) {
  _internal_set_privileged(value);
  // @@protoc_insertion_point(field_set:container.HostConfig.privileged)
}

// .container.ResourceConfig resource_config = 7;
inline bool HostConfig::_internal_has_resource_config() const {
  return this != internal_default_instance() && resource_config_ != nullptr;
}
inline bool HostConfig::has_resource_config() const {
  return _internal_has_resource_config();
}
inline void HostConfig::clear_resource_config() {
  if (GetArena() == nullptr && resource_config_ != nullptr) {
    delete resource_config_;
  }
  resource_config_ = nullptr;
}
inline const ::container::ResourceConfig& HostConfig::_internal_resource_config() const {
  const ::container::ResourceConfig* p = resource_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ResourceConfig*>(
      &::container::_ResourceConfig_default_instance_);
}
inline const ::container::ResourceConfig& HostConfig::resource_config() const {
  // @@protoc_insertion_point(field_get:container.HostConfig.resource_config)
  return _internal_resource_config();
}
inline void HostConfig::unsafe_arena_set_allocated_resource_config(
    ::container::ResourceConfig* resource_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_config_);
  }
  resource_config_ = resource_config;
  if (resource_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.HostConfig.resource_config)
}
inline ::container::ResourceConfig* HostConfig::release_resource_config() {
  auto temp = unsafe_arena_release_resource_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ResourceConfig* HostConfig::unsafe_arena_release_resource_config() {
  // @@protoc_insertion_point(field_release:container.HostConfig.resource_config)
  
  ::container::ResourceConfig* temp = resource_config_;
  resource_config_ = nullptr;
  return temp;
}
inline ::container::ResourceConfig* HostConfig::_internal_mutable_resource_config() {
  
  if (resource_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ResourceConfig>(GetArena());
    resource_config_ = p;
  }
  return resource_config_;
}
inline ::container::ResourceConfig* HostConfig::mutable_resource_config() {
  // @@protoc_insertion_point(field_mutable:container.HostConfig.resource_config)
  return _internal_mutable_resource_config();
}
inline void HostConfig::set_allocated_resource_config(::container::ResourceConfig* resource_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_config_;
  }
  if (resource_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_config);
    if (message_arena != submessage_arena) {
      resource_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_config, submessage_arena);
    }
    
  } else {
    
  }
  resource_config_ = resource_config;
  // @@protoc_insertion_point(field_set_allocated:container.HostConfig.resource_config)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerConfig

// string hostname = 1;
inline void ContainerConfig::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::hostname() const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.hostname)
  return _internal_hostname();
}
inline void ContainerConfig::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:container.ContainerConfig.hostname)
}
inline std::string* ContainerConfig::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ContainerConfig::_internal_hostname() const {
  return hostname_.Get();
}
inline void ContainerConfig::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerConfig.hostname)
}
inline void ContainerConfig::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.hostname)
}
inline void ContainerConfig::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.hostname)
}
inline std::string* ContainerConfig::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_hostname() {
  // @@protoc_insertion_point(field_release:container.ContainerConfig.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerConfig.hostname)
}
inline std::string* ContainerConfig::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerConfig.hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerConfig.hostname)
}

// string domain_name = 2;
inline void ContainerConfig::clear_domain_name() {
  domain_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::domain_name() const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.domain_name)
  return _internal_domain_name();
}
inline void ContainerConfig::set_domain_name(const std::string& value) {
  _internal_set_domain_name(value);
  // @@protoc_insertion_point(field_set:container.ContainerConfig.domain_name)
}
inline std::string* ContainerConfig::mutable_domain_name() {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.domain_name)
  return _internal_mutable_domain_name();
}
inline const std::string& ContainerConfig::_internal_domain_name() const {
  return domain_name_.Get();
}
inline void ContainerConfig::_internal_set_domain_name(const std::string& value) {
  
  domain_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_domain_name(std::string&& value) {
  
  domain_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerConfig.domain_name)
}
inline void ContainerConfig::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.domain_name)
}
inline void ContainerConfig::set_domain_name(const char* value,
    size_t size) {
  
  domain_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.domain_name)
}
inline std::string* ContainerConfig::_internal_mutable_domain_name() {
  
  return domain_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_domain_name() {
  // @@protoc_insertion_point(field_release:container.ContainerConfig.domain_name)
  return domain_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_domain_name(std::string* domain_name) {
  if (domain_name != nullptr) {
    
  } else {
    
  }
  domain_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerConfig.domain_name)
}
inline std::string* ContainerConfig::unsafe_arena_release_domain_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerConfig.domain_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return domain_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_domain_name(
    std::string* domain_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (domain_name != nullptr) {
    
  } else {
    
  }
  domain_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domain_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerConfig.domain_name)
}

// string user = 3;
inline void ContainerConfig::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::user() const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.user)
  return _internal_user();
}
inline void ContainerConfig::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:container.ContainerConfig.user)
}
inline std::string* ContainerConfig::mutable_user() {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.user)
  return _internal_mutable_user();
}
inline const std::string& ContainerConfig::_internal_user() const {
  return user_.Get();
}
inline void ContainerConfig::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerConfig.user)
}
inline void ContainerConfig::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.user)
}
inline void ContainerConfig::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.user)
}
inline std::string* ContainerConfig::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_user() {
  // @@protoc_insertion_point(field_release:container.ContainerConfig.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerConfig.user)
}
inline std::string* ContainerConfig::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerConfig.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerConfig.user)
}

// map<string, string> env = 4;
inline int ContainerConfig::_internal_env_size() const {
  return env_.size();
}
inline int ContainerConfig::env_size() const {
  return _internal_env_size();
}
inline void ContainerConfig::clear_env() {
  env_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::_internal_env() const {
  return env_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::env() const {
  // @@protoc_insertion_point(field_map:container.ContainerConfig.env)
  return _internal_env();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::_internal_mutable_env() {
  return env_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::mutable_env() {
  // @@protoc_insertion_point(field_mutable_map:container.ContainerConfig.env)
  return _internal_mutable_env();
}

// string image = 5;
inline void ContainerConfig::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::image() const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.image)
  return _internal_image();
}
inline void ContainerConfig::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:container.ContainerConfig.image)
}
inline std::string* ContainerConfig::mutable_image() {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.image)
  return _internal_mutable_image();
}
inline const std::string& ContainerConfig::_internal_image() const {
  return image_.Get();
}
inline void ContainerConfig::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerConfig.image)
}
inline void ContainerConfig::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.image)
}
inline void ContainerConfig::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.image)
}
inline std::string* ContainerConfig::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_image() {
  // @@protoc_insertion_point(field_release:container.ContainerConfig.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerConfig.image)
}
inline std::string* ContainerConfig::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerConfig.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerConfig.image)
}

// string working_dir = 6;
inline void ContainerConfig::clear_working_dir() {
  working_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::working_dir() const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.working_dir)
  return _internal_working_dir();
}
inline void ContainerConfig::set_working_dir(const std::string& value) {
  _internal_set_working_dir(value);
  // @@protoc_insertion_point(field_set:container.ContainerConfig.working_dir)
}
inline std::string* ContainerConfig::mutable_working_dir() {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.working_dir)
  return _internal_mutable_working_dir();
}
inline const std::string& ContainerConfig::_internal_working_dir() const {
  return working_dir_.Get();
}
inline void ContainerConfig::_internal_set_working_dir(const std::string& value) {
  
  working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_working_dir(std::string&& value) {
  
  working_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ContainerConfig.working_dir)
}
inline void ContainerConfig::set_working_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.working_dir)
}
inline void ContainerConfig::set_working_dir(const char* value,
    size_t size) {
  
  working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.working_dir)
}
inline std::string* ContainerConfig::_internal_mutable_working_dir() {
  
  return working_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_working_dir() {
  // @@protoc_insertion_point(field_release:container.ContainerConfig.working_dir)
  return working_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_working_dir(std::string* working_dir) {
  if (working_dir != nullptr) {
    
  } else {
    
  }
  working_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ContainerConfig.working_dir)
}
inline std::string* ContainerConfig::unsafe_arena_release_working_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ContainerConfig.working_dir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return working_dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_working_dir(
    std::string* working_dir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (working_dir != nullptr) {
    
  } else {
    
  }
  working_dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      working_dir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ContainerConfig.working_dir)
}

// repeated string entrypoint = 7;
inline int ContainerConfig::_internal_entrypoint_size() const {
  return entrypoint_.size();
}
inline int ContainerConfig::entrypoint_size() const {
  return _internal_entrypoint_size();
}
inline void ContainerConfig::clear_entrypoint() {
  entrypoint_.Clear();
}
inline std::string* ContainerConfig::add_entrypoint() {
  // @@protoc_insertion_point(field_add_mutable:container.ContainerConfig.entrypoint)
  return _internal_add_entrypoint();
}
inline const std::string& ContainerConfig::_internal_entrypoint(int index) const {
  return entrypoint_.Get(index);
}
inline const std::string& ContainerConfig::entrypoint(int index) const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.entrypoint)
  return _internal_entrypoint(index);
}
inline std::string* ContainerConfig::mutable_entrypoint(int index) {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.entrypoint)
  return entrypoint_.Mutable(index);
}
inline void ContainerConfig::set_entrypoint(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.ContainerConfig.entrypoint)
  entrypoint_.Mutable(index)->assign(value);
}
inline void ContainerConfig::set_entrypoint(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.ContainerConfig.entrypoint)
  entrypoint_.Mutable(index)->assign(std::move(value));
}
inline void ContainerConfig::set_entrypoint(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entrypoint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.entrypoint)
}
inline void ContainerConfig::set_entrypoint(int index, const char* value, size_t size) {
  entrypoint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.entrypoint)
}
inline std::string* ContainerConfig::_internal_add_entrypoint() {
  return entrypoint_.Add();
}
inline void ContainerConfig::add_entrypoint(const std::string& value) {
  entrypoint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.ContainerConfig.entrypoint)
}
inline void ContainerConfig::add_entrypoint(std::string&& value) {
  entrypoint_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.ContainerConfig.entrypoint)
}
inline void ContainerConfig::add_entrypoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entrypoint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.ContainerConfig.entrypoint)
}
inline void ContainerConfig::add_entrypoint(const char* value, size_t size) {
  entrypoint_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.ContainerConfig.entrypoint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContainerConfig::entrypoint() const {
  // @@protoc_insertion_point(field_list:container.ContainerConfig.entrypoint)
  return entrypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContainerConfig::mutable_entrypoint() {
  // @@protoc_insertion_point(field_mutable_list:container.ContainerConfig.entrypoint)
  return &entrypoint_;
}

// repeated string cmd = 8;
inline int ContainerConfig::_internal_cmd_size() const {
  return cmd_.size();
}
inline int ContainerConfig::cmd_size() const {
  return _internal_cmd_size();
}
inline void ContainerConfig::clear_cmd() {
  cmd_.Clear();
}
inline std::string* ContainerConfig::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:container.ContainerConfig.cmd)
  return _internal_add_cmd();
}
inline const std::string& ContainerConfig::_internal_cmd(int index) const {
  return cmd_.Get(index);
}
inline const std::string& ContainerConfig::cmd(int index) const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.cmd)
  return _internal_cmd(index);
}
inline std::string* ContainerConfig::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:container.ContainerConfig.cmd)
  return cmd_.Mutable(index);
}
inline void ContainerConfig::set_cmd(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.ContainerConfig.cmd)
  cmd_.Mutable(index)->assign(value);
}
inline void ContainerConfig::set_cmd(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.ContainerConfig.cmd)
  cmd_.Mutable(index)->assign(std::move(value));
}
inline void ContainerConfig::set_cmd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.ContainerConfig.cmd)
}
inline void ContainerConfig::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.ContainerConfig.cmd)
}
inline std::string* ContainerConfig::_internal_add_cmd() {
  return cmd_.Add();
}
inline void ContainerConfig::add_cmd(const std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.ContainerConfig.cmd)
}
inline void ContainerConfig::add_cmd(std::string&& value) {
  cmd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.ContainerConfig.cmd)
}
inline void ContainerConfig::add_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.ContainerConfig.cmd)
}
inline void ContainerConfig::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.ContainerConfig.cmd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContainerConfig::cmd() const {
  // @@protoc_insertion_point(field_list:container.ContainerConfig.cmd)
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContainerConfig::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:container.ContainerConfig.cmd)
  return &cmd_;
}

// bool network_disabled = 9;
inline void ContainerConfig::clear_network_disabled() {
  network_disabled_ = false;
}
inline bool ContainerConfig::_internal_network_disabled() const {
  return network_disabled_;
}
inline bool ContainerConfig::network_disabled() const {
  // @@protoc_insertion_point(field_get:container.ContainerConfig.network_disabled)
  return _internal_network_disabled();
}
inline void ContainerConfig::_internal_set_network_disabled(bool value) {
  
  network_disabled_ = value;
}
inline void ContainerConfig::set_network_disabled(bool value) {
  _internal_set_network_disabled(value);
  // @@protoc_insertion_point(field_set:container.ContainerConfig.network_disabled)
}

// map<string, string> labels = 10;
inline int ContainerConfig::_internal_labels_size() const {
  return labels_.size();
}
inline int ContainerConfig::labels_size() const {
  return _internal_labels_size();
}
inline void ContainerConfig::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::labels() const {
  // @@protoc_insertion_point(field_map:container.ContainerConfig.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:container.ContainerConfig.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// CpuStat

// double core_used = 1;
inline void CpuStat::clear_core_used() {
  core_used_ = 0;
}
inline double CpuStat::_internal_core_used() const {
  return core_used_;
}
inline double CpuStat::core_used() const {
  // @@protoc_insertion_point(field_get:container.CpuStat.core_used)
  return _internal_core_used();
}
inline void CpuStat::_internal_set_core_used(double value) {
  
  core_used_ = value;
}
inline void CpuStat::set_core_used(double value) {
  _internal_set_core_used(value);
  // @@protoc_insertion_point(field_set:container.CpuStat.core_used)
}

// -------------------------------------------------------------------

// MemoryStat

// uint64 used = 1;
inline void MemoryStat::clear_used() {
  used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::used() const {
  // @@protoc_insertion_point(field_get:container.MemoryStat.used)
  return _internal_used();
}
inline void MemoryStat::_internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_ = value;
}
inline void MemoryStat::set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:container.MemoryStat.used)
}

// uint64 limit = 2;
inline void MemoryStat::clear_limit() {
  limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryStat::limit() const {
  // @@protoc_insertion_point(field_get:container.MemoryStat.limit)
  return _internal_limit();
}
inline void MemoryStat::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void MemoryStat::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:container.MemoryStat.limit)
}

// double percentage = 3;
inline void MemoryStat::clear_percentage() {
  percentage_ = 0;
}
inline double MemoryStat::_internal_percentage() const {
  return percentage_;
}
inline double MemoryStat::percentage() const {
  // @@protoc_insertion_point(field_get:container.MemoryStat.percentage)
  return _internal_percentage();
}
inline void MemoryStat::_internal_set_percentage(double value) {
  
  percentage_ = value;
}
inline void MemoryStat::set_percentage(double value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:container.MemoryStat.percentage)
}

// -------------------------------------------------------------------

// BlockStat

// uint64 read = 1;
inline void BlockStat::clear_read() {
  read_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockStat::_internal_read() const {
  return read_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockStat::read() const {
  // @@protoc_insertion_point(field_get:container.BlockStat.read)
  return _internal_read();
}
inline void BlockStat::_internal_set_read(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  read_ = value;
}
inline void BlockStat::set_read(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:container.BlockStat.read)
}

// uint64 write = 2;
inline void BlockStat::clear_write() {
  write_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockStat::_internal_write() const {
  return write_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockStat::write() const {
  // @@protoc_insertion_point(field_get:container.BlockStat.write)
  return _internal_write();
}
inline void BlockStat::_internal_set_write(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  write_ = value;
}
inline void BlockStat::set_write(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_write(value);
  // @@protoc_insertion_point(field_set:container.BlockStat.write)
}

// -------------------------------------------------------------------

// NetworkStats

// uint64 rx = 1;
inline void NetworkStats::clear_rx() {
  rx_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkStats::_internal_rx() const {
  return rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkStats::rx() const {
  // @@protoc_insertion_point(field_get:container.NetworkStats.rx)
  return _internal_rx();
}
inline void NetworkStats::_internal_set_rx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rx_ = value;
}
inline void NetworkStats::set_rx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:container.NetworkStats.rx)
}

// uint64 tx = 2;
inline void NetworkStats::clear_tx() {
  tx_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkStats::_internal_tx() const {
  return tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkStats::tx() const {
  // @@protoc_insertion_point(field_get:container.NetworkStats.tx)
  return _internal_tx();
}
inline void NetworkStats::_internal_set_tx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_ = value;
}
inline void NetworkStats::set_tx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:container.NetworkStats.tx)
}

// -------------------------------------------------------------------

// ResourceStat

// string id = 1;
inline void ResourceStat::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceStat::id() const {
  // @@protoc_insertion_point(field_get:container.ResourceStat.id)
  return _internal_id();
}
inline void ResourceStat::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:container.ResourceStat.id)
}
inline std::string* ResourceStat::mutable_id() {
  // @@protoc_insertion_point(field_mutable:container.ResourceStat.id)
  return _internal_mutable_id();
}
inline const std::string& ResourceStat::_internal_id() const {
  return id_.Get();
}
inline void ResourceStat::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceStat::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ResourceStat.id)
}
inline void ResourceStat::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ResourceStat.id)
}
inline void ResourceStat::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ResourceStat.id)
}
inline std::string* ResourceStat::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceStat::release_id() {
  // @@protoc_insertion_point(field_release:container.ResourceStat.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceStat::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ResourceStat.id)
}
inline std::string* ResourceStat::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ResourceStat.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceStat::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ResourceStat.id)
}

// string state = 2;
inline void ResourceStat::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceStat::state() const {
  // @@protoc_insertion_point(field_get:container.ResourceStat.state)
  return _internal_state();
}
inline void ResourceStat::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:container.ResourceStat.state)
}
inline std::string* ResourceStat::mutable_state() {
  // @@protoc_insertion_point(field_mutable:container.ResourceStat.state)
  return _internal_mutable_state();
}
inline const std::string& ResourceStat::_internal_state() const {
  return state_.Get();
}
inline void ResourceStat::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceStat::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.ResourceStat.state)
}
inline void ResourceStat::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.ResourceStat.state)
}
inline void ResourceStat::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.ResourceStat.state)
}
inline std::string* ResourceStat::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceStat::release_state() {
  // @@protoc_insertion_point(field_release:container.ResourceStat.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceStat::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.ResourceStat.state)
}
inline std::string* ResourceStat::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.ResourceStat.state)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceStat::unsafe_arena_set_allocated_state(
    std::string* state) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state != nullptr) {
    
  } else {
    
  }
  state_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ResourceStat.state)
}

// .container.CpuStat cpu_stat = 3;
inline bool ResourceStat::_internal_has_cpu_stat() const {
  return this != internal_default_instance() && cpu_stat_ != nullptr;
}
inline bool ResourceStat::has_cpu_stat() const {
  return _internal_has_cpu_stat();
}
inline void ResourceStat::clear_cpu_stat() {
  if (GetArena() == nullptr && cpu_stat_ != nullptr) {
    delete cpu_stat_;
  }
  cpu_stat_ = nullptr;
}
inline const ::container::CpuStat& ResourceStat::_internal_cpu_stat() const {
  const ::container::CpuStat* p = cpu_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::CpuStat*>(
      &::container::_CpuStat_default_instance_);
}
inline const ::container::CpuStat& ResourceStat::cpu_stat() const {
  // @@protoc_insertion_point(field_get:container.ResourceStat.cpu_stat)
  return _internal_cpu_stat();
}
inline void ResourceStat::unsafe_arena_set_allocated_cpu_stat(
    ::container::CpuStat* cpu_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_stat_);
  }
  cpu_stat_ = cpu_stat;
  if (cpu_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ResourceStat.cpu_stat)
}
inline ::container::CpuStat* ResourceStat::release_cpu_stat() {
  auto temp = unsafe_arena_release_cpu_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::CpuStat* ResourceStat::unsafe_arena_release_cpu_stat() {
  // @@protoc_insertion_point(field_release:container.ResourceStat.cpu_stat)
  
  ::container::CpuStat* temp = cpu_stat_;
  cpu_stat_ = nullptr;
  return temp;
}
inline ::container::CpuStat* ResourceStat::_internal_mutable_cpu_stat() {
  
  if (cpu_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::CpuStat>(GetArena());
    cpu_stat_ = p;
  }
  return cpu_stat_;
}
inline ::container::CpuStat* ResourceStat::mutable_cpu_stat() {
  // @@protoc_insertion_point(field_mutable:container.ResourceStat.cpu_stat)
  return _internal_mutable_cpu_stat();
}
inline void ResourceStat::set_allocated_cpu_stat(::container::CpuStat* cpu_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpu_stat_;
  }
  if (cpu_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpu_stat);
    if (message_arena != submessage_arena) {
      cpu_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_stat, submessage_arena);
    }
    
  } else {
    
  }
  cpu_stat_ = cpu_stat;
  // @@protoc_insertion_point(field_set_allocated:container.ResourceStat.cpu_stat)
}

// .container.MemoryStat mem_stat = 4;
inline bool ResourceStat::_internal_has_mem_stat() const {
  return this != internal_default_instance() && mem_stat_ != nullptr;
}
inline bool ResourceStat::has_mem_stat() const {
  return _internal_has_mem_stat();
}
inline void ResourceStat::clear_mem_stat() {
  if (GetArena() == nullptr && mem_stat_ != nullptr) {
    delete mem_stat_;
  }
  mem_stat_ = nullptr;
}
inline const ::container::MemoryStat& ResourceStat::_internal_mem_stat() const {
  const ::container::MemoryStat* p = mem_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::MemoryStat*>(
      &::container::_MemoryStat_default_instance_);
}
inline const ::container::MemoryStat& ResourceStat::mem_stat() const {
  // @@protoc_insertion_point(field_get:container.ResourceStat.mem_stat)
  return _internal_mem_stat();
}
inline void ResourceStat::unsafe_arena_set_allocated_mem_stat(
    ::container::MemoryStat* mem_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_stat_);
  }
  mem_stat_ = mem_stat;
  if (mem_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ResourceStat.mem_stat)
}
inline ::container::MemoryStat* ResourceStat::release_mem_stat() {
  auto temp = unsafe_arena_release_mem_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::MemoryStat* ResourceStat::unsafe_arena_release_mem_stat() {
  // @@protoc_insertion_point(field_release:container.ResourceStat.mem_stat)
  
  ::container::MemoryStat* temp = mem_stat_;
  mem_stat_ = nullptr;
  return temp;
}
inline ::container::MemoryStat* ResourceStat::_internal_mutable_mem_stat() {
  
  if (mem_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::MemoryStat>(GetArena());
    mem_stat_ = p;
  }
  return mem_stat_;
}
inline ::container::MemoryStat* ResourceStat::mutable_mem_stat() {
  // @@protoc_insertion_point(field_mutable:container.ResourceStat.mem_stat)
  return _internal_mutable_mem_stat();
}
inline void ResourceStat::set_allocated_mem_stat(::container::MemoryStat* mem_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mem_stat_;
  }
  if (mem_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mem_stat);
    if (message_arena != submessage_arena) {
      mem_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_stat, submessage_arena);
    }
    
  } else {
    
  }
  mem_stat_ = mem_stat;
  // @@protoc_insertion_point(field_set_allocated:container.ResourceStat.mem_stat)
}

// .container.BlockStat block_stat = 5;
inline bool ResourceStat::_internal_has_block_stat() const {
  return this != internal_default_instance() && block_stat_ != nullptr;
}
inline bool ResourceStat::has_block_stat() const {
  return _internal_has_block_stat();
}
inline void ResourceStat::clear_block_stat() {
  if (GetArena() == nullptr && block_stat_ != nullptr) {
    delete block_stat_;
  }
  block_stat_ = nullptr;
}
inline const ::container::BlockStat& ResourceStat::_internal_block_stat() const {
  const ::container::BlockStat* p = block_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::BlockStat*>(
      &::container::_BlockStat_default_instance_);
}
inline const ::container::BlockStat& ResourceStat::block_stat() const {
  // @@protoc_insertion_point(field_get:container.ResourceStat.block_stat)
  return _internal_block_stat();
}
inline void ResourceStat::unsafe_arena_set_allocated_block_stat(
    ::container::BlockStat* block_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_stat_);
  }
  block_stat_ = block_stat;
  if (block_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ResourceStat.block_stat)
}
inline ::container::BlockStat* ResourceStat::release_block_stat() {
  auto temp = unsafe_arena_release_block_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::BlockStat* ResourceStat::unsafe_arena_release_block_stat() {
  // @@protoc_insertion_point(field_release:container.ResourceStat.block_stat)
  
  ::container::BlockStat* temp = block_stat_;
  block_stat_ = nullptr;
  return temp;
}
inline ::container::BlockStat* ResourceStat::_internal_mutable_block_stat() {
  
  if (block_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::BlockStat>(GetArena());
    block_stat_ = p;
  }
  return block_stat_;
}
inline ::container::BlockStat* ResourceStat::mutable_block_stat() {
  // @@protoc_insertion_point(field_mutable:container.ResourceStat.block_stat)
  return _internal_mutable_block_stat();
}
inline void ResourceStat::set_allocated_block_stat(::container::BlockStat* block_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_stat_;
  }
  if (block_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_stat);
    if (message_arena != submessage_arena) {
      block_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_stat, submessage_arena);
    }
    
  } else {
    
  }
  block_stat_ = block_stat;
  // @@protoc_insertion_point(field_set_allocated:container.ResourceStat.block_stat)
}

// .container.NetworkStats net_stat = 6;
inline bool ResourceStat::_internal_has_net_stat() const {
  return this != internal_default_instance() && net_stat_ != nullptr;
}
inline bool ResourceStat::has_net_stat() const {
  return _internal_has_net_stat();
}
inline void ResourceStat::clear_net_stat() {
  if (GetArena() == nullptr && net_stat_ != nullptr) {
    delete net_stat_;
  }
  net_stat_ = nullptr;
}
inline const ::container::NetworkStats& ResourceStat::_internal_net_stat() const {
  const ::container::NetworkStats* p = net_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::NetworkStats*>(
      &::container::_NetworkStats_default_instance_);
}
inline const ::container::NetworkStats& ResourceStat::net_stat() const {
  // @@protoc_insertion_point(field_get:container.ResourceStat.net_stat)
  return _internal_net_stat();
}
inline void ResourceStat::unsafe_arena_set_allocated_net_stat(
    ::container::NetworkStats* net_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_stat_);
  }
  net_stat_ = net_stat;
  if (net_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ResourceStat.net_stat)
}
inline ::container::NetworkStats* ResourceStat::release_net_stat() {
  auto temp = unsafe_arena_release_net_stat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::NetworkStats* ResourceStat::unsafe_arena_release_net_stat() {
  // @@protoc_insertion_point(field_release:container.ResourceStat.net_stat)
  
  ::container::NetworkStats* temp = net_stat_;
  net_stat_ = nullptr;
  return temp;
}
inline ::container::NetworkStats* ResourceStat::_internal_mutable_net_stat() {
  
  if (net_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::NetworkStats>(GetArena());
    net_stat_ = p;
  }
  return net_stat_;
}
inline ::container::NetworkStats* ResourceStat::mutable_net_stat() {
  // @@protoc_insertion_point(field_mutable:container.ResourceStat.net_stat)
  return _internal_mutable_net_stat();
}
inline void ResourceStat::set_allocated_net_stat(::container::NetworkStats* net_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete net_stat_;
  }
  if (net_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(net_stat);
    if (message_arena != submessage_arena) {
      net_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_stat, submessage_arena);
    }
    
  } else {
    
  }
  net_stat_ = net_stat;
  // @@protoc_insertion_point(field_set_allocated:container.ResourceStat.net_stat)
}

// -------------------------------------------------------------------

// NetworkAddress

// string addr = 1;
inline void NetworkAddress::clear_addr() {
  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkAddress::addr() const {
  // @@protoc_insertion_point(field_get:container.NetworkAddress.addr)
  return _internal_addr();
}
inline void NetworkAddress::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:container.NetworkAddress.addr)
}
inline std::string* NetworkAddress::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:container.NetworkAddress.addr)
  return _internal_mutable_addr();
}
inline const std::string& NetworkAddress::_internal_addr() const {
  return addr_.Get();
}
inline void NetworkAddress::_internal_set_addr(const std::string& value) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkAddress::set_addr(std::string&& value) {
  
  addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkAddress.addr)
}
inline void NetworkAddress::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkAddress.addr)
}
inline void NetworkAddress::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkAddress.addr)
}
inline std::string* NetworkAddress::_internal_mutable_addr() {
  
  return addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkAddress::release_addr() {
  // @@protoc_insertion_point(field_release:container.NetworkAddress.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkAddress::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkAddress.addr)
}
inline std::string* NetworkAddress::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkAddress.addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkAddress::unsafe_arena_set_allocated_addr(
    std::string* addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkAddress.addr)
}

// int32 prefix_len = 2;
inline void NetworkAddress::clear_prefix_len() {
  prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkAddress::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkAddress::prefix_len() const {
  // @@protoc_insertion_point(field_get:container.NetworkAddress.prefix_len)
  return _internal_prefix_len();
}
inline void NetworkAddress::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prefix_len_ = value;
}
inline void NetworkAddress::set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:container.NetworkAddress.prefix_len)
}

// -------------------------------------------------------------------

// NetworkSettingBase

// string bridge = 1;
inline void NetworkSettingBase::clear_bridge() {
  bridge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::bridge() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.bridge)
  return _internal_bridge();
}
inline void NetworkSettingBase::set_bridge(const std::string& value) {
  _internal_set_bridge(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.bridge)
}
inline std::string* NetworkSettingBase::mutable_bridge() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.bridge)
  return _internal_mutable_bridge();
}
inline const std::string& NetworkSettingBase::_internal_bridge() const {
  return bridge_.Get();
}
inline void NetworkSettingBase::_internal_set_bridge(const std::string& value) {
  
  bridge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_bridge(std::string&& value) {
  
  bridge_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.bridge)
}
inline void NetworkSettingBase::set_bridge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bridge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.bridge)
}
inline void NetworkSettingBase::set_bridge(const char* value,
    size_t size) {
  
  bridge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.bridge)
}
inline std::string* NetworkSettingBase::_internal_mutable_bridge() {
  
  return bridge_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_bridge() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.bridge)
  return bridge_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_bridge(std::string* bridge) {
  if (bridge != nullptr) {
    
  } else {
    
  }
  bridge_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bridge,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.bridge)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_bridge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.bridge)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bridge_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_bridge(
    std::string* bridge) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bridge != nullptr) {
    
  } else {
    
  }
  bridge_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bridge, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.bridge)
}

// string sandbox_id = 2;
inline void NetworkSettingBase::clear_sandbox_id() {
  sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::sandbox_id() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.sandbox_id)
  return _internal_sandbox_id();
}
inline void NetworkSettingBase::set_sandbox_id(const std::string& value) {
  _internal_set_sandbox_id(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.sandbox_id)
}
inline std::string* NetworkSettingBase::mutable_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.sandbox_id)
  return _internal_mutable_sandbox_id();
}
inline const std::string& NetworkSettingBase::_internal_sandbox_id() const {
  return sandbox_id_.Get();
}
inline void NetworkSettingBase::_internal_set_sandbox_id(const std::string& value) {
  
  sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_sandbox_id(std::string&& value) {
  
  sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.sandbox_id)
}
inline void NetworkSettingBase::set_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.sandbox_id)
}
inline void NetworkSettingBase::set_sandbox_id(const char* value,
    size_t size) {
  
  sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.sandbox_id)
}
inline std::string* NetworkSettingBase::_internal_mutable_sandbox_id() {
  
  return sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_sandbox_id() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.sandbox_id)
  return sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_sandbox_id(std::string* sandbox_id) {
  if (sandbox_id != nullptr) {
    
  } else {
    
  }
  sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.sandbox_id)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_sandbox_id(
    std::string* sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandbox_id != nullptr) {
    
  } else {
    
  }
  sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.sandbox_id)
}

// bool hairpin_mode = 3;
inline void NetworkSettingBase::clear_hairpin_mode() {
  hairpin_mode_ = false;
}
inline bool NetworkSettingBase::_internal_hairpin_mode() const {
  return hairpin_mode_;
}
inline bool NetworkSettingBase::hairpin_mode() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.hairpin_mode)
  return _internal_hairpin_mode();
}
inline void NetworkSettingBase::_internal_set_hairpin_mode(bool value) {
  
  hairpin_mode_ = value;
}
inline void NetworkSettingBase::set_hairpin_mode(bool value) {
  _internal_set_hairpin_mode(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.hairpin_mode)
}

// string link_local_ipv6_address = 4;
inline void NetworkSettingBase::clear_link_local_ipv6_address() {
  link_local_ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::link_local_ipv6_address() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.link_local_ipv6_address)
  return _internal_link_local_ipv6_address();
}
inline void NetworkSettingBase::set_link_local_ipv6_address(const std::string& value) {
  _internal_set_link_local_ipv6_address(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.link_local_ipv6_address)
}
inline std::string* NetworkSettingBase::mutable_link_local_ipv6_address() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.link_local_ipv6_address)
  return _internal_mutable_link_local_ipv6_address();
}
inline const std::string& NetworkSettingBase::_internal_link_local_ipv6_address() const {
  return link_local_ipv6_address_.Get();
}
inline void NetworkSettingBase::_internal_set_link_local_ipv6_address(const std::string& value) {
  
  link_local_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_link_local_ipv6_address(std::string&& value) {
  
  link_local_ipv6_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.link_local_ipv6_address)
}
inline void NetworkSettingBase::set_link_local_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_local_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.link_local_ipv6_address)
}
inline void NetworkSettingBase::set_link_local_ipv6_address(const char* value,
    size_t size) {
  
  link_local_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.link_local_ipv6_address)
}
inline std::string* NetworkSettingBase::_internal_mutable_link_local_ipv6_address() {
  
  return link_local_ipv6_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_link_local_ipv6_address() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.link_local_ipv6_address)
  return link_local_ipv6_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_link_local_ipv6_address(std::string* link_local_ipv6_address) {
  if (link_local_ipv6_address != nullptr) {
    
  } else {
    
  }
  link_local_ipv6_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_local_ipv6_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.link_local_ipv6_address)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_link_local_ipv6_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.link_local_ipv6_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return link_local_ipv6_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_link_local_ipv6_address(
    std::string* link_local_ipv6_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (link_local_ipv6_address != nullptr) {
    
  } else {
    
  }
  link_local_ipv6_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      link_local_ipv6_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.link_local_ipv6_address)
}

// int32 link_local_ipv6_prefix_len = 5;
inline void NetworkSettingBase::clear_link_local_ipv6_prefix_len() {
  link_local_ipv6_prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSettingBase::_internal_link_local_ipv6_prefix_len() const {
  return link_local_ipv6_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSettingBase::link_local_ipv6_prefix_len() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.link_local_ipv6_prefix_len)
  return _internal_link_local_ipv6_prefix_len();
}
inline void NetworkSettingBase::_internal_set_link_local_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  link_local_ipv6_prefix_len_ = value;
}
inline void NetworkSettingBase::set_link_local_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_local_ipv6_prefix_len(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.link_local_ipv6_prefix_len)
}

// string sandbox_key = 6;
inline void NetworkSettingBase::clear_sandbox_key() {
  sandbox_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::sandbox_key() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.sandbox_key)
  return _internal_sandbox_key();
}
inline void NetworkSettingBase::set_sandbox_key(const std::string& value) {
  _internal_set_sandbox_key(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.sandbox_key)
}
inline std::string* NetworkSettingBase::mutable_sandbox_key() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.sandbox_key)
  return _internal_mutable_sandbox_key();
}
inline const std::string& NetworkSettingBase::_internal_sandbox_key() const {
  return sandbox_key_.Get();
}
inline void NetworkSettingBase::_internal_set_sandbox_key(const std::string& value) {
  
  sandbox_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_sandbox_key(std::string&& value) {
  
  sandbox_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.sandbox_key)
}
inline void NetworkSettingBase::set_sandbox_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandbox_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.sandbox_key)
}
inline void NetworkSettingBase::set_sandbox_key(const char* value,
    size_t size) {
  
  sandbox_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.sandbox_key)
}
inline std::string* NetworkSettingBase::_internal_mutable_sandbox_key() {
  
  return sandbox_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_sandbox_key() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.sandbox_key)
  return sandbox_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_sandbox_key(std::string* sandbox_key) {
  if (sandbox_key != nullptr) {
    
  } else {
    
  }
  sandbox_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandbox_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.sandbox_key)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_sandbox_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.sandbox_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandbox_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_sandbox_key(
    std::string* sandbox_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandbox_key != nullptr) {
    
  } else {
    
  }
  sandbox_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandbox_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.sandbox_key)
}

// .container.NetworkAddress secondary_ip_addresses = 7;
inline bool NetworkSettingBase::_internal_has_secondary_ip_addresses() const {
  return this != internal_default_instance() && secondary_ip_addresses_ != nullptr;
}
inline bool NetworkSettingBase::has_secondary_ip_addresses() const {
  return _internal_has_secondary_ip_addresses();
}
inline void NetworkSettingBase::clear_secondary_ip_addresses() {
  if (GetArena() == nullptr && secondary_ip_addresses_ != nullptr) {
    delete secondary_ip_addresses_;
  }
  secondary_ip_addresses_ = nullptr;
}
inline const ::container::NetworkAddress& NetworkSettingBase::_internal_secondary_ip_addresses() const {
  const ::container::NetworkAddress* p = secondary_ip_addresses_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::NetworkAddress*>(
      &::container::_NetworkAddress_default_instance_);
}
inline const ::container::NetworkAddress& NetworkSettingBase::secondary_ip_addresses() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.secondary_ip_addresses)
  return _internal_secondary_ip_addresses();
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_secondary_ip_addresses(
    ::container::NetworkAddress* secondary_ip_addresses) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_ip_addresses_);
  }
  secondary_ip_addresses_ = secondary_ip_addresses;
  if (secondary_ip_addresses) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.secondary_ip_addresses)
}
inline ::container::NetworkAddress* NetworkSettingBase::release_secondary_ip_addresses() {
  auto temp = unsafe_arena_release_secondary_ip_addresses();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::NetworkAddress* NetworkSettingBase::unsafe_arena_release_secondary_ip_addresses() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.secondary_ip_addresses)
  
  ::container::NetworkAddress* temp = secondary_ip_addresses_;
  secondary_ip_addresses_ = nullptr;
  return temp;
}
inline ::container::NetworkAddress* NetworkSettingBase::_internal_mutable_secondary_ip_addresses() {
  
  if (secondary_ip_addresses_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::NetworkAddress>(GetArena());
    secondary_ip_addresses_ = p;
  }
  return secondary_ip_addresses_;
}
inline ::container::NetworkAddress* NetworkSettingBase::mutable_secondary_ip_addresses() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.secondary_ip_addresses)
  return _internal_mutable_secondary_ip_addresses();
}
inline void NetworkSettingBase::set_allocated_secondary_ip_addresses(::container::NetworkAddress* secondary_ip_addresses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete secondary_ip_addresses_;
  }
  if (secondary_ip_addresses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(secondary_ip_addresses);
    if (message_arena != submessage_arena) {
      secondary_ip_addresses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_ip_addresses, submessage_arena);
    }
    
  } else {
    
  }
  secondary_ip_addresses_ = secondary_ip_addresses;
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.secondary_ip_addresses)
}

// .container.NetworkAddress secondary_ipv6_addresses = 8;
inline bool NetworkSettingBase::_internal_has_secondary_ipv6_addresses() const {
  return this != internal_default_instance() && secondary_ipv6_addresses_ != nullptr;
}
inline bool NetworkSettingBase::has_secondary_ipv6_addresses() const {
  return _internal_has_secondary_ipv6_addresses();
}
inline void NetworkSettingBase::clear_secondary_ipv6_addresses() {
  if (GetArena() == nullptr && secondary_ipv6_addresses_ != nullptr) {
    delete secondary_ipv6_addresses_;
  }
  secondary_ipv6_addresses_ = nullptr;
}
inline const ::container::NetworkAddress& NetworkSettingBase::_internal_secondary_ipv6_addresses() const {
  const ::container::NetworkAddress* p = secondary_ipv6_addresses_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::NetworkAddress*>(
      &::container::_NetworkAddress_default_instance_);
}
inline const ::container::NetworkAddress& NetworkSettingBase::secondary_ipv6_addresses() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.secondary_ipv6_addresses)
  return _internal_secondary_ipv6_addresses();
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_secondary_ipv6_addresses(
    ::container::NetworkAddress* secondary_ipv6_addresses) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_ipv6_addresses_);
  }
  secondary_ipv6_addresses_ = secondary_ipv6_addresses;
  if (secondary_ipv6_addresses) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.secondary_ipv6_addresses)
}
inline ::container::NetworkAddress* NetworkSettingBase::release_secondary_ipv6_addresses() {
  auto temp = unsafe_arena_release_secondary_ipv6_addresses();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::NetworkAddress* NetworkSettingBase::unsafe_arena_release_secondary_ipv6_addresses() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.secondary_ipv6_addresses)
  
  ::container::NetworkAddress* temp = secondary_ipv6_addresses_;
  secondary_ipv6_addresses_ = nullptr;
  return temp;
}
inline ::container::NetworkAddress* NetworkSettingBase::_internal_mutable_secondary_ipv6_addresses() {
  
  if (secondary_ipv6_addresses_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::NetworkAddress>(GetArena());
    secondary_ipv6_addresses_ = p;
  }
  return secondary_ipv6_addresses_;
}
inline ::container::NetworkAddress* NetworkSettingBase::mutable_secondary_ipv6_addresses() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.secondary_ipv6_addresses)
  return _internal_mutable_secondary_ipv6_addresses();
}
inline void NetworkSettingBase::set_allocated_secondary_ipv6_addresses(::container::NetworkAddress* secondary_ipv6_addresses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete secondary_ipv6_addresses_;
  }
  if (secondary_ipv6_addresses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(secondary_ipv6_addresses);
    if (message_arena != submessage_arena) {
      secondary_ipv6_addresses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_ipv6_addresses, submessage_arena);
    }
    
  } else {
    
  }
  secondary_ipv6_addresses_ = secondary_ipv6_addresses;
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.secondary_ipv6_addresses)
}

// string endpoint_id = 9;
inline void NetworkSettingBase::clear_endpoint_id() {
  endpoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::endpoint_id() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.endpoint_id)
  return _internal_endpoint_id();
}
inline void NetworkSettingBase::set_endpoint_id(const std::string& value) {
  _internal_set_endpoint_id(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.endpoint_id)
}
inline std::string* NetworkSettingBase::mutable_endpoint_id() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.endpoint_id)
  return _internal_mutable_endpoint_id();
}
inline const std::string& NetworkSettingBase::_internal_endpoint_id() const {
  return endpoint_id_.Get();
}
inline void NetworkSettingBase::_internal_set_endpoint_id(const std::string& value) {
  
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_endpoint_id(std::string&& value) {
  
  endpoint_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.endpoint_id)
}
inline void NetworkSettingBase::set_endpoint_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.endpoint_id)
}
inline void NetworkSettingBase::set_endpoint_id(const char* value,
    size_t size) {
  
  endpoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.endpoint_id)
}
inline std::string* NetworkSettingBase::_internal_mutable_endpoint_id() {
  
  return endpoint_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_endpoint_id() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.endpoint_id)
  return endpoint_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_endpoint_id(std::string* endpoint_id) {
  if (endpoint_id != nullptr) {
    
  } else {
    
  }
  endpoint_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.endpoint_id)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_endpoint_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.endpoint_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endpoint_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_endpoint_id(
    std::string* endpoint_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endpoint_id != nullptr) {
    
  } else {
    
  }
  endpoint_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endpoint_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.endpoint_id)
}

// string gateway = 10;
inline void NetworkSettingBase::clear_gateway() {
  gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::gateway() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.gateway)
  return _internal_gateway();
}
inline void NetworkSettingBase::set_gateway(const std::string& value) {
  _internal_set_gateway(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.gateway)
}
inline std::string* NetworkSettingBase::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.gateway)
  return _internal_mutable_gateway();
}
inline const std::string& NetworkSettingBase::_internal_gateway() const {
  return gateway_.Get();
}
inline void NetworkSettingBase::_internal_set_gateway(const std::string& value) {
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_gateway(std::string&& value) {
  
  gateway_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.gateway)
}
inline void NetworkSettingBase::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.gateway)
}
inline void NetworkSettingBase::set_gateway(const char* value,
    size_t size) {
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.gateway)
}
inline std::string* NetworkSettingBase::_internal_mutable_gateway() {
  
  return gateway_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_gateway() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.gateway)
  return gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.gateway)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.gateway)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gateway_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_gateway(
    std::string* gateway) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gateway, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.gateway)
}

// string global_ipv6_address = 11;
inline void NetworkSettingBase::clear_global_ipv6_address() {
  global_ipv6_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::global_ipv6_address() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.global_ipv6_address)
  return _internal_global_ipv6_address();
}
inline void NetworkSettingBase::set_global_ipv6_address(const std::string& value) {
  _internal_set_global_ipv6_address(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.global_ipv6_address)
}
inline std::string* NetworkSettingBase::mutable_global_ipv6_address() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.global_ipv6_address)
  return _internal_mutable_global_ipv6_address();
}
inline const std::string& NetworkSettingBase::_internal_global_ipv6_address() const {
  return global_ipv6_address_.Get();
}
inline void NetworkSettingBase::_internal_set_global_ipv6_address(const std::string& value) {
  
  global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_global_ipv6_address(std::string&& value) {
  
  global_ipv6_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.global_ipv6_address)
}
inline void NetworkSettingBase::set_global_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.global_ipv6_address)
}
inline void NetworkSettingBase::set_global_ipv6_address(const char* value,
    size_t size) {
  
  global_ipv6_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.global_ipv6_address)
}
inline std::string* NetworkSettingBase::_internal_mutable_global_ipv6_address() {
  
  return global_ipv6_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_global_ipv6_address() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.global_ipv6_address)
  return global_ipv6_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_global_ipv6_address(std::string* global_ipv6_address) {
  if (global_ipv6_address != nullptr) {
    
  } else {
    
  }
  global_ipv6_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_ipv6_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.global_ipv6_address)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_global_ipv6_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.global_ipv6_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_ipv6_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_global_ipv6_address(
    std::string* global_ipv6_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_ipv6_address != nullptr) {
    
  } else {
    
  }
  global_ipv6_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_ipv6_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.global_ipv6_address)
}

// int32 global_ipv6_prefix_len = 12;
inline void NetworkSettingBase::clear_global_ipv6_prefix_len() {
  global_ipv6_prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSettingBase::_internal_global_ipv6_prefix_len() const {
  return global_ipv6_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSettingBase::global_ipv6_prefix_len() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.global_ipv6_prefix_len)
  return _internal_global_ipv6_prefix_len();
}
inline void NetworkSettingBase::_internal_set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  global_ipv6_prefix_len_ = value;
}
inline void NetworkSettingBase::set_global_ipv6_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_global_ipv6_prefix_len(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.global_ipv6_prefix_len)
}

// string ip_address = 13;
inline void NetworkSettingBase::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::ip_address() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.ip_address)
  return _internal_ip_address();
}
inline void NetworkSettingBase::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.ip_address)
}
inline std::string* NetworkSettingBase::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& NetworkSettingBase::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void NetworkSettingBase::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.ip_address)
}
inline void NetworkSettingBase::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.ip_address)
}
inline void NetworkSettingBase::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.ip_address)
}
inline std::string* NetworkSettingBase::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_ip_address() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.ip_address)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.ip_address)
}

// int32 ip_prefix_len = 14;
inline void NetworkSettingBase::clear_ip_prefix_len() {
  ip_prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSettingBase::_internal_ip_prefix_len() const {
  return ip_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSettingBase::ip_prefix_len() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.ip_prefix_len)
  return _internal_ip_prefix_len();
}
inline void NetworkSettingBase::_internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_prefix_len_ = value;
}
inline void NetworkSettingBase::set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_prefix_len(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.ip_prefix_len)
}

// string ipv6_gateway = 15;
inline void NetworkSettingBase::clear_ipv6_gateway() {
  ipv6_gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::ipv6_gateway() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.ipv6_gateway)
  return _internal_ipv6_gateway();
}
inline void NetworkSettingBase::set_ipv6_gateway(const std::string& value) {
  _internal_set_ipv6_gateway(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.ipv6_gateway)
}
inline std::string* NetworkSettingBase::mutable_ipv6_gateway() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.ipv6_gateway)
  return _internal_mutable_ipv6_gateway();
}
inline const std::string& NetworkSettingBase::_internal_ipv6_gateway() const {
  return ipv6_gateway_.Get();
}
inline void NetworkSettingBase::_internal_set_ipv6_gateway(const std::string& value) {
  
  ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_ipv6_gateway(std::string&& value) {
  
  ipv6_gateway_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.ipv6_gateway)
}
inline void NetworkSettingBase::set_ipv6_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.ipv6_gateway)
}
inline void NetworkSettingBase::set_ipv6_gateway(const char* value,
    size_t size) {
  
  ipv6_gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.ipv6_gateway)
}
inline std::string* NetworkSettingBase::_internal_mutable_ipv6_gateway() {
  
  return ipv6_gateway_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_ipv6_gateway() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.ipv6_gateway)
  return ipv6_gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_ipv6_gateway(std::string* ipv6_gateway) {
  if (ipv6_gateway != nullptr) {
    
  } else {
    
  }
  ipv6_gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6_gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.ipv6_gateway)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_ipv6_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.ipv6_gateway)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipv6_gateway_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_ipv6_gateway(
    std::string* ipv6_gateway) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipv6_gateway != nullptr) {
    
  } else {
    
  }
  ipv6_gateway_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_gateway, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.ipv6_gateway)
}

// string mac_address = 16;
inline void NetworkSettingBase::clear_mac_address() {
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkSettingBase::mac_address() const {
  // @@protoc_insertion_point(field_get:container.NetworkSettingBase.mac_address)
  return _internal_mac_address();
}
inline void NetworkSettingBase::set_mac_address(const std::string& value) {
  _internal_set_mac_address(value);
  // @@protoc_insertion_point(field_set:container.NetworkSettingBase.mac_address)
}
inline std::string* NetworkSettingBase::mutable_mac_address() {
  // @@protoc_insertion_point(field_mutable:container.NetworkSettingBase.mac_address)
  return _internal_mutable_mac_address();
}
inline const std::string& NetworkSettingBase::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void NetworkSettingBase::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkSettingBase::set_mac_address(std::string&& value) {
  
  mac_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.NetworkSettingBase.mac_address)
}
inline void NetworkSettingBase::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.NetworkSettingBase.mac_address)
}
inline void NetworkSettingBase::set_mac_address(const char* value,
    size_t size) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.NetworkSettingBase.mac_address)
}
inline std::string* NetworkSettingBase::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkSettingBase::release_mac_address() {
  // @@protoc_insertion_point(field_release:container.NetworkSettingBase.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkSettingBase::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.NetworkSettingBase.mac_address)
}
inline std::string* NetworkSettingBase::unsafe_arena_release_mac_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.NetworkSettingBase.mac_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mac_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkSettingBase::unsafe_arena_set_allocated_mac_address(
    std::string* mac_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mac_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.NetworkSettingBase.mac_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace container

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_container_5ftypes_2eproto
