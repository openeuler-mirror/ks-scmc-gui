// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node_service.proto

#include "node_service.pb.h"
#include "node_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace node {

static const char* Node_method_names[] = {
  "/node.Node/List",
  "/node.Node/Create",
  "/node.Node/Remove",
  "/node.Node/Status",
};

std::unique_ptr< Node::Stub> Node::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Node::Stub> stub(new Node::Stub(channel));
  return stub;
}

Node::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(Node_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(Node_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(Node_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Node_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Node::Stub::List(::grpc::ClientContext* context, const ::node::ListRequest& request, ::node::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void Node::Stub::experimental_async::List(::grpc::ClientContext* context, const ::node::ListRequest* request, ::node::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::List(::grpc::ClientContext* context, const ::node::ListRequest* request, ::node::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void Node::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::node::ListReply>* Node::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::node::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::node::ListReply>* Node::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::node::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status Node::Stub::Create(::grpc::ClientContext* context, const ::node::CreateRequest& request, ::node::CreateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Node::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::node::CreateRequest* request, ::node::CreateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::CreateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::node::CreateRequest* request, ::node::CreateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void Node::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::CreateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::node::CreateReply>* Node::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::node::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::CreateReply>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::node::CreateReply>* Node::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::node::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::CreateReply>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status Node::Stub::Remove(::grpc::ClientContext* context, const ::node::RemoveRequest& request, ::node::RemoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void Node::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::node::RemoveRequest* request, ::node::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::node::RemoveRequest* request, ::node::RemoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

void Node::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::RemoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::node::RemoveReply>* Node::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::node::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::RemoveReply>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::node::RemoveReply>* Node::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::node::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::RemoveReply>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

::grpc::Status Node::Stub::Status(::grpc::ClientContext* context, const ::node::StatusRequest& request, ::node::StatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Node::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::node::StatusRequest* request, ::node::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::node::StatusRequest* request, ::node::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

void Node::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::node::StatusReply>* Node::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::node::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::StatusReply>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::node::StatusReply>* Node::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::node::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::node::StatusReply>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, false);
}

Node::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::node::ListRequest, ::node::ListReply>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::node::ListRequest* req,
             ::node::ListReply* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::node::CreateRequest, ::node::CreateReply>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::node::CreateRequest* req,
             ::node::CreateReply* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::node::RemoveRequest, ::node::RemoveReply>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::node::RemoveRequest* req,
             ::node::RemoveReply* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::node::StatusRequest, ::node::StatusReply>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::node::StatusRequest* req,
             ::node::StatusReply* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
}

Node::Service::~Service() {
}

::grpc::Status Node::Service::List(::grpc::ServerContext* context, const ::node::ListRequest* request, ::node::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::Create(::grpc::ServerContext* context, const ::node::CreateRequest* request, ::node::CreateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::Remove(::grpc::ServerContext* context, const ::node::RemoveRequest* request, ::node::RemoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::Status(::grpc::ServerContext* context, const ::node::StatusRequest* request, ::node::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace node

