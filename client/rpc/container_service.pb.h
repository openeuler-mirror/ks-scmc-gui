// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_container_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_container_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "container_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_container_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_container_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_container_5fservice_2eproto;
namespace container {
class CreateReply;
class CreateReplyDefaultTypeInternal;
extern CreateReplyDefaultTypeInternal _CreateReply_default_instance_;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateRequest_NetworkConfigEntry_DoNotUse;
class CreateRequest_NetworkConfigEntry_DoNotUseDefaultTypeInternal;
extern CreateRequest_NetworkConfigEntry_DoNotUseDefaultTypeInternal _CreateRequest_NetworkConfigEntry_DoNotUse_default_instance_;
class InspectReply;
class InspectReplyDefaultTypeInternal;
extern InspectReplyDefaultTypeInternal _InspectReply_default_instance_;
class InspectReply_NetworkSettingsEntry_DoNotUse;
class InspectReply_NetworkSettingsEntry_DoNotUseDefaultTypeInternal;
extern InspectReply_NetworkSettingsEntry_DoNotUseDefaultTypeInternal _InspectReply_NetworkSettingsEntry_DoNotUse_default_instance_;
class InspectRequest;
class InspectRequestDefaultTypeInternal;
extern InspectRequestDefaultTypeInternal _InspectRequest_default_instance_;
class KillReply;
class KillReplyDefaultTypeInternal;
extern KillReplyDefaultTypeInternal _KillReply_default_instance_;
class KillRequest;
class KillRequestDefaultTypeInternal;
extern KillRequestDefaultTypeInternal _KillRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class MonitorHistoryReply;
class MonitorHistoryReplyDefaultTypeInternal;
extern MonitorHistoryReplyDefaultTypeInternal _MonitorHistoryReply_default_instance_;
class MonitorHistoryRequest;
class MonitorHistoryRequestDefaultTypeInternal;
extern MonitorHistoryRequestDefaultTypeInternal _MonitorHistoryRequest_default_instance_;
class MonitorSample;
class MonitorSampleDefaultTypeInternal;
extern MonitorSampleDefaultTypeInternal _MonitorSample_default_instance_;
class RemoveReply;
class RemoveReplyDefaultTypeInternal;
extern RemoveReplyDefaultTypeInternal _RemoveReply_default_instance_;
class RemoveRequest;
class RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class RestartReply;
class RestartReplyDefaultTypeInternal;
extern RestartReplyDefaultTypeInternal _RestartReply_default_instance_;
class RestartRequest;
class RestartRequestDefaultTypeInternal;
extern RestartRequestDefaultTypeInternal _RestartRequest_default_instance_;
class StartReply;
class StartReplyDefaultTypeInternal;
extern StartReplyDefaultTypeInternal _StartReply_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StatusReply;
class StatusReplyDefaultTypeInternal;
extern StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StopReply;
class StopReplyDefaultTypeInternal;
extern StopReplyDefaultTypeInternal _StopReply_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class UpdateReply;
class UpdateReplyDefaultTypeInternal;
extern UpdateReplyDefaultTypeInternal _UpdateReply_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
}  // namespace container
PROTOBUF_NAMESPACE_OPEN
template<> ::container::CreateReply* Arena::CreateMaybeMessage<::container::CreateReply>(Arena*);
template<> ::container::CreateRequest* Arena::CreateMaybeMessage<::container::CreateRequest>(Arena*);
template<> ::container::CreateRequest_NetworkConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::container::CreateRequest_NetworkConfigEntry_DoNotUse>(Arena*);
template<> ::container::InspectReply* Arena::CreateMaybeMessage<::container::InspectReply>(Arena*);
template<> ::container::InspectReply_NetworkSettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::container::InspectReply_NetworkSettingsEntry_DoNotUse>(Arena*);
template<> ::container::InspectRequest* Arena::CreateMaybeMessage<::container::InspectRequest>(Arena*);
template<> ::container::KillReply* Arena::CreateMaybeMessage<::container::KillReply>(Arena*);
template<> ::container::KillRequest* Arena::CreateMaybeMessage<::container::KillRequest>(Arena*);
template<> ::container::ListReply* Arena::CreateMaybeMessage<::container::ListReply>(Arena*);
template<> ::container::ListRequest* Arena::CreateMaybeMessage<::container::ListRequest>(Arena*);
template<> ::container::MonitorHistoryReply* Arena::CreateMaybeMessage<::container::MonitorHistoryReply>(Arena*);
template<> ::container::MonitorHistoryRequest* Arena::CreateMaybeMessage<::container::MonitorHistoryRequest>(Arena*);
template<> ::container::MonitorSample* Arena::CreateMaybeMessage<::container::MonitorSample>(Arena*);
template<> ::container::RemoveReply* Arena::CreateMaybeMessage<::container::RemoveReply>(Arena*);
template<> ::container::RemoveRequest* Arena::CreateMaybeMessage<::container::RemoveRequest>(Arena*);
template<> ::container::RestartReply* Arena::CreateMaybeMessage<::container::RestartReply>(Arena*);
template<> ::container::RestartRequest* Arena::CreateMaybeMessage<::container::RestartRequest>(Arena*);
template<> ::container::StartReply* Arena::CreateMaybeMessage<::container::StartReply>(Arena*);
template<> ::container::StartRequest* Arena::CreateMaybeMessage<::container::StartRequest>(Arena*);
template<> ::container::StatusReply* Arena::CreateMaybeMessage<::container::StatusReply>(Arena*);
template<> ::container::StatusRequest* Arena::CreateMaybeMessage<::container::StatusRequest>(Arena*);
template<> ::container::StopReply* Arena::CreateMaybeMessage<::container::StopReply>(Arena*);
template<> ::container::StopRequest* Arena::CreateMaybeMessage<::container::StopRequest>(Arena*);
template<> ::container::UpdateReply* Arena::CreateMaybeMessage<::container::UpdateReply>(Arena*);
template<> ::container::UpdateRequest* Arena::CreateMaybeMessage<::container::UpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace container {

// ===================================================================

class ListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {};
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(nullptr);
  }

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kListAllFieldNumber = 3,
  };
  // repeated int64 node_ids = 2;
  int node_ids_size() const;
  private:
  int _internal_node_ids_size() const;
  public:
  void clear_node_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_node_ids() const;
  void _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_node_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 node_ids(int index) const;
  void set_node_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_node_ids();

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // bool list_all = 3;
  void clear_list_all();
  bool list_all() const;
  void set_list_all(bool value);
  private:
  bool _internal_list_all() const;
  void _internal_set_list_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > node_ids_;
  mutable std::atomic<int> _node_ids_cached_byte_size_;
  ::common::RequestHeader* header_;
  bool list_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.ListReply) */ {
 public:
  inline ListReply() : ListReply(nullptr) {};
  virtual ~ListReply();

  ListReply(const ListReply& from);
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const final {
    return CreateMaybeMessage<ListReply>(nullptr);
  }

  ListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.ListReply";
  }
  protected:
  explicit ListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.NodeContainer containers = 2;
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::container::NodeContainer* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::NodeContainer >*
      mutable_containers();
  private:
  const ::container::NodeContainer& _internal_containers(int index) const;
  ::container::NodeContainer* _internal_add_containers();
  public:
  const ::container::NodeContainer& containers(int index) const;
  ::container::NodeContainer* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::NodeContainer >&
      containers() const;

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.ListReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::NodeContainer > containers_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest_NetworkConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateRequest_NetworkConfigEntry_DoNotUse, 
    std::string, ::container::EndpointSetting,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateRequest_NetworkConfigEntry_DoNotUse, 
    std::string, ::container::EndpointSetting,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CreateRequest_NetworkConfigEntry_DoNotUse();
  CreateRequest_NetworkConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateRequest_NetworkConfigEntry_DoNotUse& other);
  static const CreateRequest_NetworkConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateRequest_NetworkConfigEntry_DoNotUse*>(&_CreateRequest_NetworkConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.CreateRequest.NetworkConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class CreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {};
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNetworkConfigFieldNumber = 13,
    kNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kConfigFieldNumber = 11,
    kHostConfigFieldNumber = 12,
    kNodeIdFieldNumber = 2,
    kEnableGraphicFieldNumber = 4,
  };
  // map<string, .container.EndpointSetting> network_config = 13;
  int network_config_size() const;
  private:
  int _internal_network_config_size() const;
  public:
  void clear_network_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
      _internal_network_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
      _internal_mutable_network_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
      network_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
      mutable_network_config();

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // .container.ContainerConfig config = 11;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::container::ContainerConfig& config() const;
  ::container::ContainerConfig* release_config();
  ::container::ContainerConfig* mutable_config();
  void set_allocated_config(::container::ContainerConfig* config);
  private:
  const ::container::ContainerConfig& _internal_config() const;
  ::container::ContainerConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::container::ContainerConfig* config);
  ::container::ContainerConfig* unsafe_arena_release_config();

  // .container.HostConfig host_config = 12;
  bool has_host_config() const;
  private:
  bool _internal_has_host_config() const;
  public:
  void clear_host_config();
  const ::container::HostConfig& host_config() const;
  ::container::HostConfig* release_host_config();
  ::container::HostConfig* mutable_host_config();
  void set_allocated_host_config(::container::HostConfig* host_config);
  private:
  const ::container::HostConfig& _internal_host_config() const;
  ::container::HostConfig* _internal_mutable_host_config();
  public:
  void unsafe_arena_set_allocated_host_config(
      ::container::HostConfig* host_config);
  ::container::HostConfig* unsafe_arena_release_host_config();

  // int64 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool enable_graphic = 4;
  void clear_enable_graphic();
  bool enable_graphic() const;
  void set_enable_graphic(bool value);
  private:
  bool _internal_enable_graphic() const;
  void _internal_set_enable_graphic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateRequest_NetworkConfigEntry_DoNotUse,
      std::string, ::container::EndpointSetting,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > network_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::common::RequestHeader* header_;
  ::container::ContainerConfig* config_;
  ::container::HostConfig* host_config_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  bool enable_graphic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.CreateReply) */ {
 public:
  inline CreateReply() : CreateReply(nullptr) {};
  virtual ~CreateReply();

  CreateReply(const CreateReply& from);
  CreateReply(CreateReply&& from) noexcept
    : CreateReply() {
    *this = ::std::move(from);
  }

  inline CreateReply& operator=(const CreateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReply& operator=(CreateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReply* internal_default_instance() {
    return reinterpret_cast<const CreateReply*>(
               &_CreateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateReply& a, CreateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReply* New() const final {
    return CreateMaybeMessage<CreateReply>(nullptr);
  }

  CreateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReply& from);
  void MergeFrom(const CreateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.CreateReply";
  }
  protected:
  explicit CreateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 3,
    kContainerIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string warnings = 3;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;
  public:
  void clear_warnings();
  const std::string& warnings(int index) const;
  std::string* mutable_warnings(int index);
  void set_warnings(int index, const std::string& value);
  void set_warnings(int index, std::string&& value);
  void set_warnings(int index, const char* value);
  void set_warnings(int index, const char* value, size_t size);
  std::string* add_warnings();
  void add_warnings(const std::string& value);
  void add_warnings(std::string&& value);
  void add_warnings(const char* value);
  void add_warnings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warnings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warnings();
  private:
  const std::string& _internal_warnings(int index) const;
  std::string* _internal_add_warnings();
  public:

  // string container_id = 2;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.CreateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warnings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InspectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.InspectRequest) */ {
 public:
  inline InspectRequest() : InspectRequest(nullptr) {};
  virtual ~InspectRequest();

  InspectRequest(const InspectRequest& from);
  InspectRequest(InspectRequest&& from) noexcept
    : InspectRequest() {
    *this = ::std::move(from);
  }

  inline InspectRequest& operator=(const InspectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectRequest& operator=(InspectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectRequest* internal_default_instance() {
    return reinterpret_cast<const InspectRequest*>(
               &_InspectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InspectRequest& a, InspectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectRequest* New() const final {
    return CreateMaybeMessage<InspectRequest>(nullptr);
  }

  InspectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectRequest& from);
  void MergeFrom(const InspectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.InspectRequest";
  }
  protected:
  explicit InspectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // string container_id = 3;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // int64 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.InspectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::common::RequestHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InspectReply_NetworkSettingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InspectReply_NetworkSettingsEntry_DoNotUse, 
    std::string, ::container::EndpointSetting,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InspectReply_NetworkSettingsEntry_DoNotUse, 
    std::string, ::container::EndpointSetting,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  InspectReply_NetworkSettingsEntry_DoNotUse();
  InspectReply_NetworkSettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InspectReply_NetworkSettingsEntry_DoNotUse& other);
  static const InspectReply_NetworkSettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InspectReply_NetworkSettingsEntry_DoNotUse*>(&_InspectReply_NetworkSettingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "container.InspectReply.NetworkSettingsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class InspectReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.InspectReply) */ {
 public:
  inline InspectReply() : InspectReply(nullptr) {};
  virtual ~InspectReply();

  InspectReply(const InspectReply& from);
  InspectReply(InspectReply&& from) noexcept
    : InspectReply() {
    *this = ::std::move(from);
  }

  inline InspectReply& operator=(const InspectReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectReply& operator=(InspectReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectReply* internal_default_instance() {
    return reinterpret_cast<const InspectReply*>(
               &_InspectReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InspectReply& a, InspectReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectReply* New() const final {
    return CreateMaybeMessage<InspectReply>(nullptr);
  }

  InspectReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectReply& from);
  void MergeFrom(const InspectReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.InspectReply";
  }
  protected:
  explicit InspectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMountsFieldNumber = 4,
    kNetworkSettingsFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
    kHostConfigFieldNumber = 3,
    kConfigFieldNumber = 5,
  };
  // repeated .container.Mount mounts = 4;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::container::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >*
      mutable_mounts();
  private:
  const ::container::Mount& _internal_mounts(int index) const;
  ::container::Mount* _internal_add_mounts();
  public:
  const ::container::Mount& mounts(int index) const;
  ::container::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >&
      mounts() const;

  // map<string, .container.EndpointSetting> network_settings = 6;
  int network_settings_size() const;
  private:
  int _internal_network_settings_size() const;
  public:
  void clear_network_settings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
      _internal_network_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
      _internal_mutable_network_settings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
      network_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
      mutable_network_settings();

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // .container.ContainerInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::container::ContainerInfo& info() const;
  ::container::ContainerInfo* release_info();
  ::container::ContainerInfo* mutable_info();
  void set_allocated_info(::container::ContainerInfo* info);
  private:
  const ::container::ContainerInfo& _internal_info() const;
  ::container::ContainerInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::container::ContainerInfo* info);
  ::container::ContainerInfo* unsafe_arena_release_info();

  // .container.HostConfig host_config = 3;
  bool has_host_config() const;
  private:
  bool _internal_has_host_config() const;
  public:
  void clear_host_config();
  const ::container::HostConfig& host_config() const;
  ::container::HostConfig* release_host_config();
  ::container::HostConfig* mutable_host_config();
  void set_allocated_host_config(::container::HostConfig* host_config);
  private:
  const ::container::HostConfig& _internal_host_config() const;
  ::container::HostConfig* _internal_mutable_host_config();
  public:
  void unsafe_arena_set_allocated_host_config(
      ::container::HostConfig* host_config);
  ::container::HostConfig* unsafe_arena_release_host_config();

  // .container.ContainerConfig config = 5;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::container::ContainerConfig& config() const;
  ::container::ContainerConfig* release_config();
  ::container::ContainerConfig* mutable_config();
  void set_allocated_config(::container::ContainerConfig* config);
  private:
  const ::container::ContainerConfig& _internal_config() const;
  ::container::ContainerConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::container::ContainerConfig* config);
  ::container::ContainerConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:container.InspectReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount > mounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InspectReply_NetworkSettingsEntry_DoNotUse,
      std::string, ::container::EndpointSetting,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > network_settings_;
  ::common::ReplyHeader* header_;
  ::container::ContainerInfo* info_;
  ::container::HostConfig* host_config_;
  ::container::ContainerConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {};
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(nullptr);
  }

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.ContainerIdList ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::container::ContainerIdList* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
      mutable_ids();
  private:
  const ::container::ContainerIdList& _internal_ids(int index) const;
  ::container::ContainerIdList* _internal_add_ids();
  public:
  const ::container::ContainerIdList& ids(int index) const;
  ::container::ContainerIdList* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
      ids() const;

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList > ids_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.StartReply) */ {
 public:
  inline StartReply() : StartReply(nullptr) {};
  virtual ~StartReply();

  StartReply(const StartReply& from);
  StartReply(StartReply&& from) noexcept
    : StartReply() {
    *this = ::std::move(from);
  }

  inline StartReply& operator=(const StartReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartReply& operator=(StartReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartReply* internal_default_instance() {
    return reinterpret_cast<const StartReply*>(
               &_StartReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StartReply& a, StartReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StartReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartReply* New() const final {
    return CreateMaybeMessage<StartReply>(nullptr);
  }

  StartReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartReply& from);
  void MergeFrom(const StartReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.StartReply";
  }
  protected:
  explicit StartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string ok_ids = 2;
  int ok_ids_size() const;
  private:
  int _internal_ok_ids_size() const;
  public:
  void clear_ok_ids();
  const std::string& ok_ids(int index) const;
  std::string* mutable_ok_ids(int index);
  void set_ok_ids(int index, const std::string& value);
  void set_ok_ids(int index, std::string&& value);
  void set_ok_ids(int index, const char* value);
  void set_ok_ids(int index, const char* value, size_t size);
  std::string* add_ok_ids();
  void add_ok_ids(const std::string& value);
  void add_ok_ids(std::string&& value);
  void add_ok_ids(const char* value);
  void add_ok_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ok_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ok_ids();
  private:
  const std::string& _internal_ok_ids(int index) const;
  std::string* _internal_add_ok_ids();
  public:

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.StartReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ok_ids_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {};
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.ContainerIdList ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::container::ContainerIdList* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
      mutable_ids();
  private:
  const ::container::ContainerIdList& _internal_ids(int index) const;
  ::container::ContainerIdList* _internal_add_ids();
  public:
  const ::container::ContainerIdList& ids(int index) const;
  ::container::ContainerIdList* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
      ids() const;

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList > ids_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StopReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.StopReply) */ {
 public:
  inline StopReply() : StopReply(nullptr) {};
  virtual ~StopReply();

  StopReply(const StopReply& from);
  StopReply(StopReply&& from) noexcept
    : StopReply() {
    *this = ::std::move(from);
  }

  inline StopReply& operator=(const StopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopReply& operator=(StopReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopReply* internal_default_instance() {
    return reinterpret_cast<const StopReply*>(
               &_StopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StopReply& a, StopReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopReply* New() const final {
    return CreateMaybeMessage<StopReply>(nullptr);
  }

  StopReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopReply& from);
  void MergeFrom(const StopReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.StopReply";
  }
  protected:
  explicit StopReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string ok_ids = 2;
  int ok_ids_size() const;
  private:
  int _internal_ok_ids_size() const;
  public:
  void clear_ok_ids();
  const std::string& ok_ids(int index) const;
  std::string* mutable_ok_ids(int index);
  void set_ok_ids(int index, const std::string& value);
  void set_ok_ids(int index, std::string&& value);
  void set_ok_ids(int index, const char* value);
  void set_ok_ids(int index, const char* value, size_t size);
  std::string* add_ok_ids();
  void add_ok_ids(const std::string& value);
  void add_ok_ids(std::string&& value);
  void add_ok_ids(const char* value);
  void add_ok_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ok_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ok_ids();
  private:
  const std::string& _internal_ok_ids(int index) const;
  std::string* _internal_add_ok_ids();
  public:

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.StopReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ok_ids_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class KillRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.KillRequest) */ {
 public:
  inline KillRequest() : KillRequest(nullptr) {};
  virtual ~KillRequest();

  KillRequest(const KillRequest& from);
  KillRequest(KillRequest&& from) noexcept
    : KillRequest() {
    *this = ::std::move(from);
  }

  inline KillRequest& operator=(const KillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillRequest& operator=(KillRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KillRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KillRequest* internal_default_instance() {
    return reinterpret_cast<const KillRequest*>(
               &_KillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KillRequest& a, KillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KillRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillRequest* New() const final {
    return CreateMaybeMessage<KillRequest>(nullptr);
  }

  KillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KillRequest& from);
  void MergeFrom(const KillRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.KillRequest";
  }
  protected:
  explicit KillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.ContainerIdList ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::container::ContainerIdList* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
      mutable_ids();
  private:
  const ::container::ContainerIdList& _internal_ids(int index) const;
  ::container::ContainerIdList* _internal_add_ids();
  public:
  const ::container::ContainerIdList& ids(int index) const;
  ::container::ContainerIdList* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
      ids() const;

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.KillRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList > ids_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class KillReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.KillReply) */ {
 public:
  inline KillReply() : KillReply(nullptr) {};
  virtual ~KillReply();

  KillReply(const KillReply& from);
  KillReply(KillReply&& from) noexcept
    : KillReply() {
    *this = ::std::move(from);
  }

  inline KillReply& operator=(const KillReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillReply& operator=(KillReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KillReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KillReply* internal_default_instance() {
    return reinterpret_cast<const KillReply*>(
               &_KillReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KillReply& a, KillReply& b) {
    a.Swap(&b);
  }
  inline void Swap(KillReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillReply* New() const final {
    return CreateMaybeMessage<KillReply>(nullptr);
  }

  KillReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KillReply& from);
  void MergeFrom(const KillReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.KillReply";
  }
  protected:
  explicit KillReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string ok_ids = 2;
  int ok_ids_size() const;
  private:
  int _internal_ok_ids_size() const;
  public:
  void clear_ok_ids();
  const std::string& ok_ids(int index) const;
  std::string* mutable_ok_ids(int index);
  void set_ok_ids(int index, const std::string& value);
  void set_ok_ids(int index, std::string&& value);
  void set_ok_ids(int index, const char* value);
  void set_ok_ids(int index, const char* value, size_t size);
  std::string* add_ok_ids();
  void add_ok_ids(const std::string& value);
  void add_ok_ids(std::string&& value);
  void add_ok_ids(const char* value);
  void add_ok_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ok_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ok_ids();
  private:
  const std::string& _internal_ok_ids(int index) const;
  std::string* _internal_add_ok_ids();
  public:

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.KillReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ok_ids_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RestartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.RestartRequest) */ {
 public:
  inline RestartRequest() : RestartRequest(nullptr) {};
  virtual ~RestartRequest();

  RestartRequest(const RestartRequest& from);
  RestartRequest(RestartRequest&& from) noexcept
    : RestartRequest() {
    *this = ::std::move(from);
  }

  inline RestartRequest& operator=(const RestartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartRequest& operator=(RestartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartRequest* internal_default_instance() {
    return reinterpret_cast<const RestartRequest*>(
               &_RestartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RestartRequest& a, RestartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartRequest* New() const final {
    return CreateMaybeMessage<RestartRequest>(nullptr);
  }

  RestartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartRequest& from);
  void MergeFrom(const RestartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.RestartRequest";
  }
  protected:
  explicit RestartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.ContainerIdList ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::container::ContainerIdList* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
      mutable_ids();
  private:
  const ::container::ContainerIdList& _internal_ids(int index) const;
  ::container::ContainerIdList* _internal_add_ids();
  public:
  const ::container::ContainerIdList& ids(int index) const;
  ::container::ContainerIdList* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
      ids() const;

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.RestartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList > ids_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RestartReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.RestartReply) */ {
 public:
  inline RestartReply() : RestartReply(nullptr) {};
  virtual ~RestartReply();

  RestartReply(const RestartReply& from);
  RestartReply(RestartReply&& from) noexcept
    : RestartReply() {
    *this = ::std::move(from);
  }

  inline RestartReply& operator=(const RestartReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartReply& operator=(RestartReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartReply* internal_default_instance() {
    return reinterpret_cast<const RestartReply*>(
               &_RestartReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RestartReply& a, RestartReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartReply* New() const final {
    return CreateMaybeMessage<RestartReply>(nullptr);
  }

  RestartReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartReply& from);
  void MergeFrom(const RestartReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.RestartReply";
  }
  protected:
  explicit RestartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string ok_ids = 2;
  int ok_ids_size() const;
  private:
  int _internal_ok_ids_size() const;
  public:
  void clear_ok_ids();
  const std::string& ok_ids(int index) const;
  std::string* mutable_ok_ids(int index);
  void set_ok_ids(int index, const std::string& value);
  void set_ok_ids(int index, std::string&& value);
  void set_ok_ids(int index, const char* value);
  void set_ok_ids(int index, const char* value, size_t size);
  std::string* add_ok_ids();
  void add_ok_ids(const std::string& value);
  void add_ok_ids(std::string&& value);
  void add_ok_ids(const char* value);
  void add_ok_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ok_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ok_ids();
  private:
  const std::string& _internal_ok_ids(int index) const;
  std::string* _internal_add_ok_ids();
  public:

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.RestartReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ok_ids_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {};
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kResourceConfigFieldNumber = 4,
    kRestartPolicyFieldNumber = 5,
    kNodeIdFieldNumber = 2,
  };
  // string container_id = 3;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // .container.ResourceConfig resource_config = 4;
  bool has_resource_config() const;
  private:
  bool _internal_has_resource_config() const;
  public:
  void clear_resource_config();
  const ::container::ResourceConfig& resource_config() const;
  ::container::ResourceConfig* release_resource_config();
  ::container::ResourceConfig* mutable_resource_config();
  void set_allocated_resource_config(::container::ResourceConfig* resource_config);
  private:
  const ::container::ResourceConfig& _internal_resource_config() const;
  ::container::ResourceConfig* _internal_mutable_resource_config();
  public:
  void unsafe_arena_set_allocated_resource_config(
      ::container::ResourceConfig* resource_config);
  ::container::ResourceConfig* unsafe_arena_release_resource_config();

  // .container.RestartPolicy restart_policy = 5;
  bool has_restart_policy() const;
  private:
  bool _internal_has_restart_policy() const;
  public:
  void clear_restart_policy();
  const ::container::RestartPolicy& restart_policy() const;
  ::container::RestartPolicy* release_restart_policy();
  ::container::RestartPolicy* mutable_restart_policy();
  void set_allocated_restart_policy(::container::RestartPolicy* restart_policy);
  private:
  const ::container::RestartPolicy& _internal_restart_policy() const;
  ::container::RestartPolicy* _internal_mutable_restart_policy();
  public:
  void unsafe_arena_set_allocated_restart_policy(
      ::container::RestartPolicy* restart_policy);
  ::container::RestartPolicy* unsafe_arena_release_restart_policy();

  // int64 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::common::RequestHeader* header_;
  ::container::ResourceConfig* resource_config_;
  ::container::RestartPolicy* restart_policy_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.UpdateReply) */ {
 public:
  inline UpdateReply() : UpdateReply(nullptr) {};
  virtual ~UpdateReply();

  UpdateReply(const UpdateReply& from);
  UpdateReply(UpdateReply&& from) noexcept
    : UpdateReply() {
    *this = ::std::move(from);
  }

  inline UpdateReply& operator=(const UpdateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReply& operator=(UpdateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReply* internal_default_instance() {
    return reinterpret_cast<const UpdateReply*>(
               &_UpdateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateReply& a, UpdateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReply* New() const final {
    return CreateMaybeMessage<UpdateReply>(nullptr);
  }

  UpdateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReply& from);
  void MergeFrom(const UpdateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.UpdateReply";
  }
  protected:
  explicit UpdateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.UpdateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.RemoveRequest) */ {
 public:
  inline RemoveRequest() : RemoveRequest(nullptr) {};
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const final {
    return CreateMaybeMessage<RemoveRequest>(nullptr);
  }

  RemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.RemoveRequest";
  }
  protected:
  explicit RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kRemoveVolumesFieldNumber = 4,
  };
  // repeated .container.ContainerIdList ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::container::ContainerIdList* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
      mutable_ids();
  private:
  const ::container::ContainerIdList& _internal_ids(int index) const;
  ::container::ContainerIdList* _internal_add_ids();
  public:
  const ::container::ContainerIdList& ids(int index) const;
  ::container::ContainerIdList* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
      ids() const;

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // bool remove_volumes = 4;
  void clear_remove_volumes();
  bool remove_volumes() const;
  void set_remove_volumes(bool value);
  private:
  bool _internal_remove_volumes() const;
  void _internal_set_remove_volumes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:container.RemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList > ids_;
  ::common::RequestHeader* header_;
  bool remove_volumes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.RemoveReply) */ {
 public:
  inline RemoveReply() : RemoveReply(nullptr) {};
  virtual ~RemoveReply();

  RemoveReply(const RemoveReply& from);
  RemoveReply(RemoveReply&& from) noexcept
    : RemoveReply() {
    *this = ::std::move(from);
  }

  inline RemoveReply& operator=(const RemoveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveReply& operator=(RemoveReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveReply* internal_default_instance() {
    return reinterpret_cast<const RemoveReply*>(
               &_RemoveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemoveReply& a, RemoveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveReply* New() const final {
    return CreateMaybeMessage<RemoveReply>(nullptr);
  }

  RemoveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveReply& from);
  void MergeFrom(const RemoveReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.RemoveReply";
  }
  protected:
  explicit RemoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string ok_ids = 2;
  int ok_ids_size() const;
  private:
  int _internal_ok_ids_size() const;
  public:
  void clear_ok_ids();
  const std::string& ok_ids(int index) const;
  std::string* mutable_ok_ids(int index);
  void set_ok_ids(int index, const std::string& value);
  void set_ok_ids(int index, std::string&& value);
  void set_ok_ids(int index, const char* value);
  void set_ok_ids(int index, const char* value, size_t size);
  std::string* add_ok_ids();
  void add_ok_ids(const std::string& value);
  void add_ok_ids(std::string&& value);
  void add_ok_ids(const char* value);
  void add_ok_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ok_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ok_ids();
  private:
  const std::string& _internal_ok_ids(int index) const;
  std::string* _internal_add_ok_ids();
  public:

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.RemoveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ok_ids_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {};
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // int64 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RequestHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.StatusReply) */ {
 public:
  inline StatusReply() : StatusReply(nullptr) {};
  virtual ~StatusReply();

  StatusReply(const StatusReply& from);
  StatusReply(StatusReply&& from) noexcept
    : StatusReply() {
    *this = ::std::move(from);
  }

  inline StatusReply& operator=(const StatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReply& operator=(StatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusReply* internal_default_instance() {
    return reinterpret_cast<const StatusReply*>(
               &_StatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StatusReply& a, StatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusReply* New() const final {
    return CreateMaybeMessage<StatusReply>(nullptr);
  }

  StatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusReply& from);
  void MergeFrom(const StatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.StatusReply";
  }
  protected:
  explicit StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.ResourceStat status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::container::ResourceStat* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ResourceStat >*
      mutable_status();
  private:
  const ::container::ResourceStat& _internal_status(int index) const;
  ::container::ResourceStat* _internal_add_status();
  public:
  const ::container::ResourceStat& status(int index) const;
  ::container::ResourceStat* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ResourceStat >&
      status() const;

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.StatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ResourceStat > status_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MonitorHistoryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.MonitorHistoryRequest) */ {
 public:
  inline MonitorHistoryRequest() : MonitorHistoryRequest(nullptr) {};
  virtual ~MonitorHistoryRequest();

  MonitorHistoryRequest(const MonitorHistoryRequest& from);
  MonitorHistoryRequest(MonitorHistoryRequest&& from) noexcept
    : MonitorHistoryRequest() {
    *this = ::std::move(from);
  }

  inline MonitorHistoryRequest& operator=(const MonitorHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorHistoryRequest& operator=(MonitorHistoryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorHistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const MonitorHistoryRequest*>(
               &_MonitorHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MonitorHistoryRequest& a, MonitorHistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorHistoryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorHistoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorHistoryRequest* New() const final {
    return CreateMaybeMessage<MonitorHistoryRequest>(nullptr);
  }

  MonitorHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorHistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorHistoryRequest& from);
  void MergeFrom(const MonitorHistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorHistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.MonitorHistoryRequest";
  }
  protected:
  explicit MonitorHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 5,
    kDataTypeFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string container_id = 5;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string data_type = 6;
  void clear_data_type();
  const std::string& data_type() const;
  void set_data_type(const std::string& value);
  void set_data_type(std::string&& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  std::string* mutable_data_type();
  std::string* release_data_type();
  void set_allocated_data_type(std::string* data_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_type(
      std::string* data_type);
  private:
  const std::string& _internal_data_type() const;
  void _internal_set_data_type(const std::string& value);
  std::string* _internal_mutable_data_type();
  public:

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // int64 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:container.MonitorHistoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_type_;
  ::common::RequestHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MonitorHistoryReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.MonitorHistoryReply) */ {
 public:
  inline MonitorHistoryReply() : MonitorHistoryReply(nullptr) {};
  virtual ~MonitorHistoryReply();

  MonitorHistoryReply(const MonitorHistoryReply& from);
  MonitorHistoryReply(MonitorHistoryReply&& from) noexcept
    : MonitorHistoryReply() {
    *this = ::std::move(from);
  }

  inline MonitorHistoryReply& operator=(const MonitorHistoryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorHistoryReply& operator=(MonitorHistoryReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorHistoryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorHistoryReply* internal_default_instance() {
    return reinterpret_cast<const MonitorHistoryReply*>(
               &_MonitorHistoryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MonitorHistoryReply& a, MonitorHistoryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorHistoryReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorHistoryReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorHistoryReply* New() const final {
    return CreateMaybeMessage<MonitorHistoryReply>(nullptr);
  }

  MonitorHistoryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorHistoryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorHistoryReply& from);
  void MergeFrom(const MonitorHistoryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorHistoryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.MonitorHistoryReply";
  }
  protected:
  explicit MonitorHistoryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .container.MonitorSample data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::container::MonitorSample* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::MonitorSample >*
      mutable_data();
  private:
  const ::container::MonitorSample& _internal_data(int index) const;
  ::container::MonitorSample* _internal_add_data();
  public:
  const ::container::MonitorSample& data(int index) const;
  ::container::MonitorSample* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::MonitorSample >&
      data() const;

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:container.MonitorHistoryReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::MonitorSample > data_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MonitorSample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:container.MonitorSample) */ {
 public:
  inline MonitorSample() : MonitorSample(nullptr) {};
  virtual ~MonitorSample();

  MonitorSample(const MonitorSample& from);
  MonitorSample(MonitorSample&& from) noexcept
    : MonitorSample() {
    *this = ::std::move(from);
  }

  inline MonitorSample& operator=(const MonitorSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorSample& operator=(MonitorSample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorSample* internal_default_instance() {
    return reinterpret_cast<const MonitorSample*>(
               &_MonitorSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MonitorSample& a, MonitorSample& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorSample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorSample* New() const final {
    return CreateMaybeMessage<MonitorSample>(nullptr);
  }

  MonitorSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorSample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorSample& from);
  void MergeFrom(const MonitorSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorSample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "container.MonitorSample";
  }
  protected:
  explicit MonitorSample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_5fservice_2eproto);
    return ::descriptor_table_container_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kCpuUsageFieldNumber = 10,
    kMemoryUsageFieldNumber = 20,
    kDiskUsageFieldNumber = 30,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double cpu_usage = 10;
  void clear_cpu_usage();
  double cpu_usage() const;
  void set_cpu_usage(double value);
  private:
  double _internal_cpu_usage() const;
  void _internal_set_cpu_usage(double value);
  public:

  // double memory_usage = 20;
  void clear_memory_usage();
  double memory_usage() const;
  void set_memory_usage(double value);
  private:
  double _internal_memory_usage() const;
  void _internal_set_memory_usage(double value);
  public:

  // double disk_usage = 30;
  void clear_disk_usage();
  double disk_usage() const;
  void set_disk_usage(double value);
  private:
  double _internal_disk_usage() const;
  void _internal_set_disk_usage(double value);
  public:

  // @@protoc_insertion_point(class_scope:container.MonitorSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double cpu_usage_;
  double memory_usage_;
  double disk_usage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListRequest

// .common.RequestHeader header = 1;
inline bool ListRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& ListRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& ListRequest::header() const {
  // @@protoc_insertion_point(field_get:container.ListRequest.header)
  return _internal_header();
}
inline void ListRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ListRequest.header)
}
inline ::common::RequestHeader* ListRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* ListRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.ListRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* ListRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* ListRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.ListRequest.header)
  return _internal_mutable_header();
}
inline void ListRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.ListRequest.header)
}

// repeated int64 node_ids = 2;
inline int ListRequest::_internal_node_ids_size() const {
  return node_ids_.size();
}
inline int ListRequest::node_ids_size() const {
  return _internal_node_ids_size();
}
inline void ListRequest::clear_node_ids() {
  node_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListRequest::_internal_node_ids(int index) const {
  return node_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListRequest::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.ListRequest.node_ids)
  return _internal_node_ids(index);
}
inline void ListRequest::set_node_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:container.ListRequest.node_ids)
}
inline void ListRequest::_internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  node_ids_.Add(value);
}
inline void ListRequest::add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_node_ids(value);
  // @@protoc_insertion_point(field_add:container.ListRequest.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ListRequest::_internal_node_ids() const {
  return node_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ListRequest::node_ids() const {
  // @@protoc_insertion_point(field_list:container.ListRequest.node_ids)
  return _internal_node_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ListRequest::_internal_mutable_node_ids() {
  return &node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ListRequest::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.ListRequest.node_ids)
  return _internal_mutable_node_ids();
}

// bool list_all = 3;
inline void ListRequest::clear_list_all() {
  list_all_ = false;
}
inline bool ListRequest::_internal_list_all() const {
  return list_all_;
}
inline bool ListRequest::list_all() const {
  // @@protoc_insertion_point(field_get:container.ListRequest.list_all)
  return _internal_list_all();
}
inline void ListRequest::_internal_set_list_all(bool value) {
  
  list_all_ = value;
}
inline void ListRequest::set_list_all(bool value) {
  _internal_set_list_all(value);
  // @@protoc_insertion_point(field_set:container.ListRequest.list_all)
}

// -------------------------------------------------------------------

// ListReply

// .common.ReplyHeader header = 1;
inline bool ListReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& ListReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& ListReply::header() const {
  // @@protoc_insertion_point(field_get:container.ListReply.header)
  return _internal_header();
}
inline void ListReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.ListReply.header)
}
inline ::common::ReplyHeader* ListReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* ListReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.ListReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* ListReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* ListReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.ListReply.header)
  return _internal_mutable_header();
}
inline void ListReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.ListReply.header)
}

// repeated .container.NodeContainer containers = 2;
inline int ListReply::_internal_containers_size() const {
  return containers_.size();
}
inline int ListReply::containers_size() const {
  return _internal_containers_size();
}
inline ::container::NodeContainer* ListReply::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:container.ListReply.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::NodeContainer >*
ListReply::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:container.ListReply.containers)
  return &containers_;
}
inline const ::container::NodeContainer& ListReply::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::container::NodeContainer& ListReply::containers(int index) const {
  // @@protoc_insertion_point(field_get:container.ListReply.containers)
  return _internal_containers(index);
}
inline ::container::NodeContainer* ListReply::_internal_add_containers() {
  return containers_.Add();
}
inline ::container::NodeContainer* ListReply::add_containers() {
  // @@protoc_insertion_point(field_add:container.ListReply.containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::NodeContainer >&
ListReply::containers() const {
  // @@protoc_insertion_point(field_list:container.ListReply.containers)
  return containers_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateRequest

// .common.RequestHeader header = 1;
inline bool CreateRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CreateRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& CreateRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& CreateRequest::header() const {
  // @@protoc_insertion_point(field_get:container.CreateRequest.header)
  return _internal_header();
}
inline void CreateRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.CreateRequest.header)
}
inline ::common::RequestHeader* CreateRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* CreateRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.CreateRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* CreateRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* CreateRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.CreateRequest.header)
  return _internal_mutable_header();
}
inline void CreateRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.CreateRequest.header)
}

// int64 node_id = 2;
inline void CreateRequest::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRequest::node_id() const {
  // @@protoc_insertion_point(field_get:container.CreateRequest.node_id)
  return _internal_node_id();
}
inline void CreateRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void CreateRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.CreateRequest.node_id)
}

// string name = 3;
inline void CreateRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::name() const {
  // @@protoc_insertion_point(field_get:container.CreateRequest.name)
  return _internal_name();
}
inline void CreateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:container.CreateRequest.name)
}
inline std::string* CreateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:container.CreateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.CreateRequest.name)
}
inline std::string* CreateRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:container.CreateRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.CreateRequest.name)
}
inline std::string* CreateRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.CreateRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.CreateRequest.name)
}

// bool enable_graphic = 4;
inline void CreateRequest::clear_enable_graphic() {
  enable_graphic_ = false;
}
inline bool CreateRequest::_internal_enable_graphic() const {
  return enable_graphic_;
}
inline bool CreateRequest::enable_graphic() const {
  // @@protoc_insertion_point(field_get:container.CreateRequest.enable_graphic)
  return _internal_enable_graphic();
}
inline void CreateRequest::_internal_set_enable_graphic(bool value) {
  
  enable_graphic_ = value;
}
inline void CreateRequest::set_enable_graphic(bool value) {
  _internal_set_enable_graphic(value);
  // @@protoc_insertion_point(field_set:container.CreateRequest.enable_graphic)
}

// .container.ContainerConfig config = 11;
inline bool CreateRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool CreateRequest::has_config() const {
  return _internal_has_config();
}
inline const ::container::ContainerConfig& CreateRequest::_internal_config() const {
  const ::container::ContainerConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ContainerConfig*>(
      &::container::_ContainerConfig_default_instance_);
}
inline const ::container::ContainerConfig& CreateRequest::config() const {
  // @@protoc_insertion_point(field_get:container.CreateRequest.config)
  return _internal_config();
}
inline void CreateRequest::unsafe_arena_set_allocated_config(
    ::container::ContainerConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.CreateRequest.config)
}
inline ::container::ContainerConfig* CreateRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ContainerConfig* CreateRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:container.CreateRequest.config)
  
  ::container::ContainerConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::container::ContainerConfig* CreateRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ContainerConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::container::ContainerConfig* CreateRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:container.CreateRequest.config)
  return _internal_mutable_config();
}
inline void CreateRequest::set_allocated_config(::container::ContainerConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:container.CreateRequest.config)
}

// .container.HostConfig host_config = 12;
inline bool CreateRequest::_internal_has_host_config() const {
  return this != internal_default_instance() && host_config_ != nullptr;
}
inline bool CreateRequest::has_host_config() const {
  return _internal_has_host_config();
}
inline const ::container::HostConfig& CreateRequest::_internal_host_config() const {
  const ::container::HostConfig* p = host_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::HostConfig*>(
      &::container::_HostConfig_default_instance_);
}
inline const ::container::HostConfig& CreateRequest::host_config() const {
  // @@protoc_insertion_point(field_get:container.CreateRequest.host_config)
  return _internal_host_config();
}
inline void CreateRequest::unsafe_arena_set_allocated_host_config(
    ::container::HostConfig* host_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_config_);
  }
  host_config_ = host_config;
  if (host_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.CreateRequest.host_config)
}
inline ::container::HostConfig* CreateRequest::release_host_config() {
  auto temp = unsafe_arena_release_host_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::HostConfig* CreateRequest::unsafe_arena_release_host_config() {
  // @@protoc_insertion_point(field_release:container.CreateRequest.host_config)
  
  ::container::HostConfig* temp = host_config_;
  host_config_ = nullptr;
  return temp;
}
inline ::container::HostConfig* CreateRequest::_internal_mutable_host_config() {
  
  if (host_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::HostConfig>(GetArena());
    host_config_ = p;
  }
  return host_config_;
}
inline ::container::HostConfig* CreateRequest::mutable_host_config() {
  // @@protoc_insertion_point(field_mutable:container.CreateRequest.host_config)
  return _internal_mutable_host_config();
}
inline void CreateRequest::set_allocated_host_config(::container::HostConfig* host_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_config_);
  }
  if (host_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_config)->GetArena();
    if (message_arena != submessage_arena) {
      host_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_config, submessage_arena);
    }
    
  } else {
    
  }
  host_config_ = host_config;
  // @@protoc_insertion_point(field_set_allocated:container.CreateRequest.host_config)
}

// map<string, .container.EndpointSetting> network_config = 13;
inline int CreateRequest::_internal_network_config_size() const {
  return network_config_.size();
}
inline int CreateRequest::network_config_size() const {
  return _internal_network_config_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
CreateRequest::_internal_network_config() const {
  return network_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
CreateRequest::network_config() const {
  // @@protoc_insertion_point(field_map:container.CreateRequest.network_config)
  return _internal_network_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
CreateRequest::_internal_mutable_network_config() {
  return network_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
CreateRequest::mutable_network_config() {
  // @@protoc_insertion_point(field_mutable_map:container.CreateRequest.network_config)
  return _internal_mutable_network_config();
}

// -------------------------------------------------------------------

// CreateReply

// .common.ReplyHeader header = 1;
inline bool CreateReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CreateReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& CreateReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& CreateReply::header() const {
  // @@protoc_insertion_point(field_get:container.CreateReply.header)
  return _internal_header();
}
inline void CreateReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.CreateReply.header)
}
inline ::common::ReplyHeader* CreateReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* CreateReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.CreateReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* CreateReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* CreateReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.CreateReply.header)
  return _internal_mutable_header();
}
inline void CreateReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.CreateReply.header)
}

// string container_id = 2;
inline void CreateReply::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReply::container_id() const {
  // @@protoc_insertion_point(field_get:container.CreateReply.container_id)
  return _internal_container_id();
}
inline void CreateReply::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:container.CreateReply.container_id)
}
inline std::string* CreateReply::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:container.CreateReply.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& CreateReply::_internal_container_id() const {
  return container_id_.Get();
}
inline void CreateReply::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReply::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.CreateReply.container_id)
}
inline void CreateReply::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.CreateReply.container_id)
}
inline void CreateReply::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.CreateReply.container_id)
}
inline std::string* CreateReply::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReply::release_container_id() {
  // @@protoc_insertion_point(field_release:container.CreateReply.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReply::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.CreateReply.container_id)
}
inline std::string* CreateReply::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.CreateReply.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReply::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.CreateReply.container_id)
}

// repeated string warnings = 3;
inline int CreateReply::_internal_warnings_size() const {
  return warnings_.size();
}
inline int CreateReply::warnings_size() const {
  return _internal_warnings_size();
}
inline void CreateReply::clear_warnings() {
  warnings_.Clear();
}
inline std::string* CreateReply::add_warnings() {
  // @@protoc_insertion_point(field_add_mutable:container.CreateReply.warnings)
  return _internal_add_warnings();
}
inline const std::string& CreateReply::_internal_warnings(int index) const {
  return warnings_.Get(index);
}
inline const std::string& CreateReply::warnings(int index) const {
  // @@protoc_insertion_point(field_get:container.CreateReply.warnings)
  return _internal_warnings(index);
}
inline std::string* CreateReply::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:container.CreateReply.warnings)
  return warnings_.Mutable(index);
}
inline void CreateReply::set_warnings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.CreateReply.warnings)
  warnings_.Mutable(index)->assign(value);
}
inline void CreateReply::set_warnings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.CreateReply.warnings)
  warnings_.Mutable(index)->assign(std::move(value));
}
inline void CreateReply::set_warnings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.CreateReply.warnings)
}
inline void CreateReply::set_warnings(int index, const char* value, size_t size) {
  warnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.CreateReply.warnings)
}
inline std::string* CreateReply::_internal_add_warnings() {
  return warnings_.Add();
}
inline void CreateReply::add_warnings(const std::string& value) {
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.CreateReply.warnings)
}
inline void CreateReply::add_warnings(std::string&& value) {
  warnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.CreateReply.warnings)
}
inline void CreateReply::add_warnings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.CreateReply.warnings)
}
inline void CreateReply::add_warnings(const char* value, size_t size) {
  warnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.CreateReply.warnings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateReply::warnings() const {
  // @@protoc_insertion_point(field_list:container.CreateReply.warnings)
  return warnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateReply::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:container.CreateReply.warnings)
  return &warnings_;
}

// -------------------------------------------------------------------

// InspectRequest

// .common.RequestHeader header = 1;
inline bool InspectRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InspectRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& InspectRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& InspectRequest::header() const {
  // @@protoc_insertion_point(field_get:container.InspectRequest.header)
  return _internal_header();
}
inline void InspectRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.InspectRequest.header)
}
inline ::common::RequestHeader* InspectRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* InspectRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.InspectRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* InspectRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* InspectRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.InspectRequest.header)
  return _internal_mutable_header();
}
inline void InspectRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.InspectRequest.header)
}

// int64 node_id = 2;
inline void InspectRequest::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectRequest::node_id() const {
  // @@protoc_insertion_point(field_get:container.InspectRequest.node_id)
  return _internal_node_id();
}
inline void InspectRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void InspectRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.InspectRequest.node_id)
}

// string container_id = 3;
inline void InspectRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectRequest::container_id() const {
  // @@protoc_insertion_point(field_get:container.InspectRequest.container_id)
  return _internal_container_id();
}
inline void InspectRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:container.InspectRequest.container_id)
}
inline std::string* InspectRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:container.InspectRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& InspectRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void InspectRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.InspectRequest.container_id)
}
inline void InspectRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.InspectRequest.container_id)
}
inline void InspectRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.InspectRequest.container_id)
}
inline std::string* InspectRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:container.InspectRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.InspectRequest.container_id)
}
inline std::string* InspectRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.InspectRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.InspectRequest.container_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InspectReply

// .common.ReplyHeader header = 1;
inline bool InspectReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InspectReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& InspectReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& InspectReply::header() const {
  // @@protoc_insertion_point(field_get:container.InspectReply.header)
  return _internal_header();
}
inline void InspectReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.InspectReply.header)
}
inline ::common::ReplyHeader* InspectReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* InspectReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.InspectReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* InspectReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* InspectReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.InspectReply.header)
  return _internal_mutable_header();
}
inline void InspectReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.InspectReply.header)
}

// .container.ContainerInfo info = 2;
inline bool InspectReply::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool InspectReply::has_info() const {
  return _internal_has_info();
}
inline const ::container::ContainerInfo& InspectReply::_internal_info() const {
  const ::container::ContainerInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ContainerInfo*>(
      &::container::_ContainerInfo_default_instance_);
}
inline const ::container::ContainerInfo& InspectReply::info() const {
  // @@protoc_insertion_point(field_get:container.InspectReply.info)
  return _internal_info();
}
inline void InspectReply::unsafe_arena_set_allocated_info(
    ::container::ContainerInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.InspectReply.info)
}
inline ::container::ContainerInfo* InspectReply::release_info() {
  auto temp = unsafe_arena_release_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ContainerInfo* InspectReply::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:container.InspectReply.info)
  
  ::container::ContainerInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::container::ContainerInfo* InspectReply::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ContainerInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::container::ContainerInfo* InspectReply::mutable_info() {
  // @@protoc_insertion_point(field_mutable:container.InspectReply.info)
  return _internal_mutable_info();
}
inline void InspectReply::set_allocated_info(::container::ContainerInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:container.InspectReply.info)
}

// .container.HostConfig host_config = 3;
inline bool InspectReply::_internal_has_host_config() const {
  return this != internal_default_instance() && host_config_ != nullptr;
}
inline bool InspectReply::has_host_config() const {
  return _internal_has_host_config();
}
inline const ::container::HostConfig& InspectReply::_internal_host_config() const {
  const ::container::HostConfig* p = host_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::HostConfig*>(
      &::container::_HostConfig_default_instance_);
}
inline const ::container::HostConfig& InspectReply::host_config() const {
  // @@protoc_insertion_point(field_get:container.InspectReply.host_config)
  return _internal_host_config();
}
inline void InspectReply::unsafe_arena_set_allocated_host_config(
    ::container::HostConfig* host_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_config_);
  }
  host_config_ = host_config;
  if (host_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.InspectReply.host_config)
}
inline ::container::HostConfig* InspectReply::release_host_config() {
  auto temp = unsafe_arena_release_host_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::HostConfig* InspectReply::unsafe_arena_release_host_config() {
  // @@protoc_insertion_point(field_release:container.InspectReply.host_config)
  
  ::container::HostConfig* temp = host_config_;
  host_config_ = nullptr;
  return temp;
}
inline ::container::HostConfig* InspectReply::_internal_mutable_host_config() {
  
  if (host_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::HostConfig>(GetArena());
    host_config_ = p;
  }
  return host_config_;
}
inline ::container::HostConfig* InspectReply::mutable_host_config() {
  // @@protoc_insertion_point(field_mutable:container.InspectReply.host_config)
  return _internal_mutable_host_config();
}
inline void InspectReply::set_allocated_host_config(::container::HostConfig* host_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_config_);
  }
  if (host_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_config)->GetArena();
    if (message_arena != submessage_arena) {
      host_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_config, submessage_arena);
    }
    
  } else {
    
  }
  host_config_ = host_config;
  // @@protoc_insertion_point(field_set_allocated:container.InspectReply.host_config)
}

// repeated .container.Mount mounts = 4;
inline int InspectReply::_internal_mounts_size() const {
  return mounts_.size();
}
inline int InspectReply::mounts_size() const {
  return _internal_mounts_size();
}
inline ::container::Mount* InspectReply::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:container.InspectReply.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >*
InspectReply::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:container.InspectReply.mounts)
  return &mounts_;
}
inline const ::container::Mount& InspectReply::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::container::Mount& InspectReply::mounts(int index) const {
  // @@protoc_insertion_point(field_get:container.InspectReply.mounts)
  return _internal_mounts(index);
}
inline ::container::Mount* InspectReply::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::container::Mount* InspectReply::add_mounts() {
  // @@protoc_insertion_point(field_add:container.InspectReply.mounts)
  return _internal_add_mounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::Mount >&
InspectReply::mounts() const {
  // @@protoc_insertion_point(field_list:container.InspectReply.mounts)
  return mounts_;
}

// .container.ContainerConfig config = 5;
inline bool InspectReply::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool InspectReply::has_config() const {
  return _internal_has_config();
}
inline const ::container::ContainerConfig& InspectReply::_internal_config() const {
  const ::container::ContainerConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ContainerConfig*>(
      &::container::_ContainerConfig_default_instance_);
}
inline const ::container::ContainerConfig& InspectReply::config() const {
  // @@protoc_insertion_point(field_get:container.InspectReply.config)
  return _internal_config();
}
inline void InspectReply::unsafe_arena_set_allocated_config(
    ::container::ContainerConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.InspectReply.config)
}
inline ::container::ContainerConfig* InspectReply::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ContainerConfig* InspectReply::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:container.InspectReply.config)
  
  ::container::ContainerConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::container::ContainerConfig* InspectReply::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ContainerConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::container::ContainerConfig* InspectReply::mutable_config() {
  // @@protoc_insertion_point(field_mutable:container.InspectReply.config)
  return _internal_mutable_config();
}
inline void InspectReply::set_allocated_config(::container::ContainerConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:container.InspectReply.config)
}

// map<string, .container.EndpointSetting> network_settings = 6;
inline int InspectReply::_internal_network_settings_size() const {
  return network_settings_.size();
}
inline int InspectReply::network_settings_size() const {
  return _internal_network_settings_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
InspectReply::_internal_network_settings() const {
  return network_settings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >&
InspectReply::network_settings() const {
  // @@protoc_insertion_point(field_map:container.InspectReply.network_settings)
  return _internal_network_settings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
InspectReply::_internal_mutable_network_settings() {
  return network_settings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::container::EndpointSetting >*
InspectReply::mutable_network_settings() {
  // @@protoc_insertion_point(field_mutable_map:container.InspectReply.network_settings)
  return _internal_mutable_network_settings();
}

// -------------------------------------------------------------------

// StartRequest

// .common.RequestHeader header = 1;
inline bool StartRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StartRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& StartRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& StartRequest::header() const {
  // @@protoc_insertion_point(field_get:container.StartRequest.header)
  return _internal_header();
}
inline void StartRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.StartRequest.header)
}
inline ::common::RequestHeader* StartRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* StartRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.StartRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* StartRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* StartRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.StartRequest.header)
  return _internal_mutable_header();
}
inline void StartRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.StartRequest.header)
}

// repeated .container.ContainerIdList ids = 2;
inline int StartRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int StartRequest::ids_size() const {
  return _internal_ids_size();
}
inline ::container::ContainerIdList* StartRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.StartRequest.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
StartRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.StartRequest.ids)
  return &ids_;
}
inline const ::container::ContainerIdList& StartRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::container::ContainerIdList& StartRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:container.StartRequest.ids)
  return _internal_ids(index);
}
inline ::container::ContainerIdList* StartRequest::_internal_add_ids() {
  return ids_.Add();
}
inline ::container::ContainerIdList* StartRequest::add_ids() {
  // @@protoc_insertion_point(field_add:container.StartRequest.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
StartRequest::ids() const {
  // @@protoc_insertion_point(field_list:container.StartRequest.ids)
  return ids_;
}

// -------------------------------------------------------------------

// StartReply

// .common.ReplyHeader header = 1;
inline bool StartReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StartReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& StartReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& StartReply::header() const {
  // @@protoc_insertion_point(field_get:container.StartReply.header)
  return _internal_header();
}
inline void StartReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.StartReply.header)
}
inline ::common::ReplyHeader* StartReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* StartReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.StartReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* StartReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* StartReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.StartReply.header)
  return _internal_mutable_header();
}
inline void StartReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.StartReply.header)
}

// repeated string ok_ids = 2;
inline int StartReply::_internal_ok_ids_size() const {
  return ok_ids_.size();
}
inline int StartReply::ok_ids_size() const {
  return _internal_ok_ids_size();
}
inline void StartReply::clear_ok_ids() {
  ok_ids_.Clear();
}
inline std::string* StartReply::add_ok_ids() {
  // @@protoc_insertion_point(field_add_mutable:container.StartReply.ok_ids)
  return _internal_add_ok_ids();
}
inline const std::string& StartReply::_internal_ok_ids(int index) const {
  return ok_ids_.Get(index);
}
inline const std::string& StartReply::ok_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.StartReply.ok_ids)
  return _internal_ok_ids(index);
}
inline std::string* StartReply::mutable_ok_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.StartReply.ok_ids)
  return ok_ids_.Mutable(index);
}
inline void StartReply::set_ok_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.StartReply.ok_ids)
  ok_ids_.Mutable(index)->assign(value);
}
inline void StartReply::set_ok_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.StartReply.ok_ids)
  ok_ids_.Mutable(index)->assign(std::move(value));
}
inline void StartReply::set_ok_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.StartReply.ok_ids)
}
inline void StartReply::set_ok_ids(int index, const char* value, size_t size) {
  ok_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.StartReply.ok_ids)
}
inline std::string* StartReply::_internal_add_ok_ids() {
  return ok_ids_.Add();
}
inline void StartReply::add_ok_ids(const std::string& value) {
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.StartReply.ok_ids)
}
inline void StartReply::add_ok_ids(std::string&& value) {
  ok_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.StartReply.ok_ids)
}
inline void StartReply::add_ok_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.StartReply.ok_ids)
}
inline void StartReply::add_ok_ids(const char* value, size_t size) {
  ok_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.StartReply.ok_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartReply::ok_ids() const {
  // @@protoc_insertion_point(field_list:container.StartReply.ok_ids)
  return ok_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartReply::mutable_ok_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.StartReply.ok_ids)
  return &ok_ids_;
}

// -------------------------------------------------------------------

// StopRequest

// .common.RequestHeader header = 1;
inline bool StopRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StopRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& StopRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& StopRequest::header() const {
  // @@protoc_insertion_point(field_get:container.StopRequest.header)
  return _internal_header();
}
inline void StopRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.StopRequest.header)
}
inline ::common::RequestHeader* StopRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* StopRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.StopRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* StopRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* StopRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.StopRequest.header)
  return _internal_mutable_header();
}
inline void StopRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.StopRequest.header)
}

// repeated .container.ContainerIdList ids = 2;
inline int StopRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int StopRequest::ids_size() const {
  return _internal_ids_size();
}
inline ::container::ContainerIdList* StopRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.StopRequest.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
StopRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.StopRequest.ids)
  return &ids_;
}
inline const ::container::ContainerIdList& StopRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::container::ContainerIdList& StopRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:container.StopRequest.ids)
  return _internal_ids(index);
}
inline ::container::ContainerIdList* StopRequest::_internal_add_ids() {
  return ids_.Add();
}
inline ::container::ContainerIdList* StopRequest::add_ids() {
  // @@protoc_insertion_point(field_add:container.StopRequest.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
StopRequest::ids() const {
  // @@protoc_insertion_point(field_list:container.StopRequest.ids)
  return ids_;
}

// -------------------------------------------------------------------

// StopReply

// .common.ReplyHeader header = 1;
inline bool StopReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StopReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& StopReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& StopReply::header() const {
  // @@protoc_insertion_point(field_get:container.StopReply.header)
  return _internal_header();
}
inline void StopReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.StopReply.header)
}
inline ::common::ReplyHeader* StopReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* StopReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.StopReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* StopReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* StopReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.StopReply.header)
  return _internal_mutable_header();
}
inline void StopReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.StopReply.header)
}

// repeated string ok_ids = 2;
inline int StopReply::_internal_ok_ids_size() const {
  return ok_ids_.size();
}
inline int StopReply::ok_ids_size() const {
  return _internal_ok_ids_size();
}
inline void StopReply::clear_ok_ids() {
  ok_ids_.Clear();
}
inline std::string* StopReply::add_ok_ids() {
  // @@protoc_insertion_point(field_add_mutable:container.StopReply.ok_ids)
  return _internal_add_ok_ids();
}
inline const std::string& StopReply::_internal_ok_ids(int index) const {
  return ok_ids_.Get(index);
}
inline const std::string& StopReply::ok_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.StopReply.ok_ids)
  return _internal_ok_ids(index);
}
inline std::string* StopReply::mutable_ok_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.StopReply.ok_ids)
  return ok_ids_.Mutable(index);
}
inline void StopReply::set_ok_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.StopReply.ok_ids)
  ok_ids_.Mutable(index)->assign(value);
}
inline void StopReply::set_ok_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.StopReply.ok_ids)
  ok_ids_.Mutable(index)->assign(std::move(value));
}
inline void StopReply::set_ok_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.StopReply.ok_ids)
}
inline void StopReply::set_ok_ids(int index, const char* value, size_t size) {
  ok_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.StopReply.ok_ids)
}
inline std::string* StopReply::_internal_add_ok_ids() {
  return ok_ids_.Add();
}
inline void StopReply::add_ok_ids(const std::string& value) {
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.StopReply.ok_ids)
}
inline void StopReply::add_ok_ids(std::string&& value) {
  ok_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.StopReply.ok_ids)
}
inline void StopReply::add_ok_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.StopReply.ok_ids)
}
inline void StopReply::add_ok_ids(const char* value, size_t size) {
  ok_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.StopReply.ok_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopReply::ok_ids() const {
  // @@protoc_insertion_point(field_list:container.StopReply.ok_ids)
  return ok_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopReply::mutable_ok_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.StopReply.ok_ids)
  return &ok_ids_;
}

// -------------------------------------------------------------------

// KillRequest

// .common.RequestHeader header = 1;
inline bool KillRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool KillRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& KillRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& KillRequest::header() const {
  // @@protoc_insertion_point(field_get:container.KillRequest.header)
  return _internal_header();
}
inline void KillRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.KillRequest.header)
}
inline ::common::RequestHeader* KillRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* KillRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.KillRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* KillRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* KillRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.KillRequest.header)
  return _internal_mutable_header();
}
inline void KillRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.KillRequest.header)
}

// repeated .container.ContainerIdList ids = 2;
inline int KillRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int KillRequest::ids_size() const {
  return _internal_ids_size();
}
inline ::container::ContainerIdList* KillRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.KillRequest.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
KillRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.KillRequest.ids)
  return &ids_;
}
inline const ::container::ContainerIdList& KillRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::container::ContainerIdList& KillRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:container.KillRequest.ids)
  return _internal_ids(index);
}
inline ::container::ContainerIdList* KillRequest::_internal_add_ids() {
  return ids_.Add();
}
inline ::container::ContainerIdList* KillRequest::add_ids() {
  // @@protoc_insertion_point(field_add:container.KillRequest.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
KillRequest::ids() const {
  // @@protoc_insertion_point(field_list:container.KillRequest.ids)
  return ids_;
}

// -------------------------------------------------------------------

// KillReply

// .common.ReplyHeader header = 1;
inline bool KillReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool KillReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& KillReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& KillReply::header() const {
  // @@protoc_insertion_point(field_get:container.KillReply.header)
  return _internal_header();
}
inline void KillReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.KillReply.header)
}
inline ::common::ReplyHeader* KillReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* KillReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.KillReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* KillReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* KillReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.KillReply.header)
  return _internal_mutable_header();
}
inline void KillReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.KillReply.header)
}

// repeated string ok_ids = 2;
inline int KillReply::_internal_ok_ids_size() const {
  return ok_ids_.size();
}
inline int KillReply::ok_ids_size() const {
  return _internal_ok_ids_size();
}
inline void KillReply::clear_ok_ids() {
  ok_ids_.Clear();
}
inline std::string* KillReply::add_ok_ids() {
  // @@protoc_insertion_point(field_add_mutable:container.KillReply.ok_ids)
  return _internal_add_ok_ids();
}
inline const std::string& KillReply::_internal_ok_ids(int index) const {
  return ok_ids_.Get(index);
}
inline const std::string& KillReply::ok_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.KillReply.ok_ids)
  return _internal_ok_ids(index);
}
inline std::string* KillReply::mutable_ok_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.KillReply.ok_ids)
  return ok_ids_.Mutable(index);
}
inline void KillReply::set_ok_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.KillReply.ok_ids)
  ok_ids_.Mutable(index)->assign(value);
}
inline void KillReply::set_ok_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.KillReply.ok_ids)
  ok_ids_.Mutable(index)->assign(std::move(value));
}
inline void KillReply::set_ok_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.KillReply.ok_ids)
}
inline void KillReply::set_ok_ids(int index, const char* value, size_t size) {
  ok_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.KillReply.ok_ids)
}
inline std::string* KillReply::_internal_add_ok_ids() {
  return ok_ids_.Add();
}
inline void KillReply::add_ok_ids(const std::string& value) {
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.KillReply.ok_ids)
}
inline void KillReply::add_ok_ids(std::string&& value) {
  ok_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.KillReply.ok_ids)
}
inline void KillReply::add_ok_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.KillReply.ok_ids)
}
inline void KillReply::add_ok_ids(const char* value, size_t size) {
  ok_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.KillReply.ok_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KillReply::ok_ids() const {
  // @@protoc_insertion_point(field_list:container.KillReply.ok_ids)
  return ok_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KillReply::mutable_ok_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.KillReply.ok_ids)
  return &ok_ids_;
}

// -------------------------------------------------------------------

// RestartRequest

// .common.RequestHeader header = 1;
inline bool RestartRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RestartRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& RestartRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& RestartRequest::header() const {
  // @@protoc_insertion_point(field_get:container.RestartRequest.header)
  return _internal_header();
}
inline void RestartRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.RestartRequest.header)
}
inline ::common::RequestHeader* RestartRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* RestartRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.RestartRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* RestartRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* RestartRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.RestartRequest.header)
  return _internal_mutable_header();
}
inline void RestartRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.RestartRequest.header)
}

// repeated .container.ContainerIdList ids = 2;
inline int RestartRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int RestartRequest::ids_size() const {
  return _internal_ids_size();
}
inline ::container::ContainerIdList* RestartRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.RestartRequest.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
RestartRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.RestartRequest.ids)
  return &ids_;
}
inline const ::container::ContainerIdList& RestartRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::container::ContainerIdList& RestartRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:container.RestartRequest.ids)
  return _internal_ids(index);
}
inline ::container::ContainerIdList* RestartRequest::_internal_add_ids() {
  return ids_.Add();
}
inline ::container::ContainerIdList* RestartRequest::add_ids() {
  // @@protoc_insertion_point(field_add:container.RestartRequest.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
RestartRequest::ids() const {
  // @@protoc_insertion_point(field_list:container.RestartRequest.ids)
  return ids_;
}

// -------------------------------------------------------------------

// RestartReply

// .common.ReplyHeader header = 1;
inline bool RestartReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RestartReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& RestartReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& RestartReply::header() const {
  // @@protoc_insertion_point(field_get:container.RestartReply.header)
  return _internal_header();
}
inline void RestartReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.RestartReply.header)
}
inline ::common::ReplyHeader* RestartReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* RestartReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.RestartReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* RestartReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* RestartReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.RestartReply.header)
  return _internal_mutable_header();
}
inline void RestartReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.RestartReply.header)
}

// repeated string ok_ids = 2;
inline int RestartReply::_internal_ok_ids_size() const {
  return ok_ids_.size();
}
inline int RestartReply::ok_ids_size() const {
  return _internal_ok_ids_size();
}
inline void RestartReply::clear_ok_ids() {
  ok_ids_.Clear();
}
inline std::string* RestartReply::add_ok_ids() {
  // @@protoc_insertion_point(field_add_mutable:container.RestartReply.ok_ids)
  return _internal_add_ok_ids();
}
inline const std::string& RestartReply::_internal_ok_ids(int index) const {
  return ok_ids_.Get(index);
}
inline const std::string& RestartReply::ok_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.RestartReply.ok_ids)
  return _internal_ok_ids(index);
}
inline std::string* RestartReply::mutable_ok_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.RestartReply.ok_ids)
  return ok_ids_.Mutable(index);
}
inline void RestartReply::set_ok_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.RestartReply.ok_ids)
  ok_ids_.Mutable(index)->assign(value);
}
inline void RestartReply::set_ok_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.RestartReply.ok_ids)
  ok_ids_.Mutable(index)->assign(std::move(value));
}
inline void RestartReply::set_ok_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.RestartReply.ok_ids)
}
inline void RestartReply::set_ok_ids(int index, const char* value, size_t size) {
  ok_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.RestartReply.ok_ids)
}
inline std::string* RestartReply::_internal_add_ok_ids() {
  return ok_ids_.Add();
}
inline void RestartReply::add_ok_ids(const std::string& value) {
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.RestartReply.ok_ids)
}
inline void RestartReply::add_ok_ids(std::string&& value) {
  ok_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.RestartReply.ok_ids)
}
inline void RestartReply::add_ok_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.RestartReply.ok_ids)
}
inline void RestartReply::add_ok_ids(const char* value, size_t size) {
  ok_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.RestartReply.ok_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RestartReply::ok_ids() const {
  // @@protoc_insertion_point(field_list:container.RestartReply.ok_ids)
  return ok_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RestartReply::mutable_ok_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.RestartReply.ok_ids)
  return &ok_ids_;
}

// -------------------------------------------------------------------

// UpdateRequest

// .common.RequestHeader header = 1;
inline bool UpdateRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UpdateRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& UpdateRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& UpdateRequest::header() const {
  // @@protoc_insertion_point(field_get:container.UpdateRequest.header)
  return _internal_header();
}
inline void UpdateRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.UpdateRequest.header)
}
inline ::common::RequestHeader* UpdateRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* UpdateRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.UpdateRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* UpdateRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* UpdateRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.UpdateRequest.header)
  return _internal_mutable_header();
}
inline void UpdateRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.UpdateRequest.header)
}

// int64 node_id = 2;
inline void UpdateRequest::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateRequest::node_id() const {
  // @@protoc_insertion_point(field_get:container.UpdateRequest.node_id)
  return _internal_node_id();
}
inline void UpdateRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void UpdateRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.UpdateRequest.node_id)
}

// string container_id = 3;
inline void UpdateRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::container_id() const {
  // @@protoc_insertion_point(field_get:container.UpdateRequest.container_id)
  return _internal_container_id();
}
inline void UpdateRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:container.UpdateRequest.container_id)
}
inline std::string* UpdateRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:container.UpdateRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& UpdateRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void UpdateRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.UpdateRequest.container_id)
}
inline void UpdateRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.UpdateRequest.container_id)
}
inline void UpdateRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.UpdateRequest.container_id)
}
inline std::string* UpdateRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:container.UpdateRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.UpdateRequest.container_id)
}
inline std::string* UpdateRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.UpdateRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.UpdateRequest.container_id)
}

// .container.ResourceConfig resource_config = 4;
inline bool UpdateRequest::_internal_has_resource_config() const {
  return this != internal_default_instance() && resource_config_ != nullptr;
}
inline bool UpdateRequest::has_resource_config() const {
  return _internal_has_resource_config();
}
inline const ::container::ResourceConfig& UpdateRequest::_internal_resource_config() const {
  const ::container::ResourceConfig* p = resource_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::ResourceConfig*>(
      &::container::_ResourceConfig_default_instance_);
}
inline const ::container::ResourceConfig& UpdateRequest::resource_config() const {
  // @@protoc_insertion_point(field_get:container.UpdateRequest.resource_config)
  return _internal_resource_config();
}
inline void UpdateRequest::unsafe_arena_set_allocated_resource_config(
    ::container::ResourceConfig* resource_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_config_);
  }
  resource_config_ = resource_config;
  if (resource_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.UpdateRequest.resource_config)
}
inline ::container::ResourceConfig* UpdateRequest::release_resource_config() {
  auto temp = unsafe_arena_release_resource_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::ResourceConfig* UpdateRequest::unsafe_arena_release_resource_config() {
  // @@protoc_insertion_point(field_release:container.UpdateRequest.resource_config)
  
  ::container::ResourceConfig* temp = resource_config_;
  resource_config_ = nullptr;
  return temp;
}
inline ::container::ResourceConfig* UpdateRequest::_internal_mutable_resource_config() {
  
  if (resource_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::ResourceConfig>(GetArena());
    resource_config_ = p;
  }
  return resource_config_;
}
inline ::container::ResourceConfig* UpdateRequest::mutable_resource_config() {
  // @@protoc_insertion_point(field_mutable:container.UpdateRequest.resource_config)
  return _internal_mutable_resource_config();
}
inline void UpdateRequest::set_allocated_resource_config(::container::ResourceConfig* resource_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_config_);
  }
  if (resource_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_config)->GetArena();
    if (message_arena != submessage_arena) {
      resource_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_config, submessage_arena);
    }
    
  } else {
    
  }
  resource_config_ = resource_config;
  // @@protoc_insertion_point(field_set_allocated:container.UpdateRequest.resource_config)
}

// .container.RestartPolicy restart_policy = 5;
inline bool UpdateRequest::_internal_has_restart_policy() const {
  return this != internal_default_instance() && restart_policy_ != nullptr;
}
inline bool UpdateRequest::has_restart_policy() const {
  return _internal_has_restart_policy();
}
inline const ::container::RestartPolicy& UpdateRequest::_internal_restart_policy() const {
  const ::container::RestartPolicy* p = restart_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::container::RestartPolicy*>(
      &::container::_RestartPolicy_default_instance_);
}
inline const ::container::RestartPolicy& UpdateRequest::restart_policy() const {
  // @@protoc_insertion_point(field_get:container.UpdateRequest.restart_policy)
  return _internal_restart_policy();
}
inline void UpdateRequest::unsafe_arena_set_allocated_restart_policy(
    ::container::RestartPolicy* restart_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_policy_);
  }
  restart_policy_ = restart_policy;
  if (restart_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.UpdateRequest.restart_policy)
}
inline ::container::RestartPolicy* UpdateRequest::release_restart_policy() {
  auto temp = unsafe_arena_release_restart_policy();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::container::RestartPolicy* UpdateRequest::unsafe_arena_release_restart_policy() {
  // @@protoc_insertion_point(field_release:container.UpdateRequest.restart_policy)
  
  ::container::RestartPolicy* temp = restart_policy_;
  restart_policy_ = nullptr;
  return temp;
}
inline ::container::RestartPolicy* UpdateRequest::_internal_mutable_restart_policy() {
  
  if (restart_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::container::RestartPolicy>(GetArena());
    restart_policy_ = p;
  }
  return restart_policy_;
}
inline ::container::RestartPolicy* UpdateRequest::mutable_restart_policy() {
  // @@protoc_insertion_point(field_mutable:container.UpdateRequest.restart_policy)
  return _internal_mutable_restart_policy();
}
inline void UpdateRequest::set_allocated_restart_policy(::container::RestartPolicy* restart_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_policy_);
  }
  if (restart_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_policy)->GetArena();
    if (message_arena != submessage_arena) {
      restart_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_policy, submessage_arena);
    }
    
  } else {
    
  }
  restart_policy_ = restart_policy;
  // @@protoc_insertion_point(field_set_allocated:container.UpdateRequest.restart_policy)
}

// -------------------------------------------------------------------

// UpdateReply

// .common.ReplyHeader header = 1;
inline bool UpdateReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UpdateReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& UpdateReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& UpdateReply::header() const {
  // @@protoc_insertion_point(field_get:container.UpdateReply.header)
  return _internal_header();
}
inline void UpdateReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.UpdateReply.header)
}
inline ::common::ReplyHeader* UpdateReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* UpdateReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.UpdateReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* UpdateReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* UpdateReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.UpdateReply.header)
  return _internal_mutable_header();
}
inline void UpdateReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.UpdateReply.header)
}

// -------------------------------------------------------------------

// RemoveRequest

// .common.RequestHeader header = 1;
inline bool RemoveRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RemoveRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& RemoveRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& RemoveRequest::header() const {
  // @@protoc_insertion_point(field_get:container.RemoveRequest.header)
  return _internal_header();
}
inline void RemoveRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.RemoveRequest.header)
}
inline ::common::RequestHeader* RemoveRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* RemoveRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.RemoveRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* RemoveRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* RemoveRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.RemoveRequest.header)
  return _internal_mutable_header();
}
inline void RemoveRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.RemoveRequest.header)
}

// repeated .container.ContainerIdList ids = 2;
inline int RemoveRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int RemoveRequest::ids_size() const {
  return _internal_ids_size();
}
inline ::container::ContainerIdList* RemoveRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.RemoveRequest.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >*
RemoveRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.RemoveRequest.ids)
  return &ids_;
}
inline const ::container::ContainerIdList& RemoveRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::container::ContainerIdList& RemoveRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:container.RemoveRequest.ids)
  return _internal_ids(index);
}
inline ::container::ContainerIdList* RemoveRequest::_internal_add_ids() {
  return ids_.Add();
}
inline ::container::ContainerIdList* RemoveRequest::add_ids() {
  // @@protoc_insertion_point(field_add:container.RemoveRequest.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ContainerIdList >&
RemoveRequest::ids() const {
  // @@protoc_insertion_point(field_list:container.RemoveRequest.ids)
  return ids_;
}

// bool remove_volumes = 4;
inline void RemoveRequest::clear_remove_volumes() {
  remove_volumes_ = false;
}
inline bool RemoveRequest::_internal_remove_volumes() const {
  return remove_volumes_;
}
inline bool RemoveRequest::remove_volumes() const {
  // @@protoc_insertion_point(field_get:container.RemoveRequest.remove_volumes)
  return _internal_remove_volumes();
}
inline void RemoveRequest::_internal_set_remove_volumes(bool value) {
  
  remove_volumes_ = value;
}
inline void RemoveRequest::set_remove_volumes(bool value) {
  _internal_set_remove_volumes(value);
  // @@protoc_insertion_point(field_set:container.RemoveRequest.remove_volumes)
}

// -------------------------------------------------------------------

// RemoveReply

// .common.ReplyHeader header = 1;
inline bool RemoveReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RemoveReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& RemoveReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& RemoveReply::header() const {
  // @@protoc_insertion_point(field_get:container.RemoveReply.header)
  return _internal_header();
}
inline void RemoveReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.RemoveReply.header)
}
inline ::common::ReplyHeader* RemoveReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* RemoveReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.RemoveReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* RemoveReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* RemoveReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.RemoveReply.header)
  return _internal_mutable_header();
}
inline void RemoveReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.RemoveReply.header)
}

// repeated string ok_ids = 2;
inline int RemoveReply::_internal_ok_ids_size() const {
  return ok_ids_.size();
}
inline int RemoveReply::ok_ids_size() const {
  return _internal_ok_ids_size();
}
inline void RemoveReply::clear_ok_ids() {
  ok_ids_.Clear();
}
inline std::string* RemoveReply::add_ok_ids() {
  // @@protoc_insertion_point(field_add_mutable:container.RemoveReply.ok_ids)
  return _internal_add_ok_ids();
}
inline const std::string& RemoveReply::_internal_ok_ids(int index) const {
  return ok_ids_.Get(index);
}
inline const std::string& RemoveReply::ok_ids(int index) const {
  // @@protoc_insertion_point(field_get:container.RemoveReply.ok_ids)
  return _internal_ok_ids(index);
}
inline std::string* RemoveReply::mutable_ok_ids(int index) {
  // @@protoc_insertion_point(field_mutable:container.RemoveReply.ok_ids)
  return ok_ids_.Mutable(index);
}
inline void RemoveReply::set_ok_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:container.RemoveReply.ok_ids)
  ok_ids_.Mutable(index)->assign(value);
}
inline void RemoveReply::set_ok_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:container.RemoveReply.ok_ids)
  ok_ids_.Mutable(index)->assign(std::move(value));
}
inline void RemoveReply::set_ok_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:container.RemoveReply.ok_ids)
}
inline void RemoveReply::set_ok_ids(int index, const char* value, size_t size) {
  ok_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:container.RemoveReply.ok_ids)
}
inline std::string* RemoveReply::_internal_add_ok_ids() {
  return ok_ids_.Add();
}
inline void RemoveReply::add_ok_ids(const std::string& value) {
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:container.RemoveReply.ok_ids)
}
inline void RemoveReply::add_ok_ids(std::string&& value) {
  ok_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:container.RemoveReply.ok_ids)
}
inline void RemoveReply::add_ok_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ok_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:container.RemoveReply.ok_ids)
}
inline void RemoveReply::add_ok_ids(const char* value, size_t size) {
  ok_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:container.RemoveReply.ok_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveReply::ok_ids() const {
  // @@protoc_insertion_point(field_list:container.RemoveReply.ok_ids)
  return ok_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveReply::mutable_ok_ids() {
  // @@protoc_insertion_point(field_mutable_list:container.RemoveReply.ok_ids)
  return &ok_ids_;
}

// -------------------------------------------------------------------

// StatusRequest

// .common.RequestHeader header = 1;
inline bool StatusRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StatusRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& StatusRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& StatusRequest::header() const {
  // @@protoc_insertion_point(field_get:container.StatusRequest.header)
  return _internal_header();
}
inline void StatusRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.StatusRequest.header)
}
inline ::common::RequestHeader* StatusRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* StatusRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.StatusRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* StatusRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* StatusRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.StatusRequest.header)
  return _internal_mutable_header();
}
inline void StatusRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.StatusRequest.header)
}

// int64 node_id = 2;
inline void StatusRequest::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusRequest::node_id() const {
  // @@protoc_insertion_point(field_get:container.StatusRequest.node_id)
  return _internal_node_id();
}
inline void StatusRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void StatusRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.StatusRequest.node_id)
}

// -------------------------------------------------------------------

// StatusReply

// .common.ReplyHeader header = 1;
inline bool StatusReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StatusReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& StatusReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& StatusReply::header() const {
  // @@protoc_insertion_point(field_get:container.StatusReply.header)
  return _internal_header();
}
inline void StatusReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.StatusReply.header)
}
inline ::common::ReplyHeader* StatusReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* StatusReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.StatusReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* StatusReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* StatusReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.StatusReply.header)
  return _internal_mutable_header();
}
inline void StatusReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.StatusReply.header)
}

// repeated .container.ResourceStat status = 2;
inline int StatusReply::_internal_status_size() const {
  return status_.size();
}
inline int StatusReply::status_size() const {
  return _internal_status_size();
}
inline ::container::ResourceStat* StatusReply::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:container.StatusReply.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ResourceStat >*
StatusReply::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:container.StatusReply.status)
  return &status_;
}
inline const ::container::ResourceStat& StatusReply::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::container::ResourceStat& StatusReply::status(int index) const {
  // @@protoc_insertion_point(field_get:container.StatusReply.status)
  return _internal_status(index);
}
inline ::container::ResourceStat* StatusReply::_internal_add_status() {
  return status_.Add();
}
inline ::container::ResourceStat* StatusReply::add_status() {
  // @@protoc_insertion_point(field_add:container.StatusReply.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::ResourceStat >&
StatusReply::status() const {
  // @@protoc_insertion_point(field_list:container.StatusReply.status)
  return status_;
}

// -------------------------------------------------------------------

// MonitorHistoryRequest

// .common.RequestHeader header = 1;
inline bool MonitorHistoryRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MonitorHistoryRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& MonitorHistoryRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& MonitorHistoryRequest::header() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryRequest.header)
  return _internal_header();
}
inline void MonitorHistoryRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MonitorHistoryRequest.header)
}
inline ::common::RequestHeader* MonitorHistoryRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* MonitorHistoryRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.MonitorHistoryRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* MonitorHistoryRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* MonitorHistoryRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.MonitorHistoryRequest.header)
  return _internal_mutable_header();
}
inline void MonitorHistoryRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.MonitorHistoryRequest.header)
}

// int64 node_id = 2;
inline void MonitorHistoryRequest::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorHistoryRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorHistoryRequest::node_id() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryRequest.node_id)
  return _internal_node_id();
}
inline void MonitorHistoryRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void MonitorHistoryRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:container.MonitorHistoryRequest.node_id)
}

// int64 start_time = 3;
inline void MonitorHistoryRequest::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorHistoryRequest::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorHistoryRequest::start_time() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryRequest.start_time)
  return _internal_start_time();
}
inline void MonitorHistoryRequest::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void MonitorHistoryRequest::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:container.MonitorHistoryRequest.start_time)
}

// int64 end_time = 4;
inline void MonitorHistoryRequest::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorHistoryRequest::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorHistoryRequest::end_time() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryRequest.end_time)
  return _internal_end_time();
}
inline void MonitorHistoryRequest::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void MonitorHistoryRequest::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:container.MonitorHistoryRequest.end_time)
}

// string container_id = 5;
inline void MonitorHistoryRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MonitorHistoryRequest::container_id() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryRequest.container_id)
  return _internal_container_id();
}
inline void MonitorHistoryRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:container.MonitorHistoryRequest.container_id)
}
inline std::string* MonitorHistoryRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:container.MonitorHistoryRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& MonitorHistoryRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void MonitorHistoryRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MonitorHistoryRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MonitorHistoryRequest.container_id)
}
inline void MonitorHistoryRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MonitorHistoryRequest.container_id)
}
inline void MonitorHistoryRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MonitorHistoryRequest.container_id)
}
inline std::string* MonitorHistoryRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MonitorHistoryRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:container.MonitorHistoryRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MonitorHistoryRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MonitorHistoryRequest.container_id)
}
inline std::string* MonitorHistoryRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MonitorHistoryRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MonitorHistoryRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MonitorHistoryRequest.container_id)
}

// string data_type = 6;
inline void MonitorHistoryRequest::clear_data_type() {
  data_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MonitorHistoryRequest::data_type() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryRequest.data_type)
  return _internal_data_type();
}
inline void MonitorHistoryRequest::set_data_type(const std::string& value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:container.MonitorHistoryRequest.data_type)
}
inline std::string* MonitorHistoryRequest::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable:container.MonitorHistoryRequest.data_type)
  return _internal_mutable_data_type();
}
inline const std::string& MonitorHistoryRequest::_internal_data_type() const {
  return data_type_.Get();
}
inline void MonitorHistoryRequest::_internal_set_data_type(const std::string& value) {
  
  data_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MonitorHistoryRequest::set_data_type(std::string&& value) {
  
  data_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:container.MonitorHistoryRequest.data_type)
}
inline void MonitorHistoryRequest::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:container.MonitorHistoryRequest.data_type)
}
inline void MonitorHistoryRequest::set_data_type(const char* value,
    size_t size) {
  
  data_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:container.MonitorHistoryRequest.data_type)
}
inline std::string* MonitorHistoryRequest::_internal_mutable_data_type() {
  
  return data_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MonitorHistoryRequest::release_data_type() {
  // @@protoc_insertion_point(field_release:container.MonitorHistoryRequest.data_type)
  return data_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MonitorHistoryRequest::set_allocated_data_type(std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:container.MonitorHistoryRequest.data_type)
}
inline std::string* MonitorHistoryRequest::unsafe_arena_release_data_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:container.MonitorHistoryRequest.data_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MonitorHistoryRequest::unsafe_arena_set_allocated_data_type(
    std::string* data_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MonitorHistoryRequest.data_type)
}

// -------------------------------------------------------------------

// MonitorHistoryReply

// .common.ReplyHeader header = 1;
inline bool MonitorHistoryReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MonitorHistoryReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& MonitorHistoryReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& MonitorHistoryReply::header() const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryReply.header)
  return _internal_header();
}
inline void MonitorHistoryReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:container.MonitorHistoryReply.header)
}
inline ::common::ReplyHeader* MonitorHistoryReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* MonitorHistoryReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:container.MonitorHistoryReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* MonitorHistoryReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* MonitorHistoryReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:container.MonitorHistoryReply.header)
  return _internal_mutable_header();
}
inline void MonitorHistoryReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:container.MonitorHistoryReply.header)
}

// repeated .container.MonitorSample data = 2;
inline int MonitorHistoryReply::_internal_data_size() const {
  return data_.size();
}
inline int MonitorHistoryReply::data_size() const {
  return _internal_data_size();
}
inline void MonitorHistoryReply::clear_data() {
  data_.Clear();
}
inline ::container::MonitorSample* MonitorHistoryReply::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:container.MonitorHistoryReply.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::MonitorSample >*
MonitorHistoryReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:container.MonitorHistoryReply.data)
  return &data_;
}
inline const ::container::MonitorSample& MonitorHistoryReply::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::container::MonitorSample& MonitorHistoryReply::data(int index) const {
  // @@protoc_insertion_point(field_get:container.MonitorHistoryReply.data)
  return _internal_data(index);
}
inline ::container::MonitorSample* MonitorHistoryReply::_internal_add_data() {
  return data_.Add();
}
inline ::container::MonitorSample* MonitorHistoryReply::add_data() {
  // @@protoc_insertion_point(field_add:container.MonitorHistoryReply.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::container::MonitorSample >&
MonitorHistoryReply::data() const {
  // @@protoc_insertion_point(field_list:container.MonitorHistoryReply.data)
  return data_;
}

// -------------------------------------------------------------------

// MonitorSample

// int64 time = 1;
inline void MonitorSample::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorSample::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonitorSample::time() const {
  // @@protoc_insertion_point(field_get:container.MonitorSample.time)
  return _internal_time();
}
inline void MonitorSample::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void MonitorSample::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:container.MonitorSample.time)
}

// double cpu_usage = 10;
inline void MonitorSample::clear_cpu_usage() {
  cpu_usage_ = 0;
}
inline double MonitorSample::_internal_cpu_usage() const {
  return cpu_usage_;
}
inline double MonitorSample::cpu_usage() const {
  // @@protoc_insertion_point(field_get:container.MonitorSample.cpu_usage)
  return _internal_cpu_usage();
}
inline void MonitorSample::_internal_set_cpu_usage(double value) {
  
  cpu_usage_ = value;
}
inline void MonitorSample::set_cpu_usage(double value) {
  _internal_set_cpu_usage(value);
  // @@protoc_insertion_point(field_set:container.MonitorSample.cpu_usage)
}

// double memory_usage = 20;
inline void MonitorSample::clear_memory_usage() {
  memory_usage_ = 0;
}
inline double MonitorSample::_internal_memory_usage() const {
  return memory_usage_;
}
inline double MonitorSample::memory_usage() const {
  // @@protoc_insertion_point(field_get:container.MonitorSample.memory_usage)
  return _internal_memory_usage();
}
inline void MonitorSample::_internal_set_memory_usage(double value) {
  
  memory_usage_ = value;
}
inline void MonitorSample::set_memory_usage(double value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:container.MonitorSample.memory_usage)
}

// double disk_usage = 30;
inline void MonitorSample::clear_disk_usage() {
  disk_usage_ = 0;
}
inline double MonitorSample::_internal_disk_usage() const {
  return disk_usage_;
}
inline double MonitorSample::disk_usage() const {
  // @@protoc_insertion_point(field_get:container.MonitorSample.disk_usage)
  return _internal_disk_usage();
}
inline void MonitorSample::_internal_set_disk_usage(double value) {
  
  disk_usage_ = value;
}
inline void MonitorSample::set_disk_usage(double value) {
  _internal_set_disk_usage(value);
  // @@protoc_insertion_point(field_set:container.MonitorSample.disk_usage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace container

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_container_5fservice_2eproto
