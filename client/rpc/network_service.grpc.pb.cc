// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network_service.proto

#include "network_service.pb.h"
#include "network_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace network {

static const char* Network_method_names[] = {
  "/network.Network/List",
  "/network.Network/Create",
  "/network.Network/Remove",
};

std::unique_ptr< Network::Stub> Network::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Network::Stub> stub(new Network::Stub(channel));
  return stub;
}

Network::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(Network_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(Network_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(Network_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Network::Stub::List(::grpc::ClientContext* context, const ::network::ListRequest& request, ::network::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void Network::Stub::experimental_async::List(::grpc::ClientContext* context, const ::network::ListRequest* request, ::network::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::List(::grpc::ClientContext* context, const ::network::ListRequest* request, ::network::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void Network::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::ListReply>* Network::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::network::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::ListReply>* Network::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::network::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status Network::Stub::Create(::grpc::ClientContext* context, const ::network::CreateRequest& request, ::network::CreateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Network::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::network::CreateRequest* request, ::network::CreateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::CreateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::network::CreateRequest* request, ::network::CreateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void Network::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::CreateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::CreateReply>* Network::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::network::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::CreateReply>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::CreateReply>* Network::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::network::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::CreateReply>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status Network::Stub::Remove(::grpc::ClientContext* context, const ::network::RemoveRequest& request, ::network::RemoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void Network::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::network::RemoveRequest* request, ::network::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::network::RemoveRequest* request, ::network::RemoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

void Network::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::RemoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::RemoveReply>* Network::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::network::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::RemoveReply>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::RemoveReply>* Network::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::network::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::RemoveReply>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

Network::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::network::ListRequest, ::network::ListReply>(
          [](Network::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::network::ListRequest* req,
             ::network::ListReply* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::network::CreateRequest, ::network::CreateReply>(
          [](Network::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::network::CreateRequest* req,
             ::network::CreateReply* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::network::RemoveRequest, ::network::RemoveReply>(
          [](Network::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::network::RemoveRequest* req,
             ::network::RemoveReply* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
}

Network::Service::~Service() {
}

::grpc::Status Network::Service::List(::grpc::ServerContext* context, const ::network::ListRequest* request, ::network::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Network::Service::Create(::grpc::ServerContext* context, const ::network::CreateRequest* request, ::network::CreateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Network::Service::Remove(::grpc::ServerContext* context, const ::network::RemoveRequest* request, ::network::RemoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace network

