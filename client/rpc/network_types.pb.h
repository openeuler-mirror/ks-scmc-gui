// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_5ftypes_2eproto;
namespace network {
class BridgeNetworkInterface;
class BridgeNetworkInterfaceDefaultTypeInternal;
extern BridgeNetworkInterfaceDefaultTypeInternal _BridgeNetworkInterface_default_instance_;
class RealNetworkInterface;
class RealNetworkInterfaceDefaultTypeInternal;
extern RealNetworkInterfaceDefaultTypeInternal _RealNetworkInterface_default_instance_;
class Subnet;
class SubnetDefaultTypeInternal;
extern SubnetDefaultTypeInternal _Subnet_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::BridgeNetworkInterface* Arena::CreateMaybeMessage<::network::BridgeNetworkInterface>(Arena*);
template<> ::network::RealNetworkInterface* Arena::CreateMaybeMessage<::network::RealNetworkInterface>(Arena*);
template<> ::network::Subnet* Arena::CreateMaybeMessage<::network::Subnet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class Subnet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.Subnet) */ {
 public:
  inline Subnet() : Subnet(nullptr) {};
  virtual ~Subnet();

  Subnet(const Subnet& from);
  Subnet(Subnet&& from) noexcept
    : Subnet() {
    *this = ::std::move(from);
  }

  inline Subnet& operator=(const Subnet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subnet& operator=(Subnet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subnet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subnet* internal_default_instance() {
    return reinterpret_cast<const Subnet*>(
               &_Subnet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Subnet& a, Subnet& b) {
    a.Swap(&b);
  }
  inline void Swap(Subnet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subnet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subnet* New() const final {
    return CreateMaybeMessage<Subnet>(nullptr);
  }

  Subnet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subnet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subnet& from);
  void MergeFrom(const Subnet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subnet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.Subnet";
  }
  protected:
  explicit Subnet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_5ftypes_2eproto);
    return ::descriptor_table_network_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kPrefixLenFieldNumber = 2,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_addr(
      std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // int32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:network.Subnet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RealNetworkInterface PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.RealNetworkInterface) */ {
 public:
  inline RealNetworkInterface() : RealNetworkInterface(nullptr) {};
  virtual ~RealNetworkInterface();

  RealNetworkInterface(const RealNetworkInterface& from);
  RealNetworkInterface(RealNetworkInterface&& from) noexcept
    : RealNetworkInterface() {
    *this = ::std::move(from);
  }

  inline RealNetworkInterface& operator=(const RealNetworkInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealNetworkInterface& operator=(RealNetworkInterface&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealNetworkInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealNetworkInterface* internal_default_instance() {
    return reinterpret_cast<const RealNetworkInterface*>(
               &_RealNetworkInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RealNetworkInterface& a, RealNetworkInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(RealNetworkInterface* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealNetworkInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealNetworkInterface* New() const final {
    return CreateMaybeMessage<RealNetworkInterface>(nullptr);
  }

  RealNetworkInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealNetworkInterface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealNetworkInterface& from);
  void MergeFrom(const RealNetworkInterface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealNetworkInterface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.RealNetworkInterface";
  }
  protected:
  explicit RealNetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_5ftypes_2eproto);
    return ::descriptor_table_network_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:network.RealNetworkInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BridgeNetworkInterface PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.BridgeNetworkInterface) */ {
 public:
  inline BridgeNetworkInterface() : BridgeNetworkInterface(nullptr) {};
  virtual ~BridgeNetworkInterface();

  BridgeNetworkInterface(const BridgeNetworkInterface& from);
  BridgeNetworkInterface(BridgeNetworkInterface&& from) noexcept
    : BridgeNetworkInterface() {
    *this = ::std::move(from);
  }

  inline BridgeNetworkInterface& operator=(const BridgeNetworkInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeNetworkInterface& operator=(BridgeNetworkInterface&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BridgeNetworkInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeNetworkInterface* internal_default_instance() {
    return reinterpret_cast<const BridgeNetworkInterface*>(
               &_BridgeNetworkInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BridgeNetworkInterface& a, BridgeNetworkInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgeNetworkInterface* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeNetworkInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BridgeNetworkInterface* New() const final {
    return CreateMaybeMessage<BridgeNetworkInterface>(nullptr);
  }

  BridgeNetworkInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BridgeNetworkInterface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BridgeNetworkInterface& from);
  void MergeFrom(const BridgeNetworkInterface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeNetworkInterface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.BridgeNetworkInterface";
  }
  protected:
  explicit BridgeNetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_5ftypes_2eproto);
    return ::descriptor_table_network_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGatewayFieldNumber = 5,
    kSubnetFieldNumber = 3,
    kIpRangeFieldNumber = 4,
    kNodeIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string gateway = 5;
  void clear_gateway();
  const std::string& gateway() const;
  void set_gateway(const std::string& value);
  void set_gateway(std::string&& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  std::string* mutable_gateway();
  std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gateway();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gateway(
      std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // .network.Subnet subnet = 3;
  bool has_subnet() const;
  private:
  bool _internal_has_subnet() const;
  public:
  void clear_subnet();
  const ::network::Subnet& subnet() const;
  ::network::Subnet* release_subnet();
  ::network::Subnet* mutable_subnet();
  void set_allocated_subnet(::network::Subnet* subnet);
  private:
  const ::network::Subnet& _internal_subnet() const;
  ::network::Subnet* _internal_mutable_subnet();
  public:
  void unsafe_arena_set_allocated_subnet(
      ::network::Subnet* subnet);
  ::network::Subnet* unsafe_arena_release_subnet();

  // .network.Subnet ip_range = 4;
  bool has_ip_range() const;
  private:
  bool _internal_has_ip_range() const;
  public:
  void clear_ip_range();
  const ::network::Subnet& ip_range() const;
  ::network::Subnet* release_ip_range();
  ::network::Subnet* mutable_ip_range();
  void set_allocated_ip_range(::network::Subnet* ip_range);
  private:
  const ::network::Subnet& _internal_ip_range() const;
  ::network::Subnet* _internal_mutable_ip_range();
  public:
  void unsafe_arena_set_allocated_ip_range(
      ::network::Subnet* ip_range);
  ::network::Subnet* unsafe_arena_release_ip_range();

  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:network.BridgeNetworkInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
  ::network::Subnet* subnet_;
  ::network::Subnet* ip_range_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subnet

// string addr = 1;
inline void Subnet::clear_addr() {
  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Subnet::addr() const {
  // @@protoc_insertion_point(field_get:network.Subnet.addr)
  return _internal_addr();
}
inline void Subnet::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:network.Subnet.addr)
}
inline std::string* Subnet::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:network.Subnet.addr)
  return _internal_mutable_addr();
}
inline const std::string& Subnet::_internal_addr() const {
  return addr_.Get();
}
inline void Subnet::_internal_set_addr(const std::string& value) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Subnet::set_addr(std::string&& value) {
  
  addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.Subnet.addr)
}
inline void Subnet::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:network.Subnet.addr)
}
inline void Subnet::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.Subnet.addr)
}
inline std::string* Subnet::_internal_mutable_addr() {
  
  return addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Subnet::release_addr() {
  // @@protoc_insertion_point(field_release:network.Subnet.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subnet::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.Subnet.addr)
}
inline std::string* Subnet::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:network.Subnet.addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Subnet::unsafe_arena_set_allocated_addr(
    std::string* addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.Subnet.addr)
}

// int32 prefix_len = 2;
inline void Subnet::clear_prefix_len() {
  prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subnet::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subnet::prefix_len() const {
  // @@protoc_insertion_point(field_get:network.Subnet.prefix_len)
  return _internal_prefix_len();
}
inline void Subnet::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prefix_len_ = value;
}
inline void Subnet::set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:network.Subnet.prefix_len)
}

// -------------------------------------------------------------------

// RealNetworkInterface

// int64 node_id = 1;
inline void RealNetworkInterface::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealNetworkInterface::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealNetworkInterface::node_id() const {
  // @@protoc_insertion_point(field_get:network.RealNetworkInterface.node_id)
  return _internal_node_id();
}
inline void RealNetworkInterface::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void RealNetworkInterface::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:network.RealNetworkInterface.node_id)
}

// -------------------------------------------------------------------

// BridgeNetworkInterface

// int64 node_id = 1;
inline void BridgeNetworkInterface::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BridgeNetworkInterface::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BridgeNetworkInterface::node_id() const {
  // @@protoc_insertion_point(field_get:network.BridgeNetworkInterface.node_id)
  return _internal_node_id();
}
inline void BridgeNetworkInterface::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void BridgeNetworkInterface::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:network.BridgeNetworkInterface.node_id)
}

// string name = 2;
inline void BridgeNetworkInterface::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BridgeNetworkInterface::name() const {
  // @@protoc_insertion_point(field_get:network.BridgeNetworkInterface.name)
  return _internal_name();
}
inline void BridgeNetworkInterface::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.BridgeNetworkInterface.name)
}
inline std::string* BridgeNetworkInterface::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.BridgeNetworkInterface.name)
  return _internal_mutable_name();
}
inline const std::string& BridgeNetworkInterface::_internal_name() const {
  return name_.Get();
}
inline void BridgeNetworkInterface::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BridgeNetworkInterface::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.BridgeNetworkInterface.name)
}
inline void BridgeNetworkInterface::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:network.BridgeNetworkInterface.name)
}
inline void BridgeNetworkInterface::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.BridgeNetworkInterface.name)
}
inline std::string* BridgeNetworkInterface::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BridgeNetworkInterface::release_name() {
  // @@protoc_insertion_point(field_release:network.BridgeNetworkInterface.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BridgeNetworkInterface::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.BridgeNetworkInterface.name)
}
inline std::string* BridgeNetworkInterface::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:network.BridgeNetworkInterface.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BridgeNetworkInterface::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.BridgeNetworkInterface.name)
}

// .network.Subnet subnet = 3;
inline bool BridgeNetworkInterface::_internal_has_subnet() const {
  return this != internal_default_instance() && subnet_ != nullptr;
}
inline bool BridgeNetworkInterface::has_subnet() const {
  return _internal_has_subnet();
}
inline void BridgeNetworkInterface::clear_subnet() {
  if (GetArena() == nullptr && subnet_ != nullptr) {
    delete subnet_;
  }
  subnet_ = nullptr;
}
inline const ::network::Subnet& BridgeNetworkInterface::_internal_subnet() const {
  const ::network::Subnet* p = subnet_;
  return p != nullptr ? *p : *reinterpret_cast<const ::network::Subnet*>(
      &::network::_Subnet_default_instance_);
}
inline const ::network::Subnet& BridgeNetworkInterface::subnet() const {
  // @@protoc_insertion_point(field_get:network.BridgeNetworkInterface.subnet)
  return _internal_subnet();
}
inline void BridgeNetworkInterface::unsafe_arena_set_allocated_subnet(
    ::network::Subnet* subnet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet_);
  }
  subnet_ = subnet;
  if (subnet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.BridgeNetworkInterface.subnet)
}
inline ::network::Subnet* BridgeNetworkInterface::release_subnet() {
  auto temp = unsafe_arena_release_subnet();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::network::Subnet* BridgeNetworkInterface::unsafe_arena_release_subnet() {
  // @@protoc_insertion_point(field_release:network.BridgeNetworkInterface.subnet)
  
  ::network::Subnet* temp = subnet_;
  subnet_ = nullptr;
  return temp;
}
inline ::network::Subnet* BridgeNetworkInterface::_internal_mutable_subnet() {
  
  if (subnet_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::Subnet>(GetArena());
    subnet_ = p;
  }
  return subnet_;
}
inline ::network::Subnet* BridgeNetworkInterface::mutable_subnet() {
  // @@protoc_insertion_point(field_mutable:network.BridgeNetworkInterface.subnet)
  return _internal_mutable_subnet();
}
inline void BridgeNetworkInterface::set_allocated_subnet(::network::Subnet* subnet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subnet_;
  }
  if (subnet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subnet);
    if (message_arena != submessage_arena) {
      subnet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnet, submessage_arena);
    }
    
  } else {
    
  }
  subnet_ = subnet;
  // @@protoc_insertion_point(field_set_allocated:network.BridgeNetworkInterface.subnet)
}

// .network.Subnet ip_range = 4;
inline bool BridgeNetworkInterface::_internal_has_ip_range() const {
  return this != internal_default_instance() && ip_range_ != nullptr;
}
inline bool BridgeNetworkInterface::has_ip_range() const {
  return _internal_has_ip_range();
}
inline void BridgeNetworkInterface::clear_ip_range() {
  if (GetArena() == nullptr && ip_range_ != nullptr) {
    delete ip_range_;
  }
  ip_range_ = nullptr;
}
inline const ::network::Subnet& BridgeNetworkInterface::_internal_ip_range() const {
  const ::network::Subnet* p = ip_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::network::Subnet*>(
      &::network::_Subnet_default_instance_);
}
inline const ::network::Subnet& BridgeNetworkInterface::ip_range() const {
  // @@protoc_insertion_point(field_get:network.BridgeNetworkInterface.ip_range)
  return _internal_ip_range();
}
inline void BridgeNetworkInterface::unsafe_arena_set_allocated_ip_range(
    ::network::Subnet* ip_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_range_);
  }
  ip_range_ = ip_range;
  if (ip_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.BridgeNetworkInterface.ip_range)
}
inline ::network::Subnet* BridgeNetworkInterface::release_ip_range() {
  auto temp = unsafe_arena_release_ip_range();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::network::Subnet* BridgeNetworkInterface::unsafe_arena_release_ip_range() {
  // @@protoc_insertion_point(field_release:network.BridgeNetworkInterface.ip_range)
  
  ::network::Subnet* temp = ip_range_;
  ip_range_ = nullptr;
  return temp;
}
inline ::network::Subnet* BridgeNetworkInterface::_internal_mutable_ip_range() {
  
  if (ip_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::Subnet>(GetArena());
    ip_range_ = p;
  }
  return ip_range_;
}
inline ::network::Subnet* BridgeNetworkInterface::mutable_ip_range() {
  // @@protoc_insertion_point(field_mutable:network.BridgeNetworkInterface.ip_range)
  return _internal_mutable_ip_range();
}
inline void BridgeNetworkInterface::set_allocated_ip_range(::network::Subnet* ip_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip_range_;
  }
  if (ip_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip_range);
    if (message_arena != submessage_arena) {
      ip_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_range, submessage_arena);
    }
    
  } else {
    
  }
  ip_range_ = ip_range;
  // @@protoc_insertion_point(field_set_allocated:network.BridgeNetworkInterface.ip_range)
}

// string gateway = 5;
inline void BridgeNetworkInterface::clear_gateway() {
  gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BridgeNetworkInterface::gateway() const {
  // @@protoc_insertion_point(field_get:network.BridgeNetworkInterface.gateway)
  return _internal_gateway();
}
inline void BridgeNetworkInterface::set_gateway(const std::string& value) {
  _internal_set_gateway(value);
  // @@protoc_insertion_point(field_set:network.BridgeNetworkInterface.gateway)
}
inline std::string* BridgeNetworkInterface::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable:network.BridgeNetworkInterface.gateway)
  return _internal_mutable_gateway();
}
inline const std::string& BridgeNetworkInterface::_internal_gateway() const {
  return gateway_.Get();
}
inline void BridgeNetworkInterface::_internal_set_gateway(const std::string& value) {
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BridgeNetworkInterface::set_gateway(std::string&& value) {
  
  gateway_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.BridgeNetworkInterface.gateway)
}
inline void BridgeNetworkInterface::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:network.BridgeNetworkInterface.gateway)
}
inline void BridgeNetworkInterface::set_gateway(const char* value,
    size_t size) {
  
  gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.BridgeNetworkInterface.gateway)
}
inline std::string* BridgeNetworkInterface::_internal_mutable_gateway() {
  
  return gateway_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BridgeNetworkInterface::release_gateway() {
  // @@protoc_insertion_point(field_release:network.BridgeNetworkInterface.gateway)
  return gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BridgeNetworkInterface::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.BridgeNetworkInterface.gateway)
}
inline std::string* BridgeNetworkInterface::unsafe_arena_release_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:network.BridgeNetworkInterface.gateway)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gateway_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BridgeNetworkInterface::unsafe_arena_set_allocated_gateway(
    std::string* gateway) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gateway, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.BridgeNetworkInterface.gateway)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_5ftypes_2eproto
