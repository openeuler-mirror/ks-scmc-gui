// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "node_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5fservice_2eproto;
namespace node {
class CreateReply;
class CreateReplyDefaultTypeInternal;
extern CreateReplyDefaultTypeInternal _CreateReply_default_instance_;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class RemoveReply;
class RemoveReplyDefaultTypeInternal;
extern RemoveReplyDefaultTypeInternal _RemoveReply_default_instance_;
class RemoveRequest;
class RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class StatusReply;
class StatusReplyDefaultTypeInternal;
extern StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::CreateReply* Arena::CreateMaybeMessage<::node::CreateReply>(Arena*);
template<> ::node::CreateRequest* Arena::CreateMaybeMessage<::node::CreateRequest>(Arena*);
template<> ::node::ListReply* Arena::CreateMaybeMessage<::node::ListReply>(Arena*);
template<> ::node::ListRequest* Arena::CreateMaybeMessage<::node::ListRequest>(Arena*);
template<> ::node::RemoveReply* Arena::CreateMaybeMessage<::node::RemoveReply>(Arena*);
template<> ::node::RemoveRequest* Arena::CreateMaybeMessage<::node::RemoveRequest>(Arena*);
template<> ::node::StatusReply* Arena::CreateMaybeMessage<::node::StatusReply>(Arena*);
template<> ::node::StatusRequest* Arena::CreateMaybeMessage<::node::StatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {

// ===================================================================

class ListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {};
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(nullptr);
  }

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.ListReply) */ {
 public:
  inline ListReply() : ListReply(nullptr) {};
  virtual ~ListReply();

  ListReply(const ListReply& from);
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const final {
    return CreateMaybeMessage<ListReply>(nullptr);
  }

  ListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.ListReply";
  }
  protected:
  explicit ListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .node.NodeInfo nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::node::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeInfo >*
      mutable_nodes();
  private:
  const ::node::NodeInfo& _internal_nodes(int index) const;
  ::node::NodeInfo* _internal_add_nodes();
  public:
  const ::node::NodeInfo& nodes(int index) const;
  ::node::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeInfo >&
      nodes() const;

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.ListReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeInfo > nodes_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {};
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddressFieldNumber = 3,
    kCommentFieldNumber = 4,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comment(
      std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CreateReply) */ {
 public:
  inline CreateReply() : CreateReply(nullptr) {};
  virtual ~CreateReply();

  CreateReply(const CreateReply& from);
  CreateReply(CreateReply&& from) noexcept
    : CreateReply() {
    *this = ::std::move(from);
  }

  inline CreateReply& operator=(const CreateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReply& operator=(CreateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReply* internal_default_instance() {
    return reinterpret_cast<const CreateReply*>(
               &_CreateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateReply& a, CreateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReply* New() const final {
    return CreateMaybeMessage<CreateReply>(nullptr);
  }

  CreateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReply& from);
  void MergeFrom(const CreateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CreateReply";
  }
  protected:
  explicit CreateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CreateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ReplyHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RemoveRequest) */ {
 public:
  inline RemoveRequest() : RemoveRequest(nullptr) {};
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const final {
    return CreateMaybeMessage<RemoveRequest>(nullptr);
  }

  RemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RemoveRequest";
  }
  protected:
  explicit RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated int64 ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_ids();

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.RemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RemoveReply) */ {
 public:
  inline RemoveReply() : RemoveReply(nullptr) {};
  virtual ~RemoveReply();

  RemoveReply(const RemoveReply& from);
  RemoveReply(RemoveReply&& from) noexcept
    : RemoveReply() {
    *this = ::std::move(from);
  }

  inline RemoveReply& operator=(const RemoveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveReply& operator=(RemoveReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveReply* internal_default_instance() {
    return reinterpret_cast<const RemoveReply*>(
               &_RemoveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveReply& a, RemoveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveReply* New() const final {
    return CreateMaybeMessage<RemoveReply>(nullptr);
  }

  RemoveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveReply& from);
  void MergeFrom(const RemoveReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RemoveReply";
  }
  protected:
  explicit RemoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.RemoveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {};
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated int64 node_ids = 2;
  int node_ids_size() const;
  private:
  int _internal_node_ids_size() const;
  public:
  void clear_node_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_node_ids() const;
  void _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_node_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 node_ids(int index) const;
  void set_node_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_node_ids();

  // .common.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::RequestHeader& header() const;
  ::common::RequestHeader* release_header();
  ::common::RequestHeader* mutable_header();
  void set_allocated_header(::common::RequestHeader* header);
  private:
  const ::common::RequestHeader& _internal_header() const;
  ::common::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::RequestHeader* header);
  ::common::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > node_ids_;
  mutable std::atomic<int> _node_ids_cached_byte_size_;
  ::common::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.StatusReply) */ {
 public:
  inline StatusReply() : StatusReply(nullptr) {};
  virtual ~StatusReply();

  StatusReply(const StatusReply& from);
  StatusReply(StatusReply&& from) noexcept
    : StatusReply() {
    *this = ::std::move(from);
  }

  inline StatusReply& operator=(const StatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReply& operator=(StatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusReply* internal_default_instance() {
    return reinterpret_cast<const StatusReply*>(
               &_StatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StatusReply& a, StatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusReply* New() const final {
    return CreateMaybeMessage<StatusReply>(nullptr);
  }

  StatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusReply& from);
  void MergeFrom(const StatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.StatusReply";
  }
  protected:
  explicit StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fservice_2eproto);
    return ::descriptor_table_node_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusListFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .node.NodeStatus status_list = 2;
  int status_list_size() const;
  private:
  int _internal_status_list_size() const;
  public:
  void clear_status_list();
  ::node::NodeStatus* mutable_status_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeStatus >*
      mutable_status_list();
  private:
  const ::node::NodeStatus& _internal_status_list(int index) const;
  ::node::NodeStatus* _internal_add_status_list();
  public:
  const ::node::NodeStatus& status_list(int index) const;
  ::node::NodeStatus* add_status_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeStatus >&
      status_list() const;

  // .common.ReplyHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::ReplyHeader& header() const;
  ::common::ReplyHeader* release_header();
  ::common::ReplyHeader* mutable_header();
  void set_allocated_header(::common::ReplyHeader* header);
  private:
  const ::common::ReplyHeader& _internal_header() const;
  ::common::ReplyHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::common::ReplyHeader* header);
  ::common::ReplyHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:node.StatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeStatus > status_list_;
  ::common::ReplyHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListRequest

// .common.RequestHeader header = 1;
inline bool ListRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& ListRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& ListRequest::header() const {
  // @@protoc_insertion_point(field_get:node.ListRequest.header)
  return _internal_header();
}
inline void ListRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.ListRequest.header)
}
inline ::common::RequestHeader* ListRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* ListRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.ListRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* ListRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* ListRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.ListRequest.header)
  return _internal_mutable_header();
}
inline void ListRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.ListRequest.header)
}

// -------------------------------------------------------------------

// ListReply

// .common.ReplyHeader header = 1;
inline bool ListReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& ListReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& ListReply::header() const {
  // @@protoc_insertion_point(field_get:node.ListReply.header)
  return _internal_header();
}
inline void ListReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.ListReply.header)
}
inline ::common::ReplyHeader* ListReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* ListReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.ListReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* ListReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* ListReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.ListReply.header)
  return _internal_mutable_header();
}
inline void ListReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.ListReply.header)
}

// repeated .node.NodeInfo nodes = 2;
inline int ListReply::_internal_nodes_size() const {
  return nodes_.size();
}
inline int ListReply::nodes_size() const {
  return _internal_nodes_size();
}
inline ::node::NodeInfo* ListReply::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:node.ListReply.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeInfo >*
ListReply::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:node.ListReply.nodes)
  return &nodes_;
}
inline const ::node::NodeInfo& ListReply::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::node::NodeInfo& ListReply::nodes(int index) const {
  // @@protoc_insertion_point(field_get:node.ListReply.nodes)
  return _internal_nodes(index);
}
inline ::node::NodeInfo* ListReply::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::node::NodeInfo* ListReply::add_nodes() {
  // @@protoc_insertion_point(field_add:node.ListReply.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeInfo >&
ListReply::nodes() const {
  // @@protoc_insertion_point(field_list:node.ListReply.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// CreateRequest

// .common.RequestHeader header = 1;
inline bool CreateRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CreateRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& CreateRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& CreateRequest::header() const {
  // @@protoc_insertion_point(field_get:node.CreateRequest.header)
  return _internal_header();
}
inline void CreateRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.CreateRequest.header)
}
inline ::common::RequestHeader* CreateRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* CreateRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.CreateRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* CreateRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* CreateRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.CreateRequest.header)
  return _internal_mutable_header();
}
inline void CreateRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.CreateRequest.header)
}

// string name = 2;
inline void CreateRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::name() const {
  // @@protoc_insertion_point(field_get:node.CreateRequest.name)
  return _internal_name();
}
inline void CreateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:node.CreateRequest.name)
}
inline std::string* CreateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:node.CreateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:node.CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:node.CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:node.CreateRequest.name)
}
inline std::string* CreateRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:node.CreateRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:node.CreateRequest.name)
}
inline std::string* CreateRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:node.CreateRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.CreateRequest.name)
}

// string address = 3;
inline void CreateRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::address() const {
  // @@protoc_insertion_point(field_get:node.CreateRequest.address)
  return _internal_address();
}
inline void CreateRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:node.CreateRequest.address)
}
inline std::string* CreateRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:node.CreateRequest.address)
  return _internal_mutable_address();
}
inline const std::string& CreateRequest::_internal_address() const {
  return address_.Get();
}
inline void CreateRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:node.CreateRequest.address)
}
inline void CreateRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:node.CreateRequest.address)
}
inline void CreateRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:node.CreateRequest.address)
}
inline std::string* CreateRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_address() {
  // @@protoc_insertion_point(field_release:node.CreateRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:node.CreateRequest.address)
}
inline std::string* CreateRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:node.CreateRequest.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.CreateRequest.address)
}

// string comment = 4;
inline void CreateRequest::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::comment() const {
  // @@protoc_insertion_point(field_get:node.CreateRequest.comment)
  return _internal_comment();
}
inline void CreateRequest::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:node.CreateRequest.comment)
}
inline std::string* CreateRequest::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:node.CreateRequest.comment)
  return _internal_mutable_comment();
}
inline const std::string& CreateRequest::_internal_comment() const {
  return comment_.Get();
}
inline void CreateRequest::_internal_set_comment(const std::string& value) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_comment(std::string&& value) {
  
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:node.CreateRequest.comment)
}
inline void CreateRequest::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:node.CreateRequest.comment)
}
inline void CreateRequest::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:node.CreateRequest.comment)
}
inline std::string* CreateRequest::_internal_mutable_comment() {
  
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_comment() {
  // @@protoc_insertion_point(field_release:node.CreateRequest.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:node.CreateRequest.comment)
}
inline std::string* CreateRequest::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:node.CreateRequest.comment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return comment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_comment(
    std::string* comment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.CreateRequest.comment)
}

// -------------------------------------------------------------------

// CreateReply

// .common.ReplyHeader header = 1;
inline bool CreateReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CreateReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& CreateReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& CreateReply::header() const {
  // @@protoc_insertion_point(field_get:node.CreateReply.header)
  return _internal_header();
}
inline void CreateReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.CreateReply.header)
}
inline ::common::ReplyHeader* CreateReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* CreateReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.CreateReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* CreateReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* CreateReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.CreateReply.header)
  return _internal_mutable_header();
}
inline void CreateReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.CreateReply.header)
}

// int64 id = 2;
inline void CreateReply::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateReply::id() const {
  // @@protoc_insertion_point(field_get:node.CreateReply.id)
  return _internal_id();
}
inline void CreateReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void CreateReply::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:node.CreateReply.id)
}

// -------------------------------------------------------------------

// RemoveRequest

// .common.RequestHeader header = 1;
inline bool RemoveRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RemoveRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& RemoveRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& RemoveRequest::header() const {
  // @@protoc_insertion_point(field_get:node.RemoveRequest.header)
  return _internal_header();
}
inline void RemoveRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.RemoveRequest.header)
}
inline ::common::RequestHeader* RemoveRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* RemoveRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.RemoveRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* RemoveRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* RemoveRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.RemoveRequest.header)
  return _internal_mutable_header();
}
inline void RemoveRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.RemoveRequest.header)
}

// repeated int64 ids = 2;
inline int RemoveRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int RemoveRequest::ids_size() const {
  return _internal_ids_size();
}
inline void RemoveRequest::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoveRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoveRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:node.RemoveRequest.ids)
  return _internal_ids(index);
}
inline void RemoveRequest::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:node.RemoveRequest.ids)
}
inline void RemoveRequest::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Add(value);
}
inline void RemoveRequest::add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:node.RemoveRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RemoveRequest::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RemoveRequest::ids() const {
  // @@protoc_insertion_point(field_list:node.RemoveRequest.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RemoveRequest::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RemoveRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:node.RemoveRequest.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// RemoveReply

// .common.ReplyHeader header = 1;
inline bool RemoveReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RemoveReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& RemoveReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& RemoveReply::header() const {
  // @@protoc_insertion_point(field_get:node.RemoveReply.header)
  return _internal_header();
}
inline void RemoveReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.RemoveReply.header)
}
inline ::common::ReplyHeader* RemoveReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* RemoveReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.RemoveReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* RemoveReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* RemoveReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.RemoveReply.header)
  return _internal_mutable_header();
}
inline void RemoveReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.RemoveReply.header)
}

// -------------------------------------------------------------------

// StatusRequest

// .common.RequestHeader header = 1;
inline bool StatusRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StatusRequest::has_header() const {
  return _internal_has_header();
}
inline const ::common::RequestHeader& StatusRequest::_internal_header() const {
  const ::common::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::RequestHeader*>(
      &::common::_RequestHeader_default_instance_);
}
inline const ::common::RequestHeader& StatusRequest::header() const {
  // @@protoc_insertion_point(field_get:node.StatusRequest.header)
  return _internal_header();
}
inline void StatusRequest::unsafe_arena_set_allocated_header(
    ::common::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.StatusRequest.header)
}
inline ::common::RequestHeader* StatusRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::RequestHeader* StatusRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.StatusRequest.header)
  
  ::common::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::RequestHeader* StatusRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::RequestHeader* StatusRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.StatusRequest.header)
  return _internal_mutable_header();
}
inline void StatusRequest::set_allocated_header(::common::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.StatusRequest.header)
}

// repeated int64 node_ids = 2;
inline int StatusRequest::_internal_node_ids_size() const {
  return node_ids_.size();
}
inline int StatusRequest::node_ids_size() const {
  return _internal_node_ids_size();
}
inline void StatusRequest::clear_node_ids() {
  node_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusRequest::_internal_node_ids(int index) const {
  return node_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusRequest::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:node.StatusRequest.node_ids)
  return _internal_node_ids(index);
}
inline void StatusRequest::set_node_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:node.StatusRequest.node_ids)
}
inline void StatusRequest::_internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  node_ids_.Add(value);
}
inline void StatusRequest::add_node_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_node_ids(value);
  // @@protoc_insertion_point(field_add:node.StatusRequest.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
StatusRequest::_internal_node_ids() const {
  return node_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
StatusRequest::node_ids() const {
  // @@protoc_insertion_point(field_list:node.StatusRequest.node_ids)
  return _internal_node_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
StatusRequest::_internal_mutable_node_ids() {
  return &node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
StatusRequest::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:node.StatusRequest.node_ids)
  return _internal_mutable_node_ids();
}

// -------------------------------------------------------------------

// StatusReply

// .common.ReplyHeader header = 1;
inline bool StatusReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StatusReply::has_header() const {
  return _internal_has_header();
}
inline const ::common::ReplyHeader& StatusReply::_internal_header() const {
  const ::common::ReplyHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::ReplyHeader*>(
      &::common::_ReplyHeader_default_instance_);
}
inline const ::common::ReplyHeader& StatusReply::header() const {
  // @@protoc_insertion_point(field_get:node.StatusReply.header)
  return _internal_header();
}
inline void StatusReply::unsafe_arena_set_allocated_header(
    ::common::ReplyHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.StatusReply.header)
}
inline ::common::ReplyHeader* StatusReply::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ReplyHeader* StatusReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:node.StatusReply.header)
  
  ::common::ReplyHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::ReplyHeader* StatusReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ReplyHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::common::ReplyHeader* StatusReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:node.StatusReply.header)
  return _internal_mutable_header();
}
inline void StatusReply::set_allocated_header(::common::ReplyHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:node.StatusReply.header)
}

// repeated .node.NodeStatus status_list = 2;
inline int StatusReply::_internal_status_list_size() const {
  return status_list_.size();
}
inline int StatusReply::status_list_size() const {
  return _internal_status_list_size();
}
inline ::node::NodeStatus* StatusReply::mutable_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:node.StatusReply.status_list)
  return status_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeStatus >*
StatusReply::mutable_status_list() {
  // @@protoc_insertion_point(field_mutable_list:node.StatusReply.status_list)
  return &status_list_;
}
inline const ::node::NodeStatus& StatusReply::_internal_status_list(int index) const {
  return status_list_.Get(index);
}
inline const ::node::NodeStatus& StatusReply::status_list(int index) const {
  // @@protoc_insertion_point(field_get:node.StatusReply.status_list)
  return _internal_status_list(index);
}
inline ::node::NodeStatus* StatusReply::_internal_add_status_list() {
  return status_list_.Add();
}
inline ::node::NodeStatus* StatusReply::add_status_list() {
  // @@protoc_insertion_point(field_add:node.StatusReply.status_list)
  return _internal_add_status_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeStatus >&
StatusReply::status_list() const {
  // @@protoc_insertion_point(field_list:node.StatusReply.status_list)
  return status_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5fservice_2eproto
