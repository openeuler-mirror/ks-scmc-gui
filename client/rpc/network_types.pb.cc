// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_types.proto

#include "network_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_network_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Subnet_network_5ftypes_2eproto;
namespace network {
class SubnetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subnet> _instance;
} _Subnet_default_instance_;
class RealNetworkInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealNetworkInterface> _instance;
} _RealNetworkInterface_default_instance_;
class BridgeNetworkInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BridgeNetworkInterface> _instance;
} _BridgeNetworkInterface_default_instance_;
}  // namespace network
static void InitDefaultsscc_info_BridgeNetworkInterface_network_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network::_BridgeNetworkInterface_default_instance_;
    new (ptr) ::network::BridgeNetworkInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::network::BridgeNetworkInterface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BridgeNetworkInterface_network_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BridgeNetworkInterface_network_5ftypes_2eproto}, {
      &scc_info_Subnet_network_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RealNetworkInterface_network_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network::_RealNetworkInterface_default_instance_;
    new (ptr) ::network::RealNetworkInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::network::RealNetworkInterface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealNetworkInterface_network_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RealNetworkInterface_network_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Subnet_network_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network::_Subnet_default_instance_;
    new (ptr) ::network::Subnet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::network::Subnet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Subnet_network_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Subnet_network_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_network_5ftypes_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_network_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_network_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_network_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::Subnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network::Subnet, addr_),
  PROTOBUF_FIELD_OFFSET(::network::Subnet, prefix_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::RealNetworkInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network::RealNetworkInterface, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::BridgeNetworkInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network::BridgeNetworkInterface, node_id_),
  PROTOBUF_FIELD_OFFSET(::network::BridgeNetworkInterface, name_),
  PROTOBUF_FIELD_OFFSET(::network::BridgeNetworkInterface, subnet_),
  PROTOBUF_FIELD_OFFSET(::network::BridgeNetworkInterface, ip_range_),
  PROTOBUF_FIELD_OFFSET(::network::BridgeNetworkInterface, gateway_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::network::Subnet)},
  { 7, -1, sizeof(::network::RealNetworkInterface)},
  { 13, -1, sizeof(::network::BridgeNetworkInterface)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network::_Subnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network::_RealNetworkInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network::_BridgeNetworkInterface_default_instance_),
};

const char descriptor_table_protodef_network_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023network_types.proto\022\007network\"*\n\006Subnet"
  "\022\014\n\004addr\030\001 \001(\t\022\022\n\nprefix_len\030\002 \001(\005\"\'\n\024Re"
  "alNetworkInterface\022\017\n\007node_id\030\001 \001(\003\"\214\001\n\026"
  "BridgeNetworkInterface\022\017\n\007node_id\030\001 \001(\003\022"
  "\014\n\004name\030\002 \001(\t\022\037\n\006subnet\030\003 \001(\0132\017.network."
  "Subnet\022!\n\010ip_range\030\004 \001(\0132\017.network.Subne"
  "t\022\017\n\007gateway\030\005 \001(\tB\025Z\023scmc/rpc/pb/networ"
  "kb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_network_5ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_network_5ftypes_2eproto_sccs[3] = {
  &scc_info_BridgeNetworkInterface_network_5ftypes_2eproto.base,
  &scc_info_RealNetworkInterface_network_5ftypes_2eproto.base,
  &scc_info_Subnet_network_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_network_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_5ftypes_2eproto = {
  false, false, descriptor_table_protodef_network_5ftypes_2eproto, "network_types.proto", 289,
  &descriptor_table_network_5ftypes_2eproto_once, descriptor_table_network_5ftypes_2eproto_sccs, descriptor_table_network_5ftypes_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_network_5ftypes_2eproto::offsets,
  file_level_metadata_network_5ftypes_2eproto, 3, file_level_enum_descriptors_network_5ftypes_2eproto, file_level_service_descriptors_network_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_network_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_network_5ftypes_2eproto)), true);
namespace network {

// ===================================================================

void Subnet::InitAsDefaultInstance() {
}
class Subnet::_Internal {
 public:
};

Subnet::Subnet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network.Subnet)
}
Subnet::Subnet(const Subnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:network.Subnet)
}

void Subnet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subnet_network_5ftypes_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0;
}

Subnet::~Subnet() {
  // @@protoc_insertion_point(destructor:network.Subnet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Subnet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Subnet::ArenaDtor(void* object) {
  Subnet* _this = reinterpret_cast< Subnet* >(object);
  (void)_this;
}
void Subnet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subnet& Subnet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subnet_network_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Subnet::Clear() {
// @@protoc_insertion_point(message_clear_start:network.Subnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_len_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network.Subnet.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subnet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.Subnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.Subnet.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.Subnet)
  return target;
}

size_t Subnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.Subnet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subnet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.Subnet)
  GOOGLE_DCHECK_NE(&from, this);
  const Subnet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subnet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.Subnet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.Subnet)
    MergeFrom(*source);
  }
}

void Subnet::MergeFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.Subnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void Subnet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.Subnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subnet::CopyFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.Subnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subnet::IsInitialized() const {
  return true;
}

void Subnet::InternalSwap(Subnet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subnet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RealNetworkInterface::InitAsDefaultInstance() {
}
class RealNetworkInterface::_Internal {
 public:
};

RealNetworkInterface::RealNetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network.RealNetworkInterface)
}
RealNetworkInterface::RealNetworkInterface(const RealNetworkInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:network.RealNetworkInterface)
}

void RealNetworkInterface::SharedCtor() {
  node_id_ = PROTOBUF_LONGLONG(0);
}

RealNetworkInterface::~RealNetworkInterface() {
  // @@protoc_insertion_point(destructor:network.RealNetworkInterface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealNetworkInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RealNetworkInterface::ArenaDtor(void* object) {
  RealNetworkInterface* _this = reinterpret_cast< RealNetworkInterface* >(object);
  (void)_this;
}
void RealNetworkInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealNetworkInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealNetworkInterface& RealNetworkInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealNetworkInterface_network_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void RealNetworkInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:network.RealNetworkInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealNetworkInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealNetworkInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RealNetworkInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RealNetworkInterface)
  return target;
}

size_t RealNetworkInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.RealNetworkInterface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealNetworkInterface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.RealNetworkInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const RealNetworkInterface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealNetworkInterface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.RealNetworkInterface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.RealNetworkInterface)
    MergeFrom(*source);
  }
}

void RealNetworkInterface::MergeFrom(const RealNetworkInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.RealNetworkInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void RealNetworkInterface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.RealNetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealNetworkInterface::CopyFrom(const RealNetworkInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.RealNetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealNetworkInterface::IsInitialized() const {
  return true;
}

void RealNetworkInterface::InternalSwap(RealNetworkInterface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RealNetworkInterface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BridgeNetworkInterface::InitAsDefaultInstance() {
  ::network::_BridgeNetworkInterface_default_instance_._instance.get_mutable()->subnet_ = const_cast< ::network::Subnet*>(
      ::network::Subnet::internal_default_instance());
  ::network::_BridgeNetworkInterface_default_instance_._instance.get_mutable()->ip_range_ = const_cast< ::network::Subnet*>(
      ::network::Subnet::internal_default_instance());
}
class BridgeNetworkInterface::_Internal {
 public:
  static const ::network::Subnet& subnet(const BridgeNetworkInterface* msg);
  static const ::network::Subnet& ip_range(const BridgeNetworkInterface* msg);
};

const ::network::Subnet&
BridgeNetworkInterface::_Internal::subnet(const BridgeNetworkInterface* msg) {
  return *msg->subnet_;
}
const ::network::Subnet&
BridgeNetworkInterface::_Internal::ip_range(const BridgeNetworkInterface* msg) {
  return *msg->ip_range_;
}
BridgeNetworkInterface::BridgeNetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network.BridgeNetworkInterface)
}
BridgeNetworkInterface::BridgeNetworkInterface(const BridgeNetworkInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gateway().empty()) {
    gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gateway(),
      GetArena());
  }
  if (from._internal_has_subnet()) {
    subnet_ = new ::network::Subnet(*from.subnet_);
  } else {
    subnet_ = nullptr;
  }
  if (from._internal_has_ip_range()) {
    ip_range_ = new ::network::Subnet(*from.ip_range_);
  } else {
    ip_range_ = nullptr;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:network.BridgeNetworkInterface)
}

void BridgeNetworkInterface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BridgeNetworkInterface_network_5ftypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&subnet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&subnet_)) + sizeof(node_id_));
}

BridgeNetworkInterface::~BridgeNetworkInterface() {
  // @@protoc_insertion_point(destructor:network.BridgeNetworkInterface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BridgeNetworkInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subnet_;
  if (this != internal_default_instance()) delete ip_range_;
}

void BridgeNetworkInterface::ArenaDtor(void* object) {
  BridgeNetworkInterface* _this = reinterpret_cast< BridgeNetworkInterface* >(object);
  (void)_this;
}
void BridgeNetworkInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BridgeNetworkInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BridgeNetworkInterface& BridgeNetworkInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BridgeNetworkInterface_network_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void BridgeNetworkInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:network.BridgeNetworkInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && subnet_ != nullptr) {
    delete subnet_;
  }
  subnet_ = nullptr;
  if (GetArena() == nullptr && ip_range_ != nullptr) {
    delete ip_range_;
  }
  ip_range_ = nullptr;
  node_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeNetworkInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network.BridgeNetworkInterface.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .network.Subnet subnet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .network.Subnet ip_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gateway = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network.BridgeNetworkInterface.gateway"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BridgeNetworkInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.BridgeNetworkInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.BridgeNetworkInterface.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .network.Subnet subnet = 3;
  if (this->has_subnet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::subnet(this), target, stream);
  }

  // .network.Subnet ip_range = 4;
  if (this->has_ip_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ip_range(this), target, stream);
  }

  // string gateway = 5;
  if (this->gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.BridgeNetworkInterface.gateway");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gateway(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.BridgeNetworkInterface)
  return target;
}

size_t BridgeNetworkInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.BridgeNetworkInterface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string gateway = 5;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());
  }

  // .network.Subnet subnet = 3;
  if (this->has_subnet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnet_);
  }

  // .network.Subnet ip_range = 4;
  if (this->has_ip_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_range_);
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeNetworkInterface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network.BridgeNetworkInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeNetworkInterface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BridgeNetworkInterface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network.BridgeNetworkInterface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network.BridgeNetworkInterface)
    MergeFrom(*source);
  }
}

void BridgeNetworkInterface::MergeFrom(const BridgeNetworkInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.BridgeNetworkInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.gateway().size() > 0) {
    _internal_set_gateway(from._internal_gateway());
  }
  if (from.has_subnet()) {
    _internal_mutable_subnet()->::network::Subnet::MergeFrom(from._internal_subnet());
  }
  if (from.has_ip_range()) {
    _internal_mutable_ip_range()->::network::Subnet::MergeFrom(from._internal_ip_range());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void BridgeNetworkInterface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network.BridgeNetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeNetworkInterface::CopyFrom(const BridgeNetworkInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.BridgeNetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeNetworkInterface::IsInitialized() const {
  return true;
}

void BridgeNetworkInterface::InternalSwap(BridgeNetworkInterface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BridgeNetworkInterface, node_id_)
      + sizeof(BridgeNetworkInterface::node_id_)
      - PROTOBUF_FIELD_OFFSET(BridgeNetworkInterface, subnet_)>(
          reinterpret_cast<char*>(&subnet_),
          reinterpret_cast<char*>(&other->subnet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeNetworkInterface::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::Subnet* Arena::CreateMaybeMessage< ::network::Subnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::Subnet >(arena);
}
template<> PROTOBUF_NOINLINE ::network::RealNetworkInterface* Arena::CreateMaybeMessage< ::network::RealNetworkInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::RealNetworkInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::network::BridgeNetworkInterface* Arena::CreateMaybeMessage< ::network::BridgeNetworkInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::BridgeNetworkInterface >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
