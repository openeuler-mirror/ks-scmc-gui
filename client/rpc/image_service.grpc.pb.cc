// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image_service.proto

#include "image_service.pb.h"
#include "image_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace image {

static const char* Image_method_names[] = {
  "/image.Image/List",
  "/image.Image/ListDB",
  "/image.Image/Upload",
  "/image.Image/Update",
  "/image.Image/Download",
  "/image.Image/Check",
  "/image.Image/Remove",
};

std::unique_ptr< Image::Stub> Image::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Image::Stub> stub(new Image::Stub(channel));
  return stub;
}

Image::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(Image_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDB_(Image_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Upload_(Image_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Update_(Image_method_names[3], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Download_(Image_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Check_(Image_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(Image_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Image::Stub::List(::grpc::ClientContext* context, const ::image::ListRequest& request, ::image::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void Image::Stub::experimental_async::List(::grpc::ClientContext* context, const ::image::ListRequest* request, ::image::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::List(::grpc::ClientContext* context, const ::image::ListRequest* request, ::image::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void Image::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::image::ListReply>* Image::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::image::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::image::ListReply>* Image::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::image::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status Image::Stub::ListDB(::grpc::ClientContext* context, const ::image::ListDBRequest& request, ::image::ListDBReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDB_, context, request, response);
}

void Image::Stub::experimental_async::ListDB(::grpc::ClientContext* context, const ::image::ListDBRequest* request, ::image::ListDBReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDB_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::ListDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::ListDBReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDB_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::ListDB(::grpc::ClientContext* context, const ::image::ListDBRequest* request, ::image::ListDBReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDB_, context, request, response, reactor);
}

void Image::Stub::experimental_async::ListDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::ListDBReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::image::ListDBReply>* Image::Stub::AsyncListDBRaw(::grpc::ClientContext* context, const ::image::ListDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::ListDBReply>::Create(channel_.get(), cq, rpcmethod_ListDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::image::ListDBReply>* Image::Stub::PrepareAsyncListDBRaw(::grpc::ClientContext* context, const ::image::ListDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::ListDBReply>::Create(channel_.get(), cq, rpcmethod_ListDB_, context, request, false);
}

::grpc::ClientWriter< ::image::UploadRequest>* Image::Stub::UploadRaw(::grpc::ClientContext* context, ::image::UploadReply* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::image::UploadRequest>::Create(channel_.get(), rpcmethod_Upload_, context, response);
}

void Image::Stub::experimental_async::Upload(::grpc::ClientContext* context, ::image::UploadReply* response, ::grpc::experimental::ClientWriteReactor< ::image::UploadRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::image::UploadRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::image::UploadRequest>* Image::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::image::UploadReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::image::UploadRequest>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::image::UploadRequest>* Image::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::image::UploadReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::image::UploadRequest>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::image::UpdateRequest>* Image::Stub::UpdateRaw(::grpc::ClientContext* context, ::image::UpdateReply* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::image::UpdateRequest>::Create(channel_.get(), rpcmethod_Update_, context, response);
}

void Image::Stub::experimental_async::Update(::grpc::ClientContext* context, ::image::UpdateReply* response, ::grpc::experimental::ClientWriteReactor< ::image::UpdateRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::image::UpdateRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::image::UpdateRequest>* Image::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, ::image::UpdateReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::image::UpdateRequest>::Create(channel_.get(), cq, rpcmethod_Update_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::image::UpdateRequest>* Image::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, ::image::UpdateReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::image::UpdateRequest>::Create(channel_.get(), cq, rpcmethod_Update_, context, response, false, nullptr);
}

::grpc::ClientReader< ::image::DownloadReply>* Image::Stub::DownloadRaw(::grpc::ClientContext* context, const ::image::DownloadRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::image::DownloadReply>::Create(channel_.get(), rpcmethod_Download_, context, request);
}

void Image::Stub::experimental_async::Download(::grpc::ClientContext* context, ::image::DownloadRequest* request, ::grpc::experimental::ClientReadReactor< ::image::DownloadReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::image::DownloadReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::image::DownloadReply>* Image::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::image::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::image::DownloadReply>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::image::DownloadReply>* Image::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::image::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::image::DownloadReply>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, false, nullptr);
}

::grpc::Status Image::Stub::Check(::grpc::ClientContext* context, const ::image::CheckRequest& request, ::image::CheckReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

void Image::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::image::CheckRequest* request, ::image::CheckReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::CheckReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::image::CheckRequest* request, ::image::CheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

void Image::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::CheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::image::CheckReply>* Image::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::image::CheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::CheckReply>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::image::CheckReply>* Image::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::image::CheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::CheckReply>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

::grpc::Status Image::Stub::Remove(::grpc::ClientContext* context, const ::image::RemoveRequest& request, ::image::RemoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void Image::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::image::RemoveRequest* request, ::image::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Image::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::image::RemoveRequest* request, ::image::RemoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

void Image::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image::RemoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::image::RemoveReply>* Image::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::image::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::RemoveReply>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::image::RemoveReply>* Image::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::image::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::image::RemoveReply>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

Image::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Image::Service, ::image::ListRequest, ::image::ListReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::image::ListRequest* req,
             ::image::ListReply* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Image::Service, ::image::ListDBRequest, ::image::ListDBReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::image::ListDBRequest* req,
             ::image::ListDBReply* resp) {
               return service->ListDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Image::Service, ::image::UploadRequest, ::image::UploadReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReader<::image::UploadRequest>* reader,
             ::image::UploadReply* resp) {
               return service->Upload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Image::Service, ::image::UpdateRequest, ::image::UpdateReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReader<::image::UpdateRequest>* reader,
             ::image::UpdateReply* resp) {
               return service->Update(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Image::Service, ::image::DownloadRequest, ::image::DownloadReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::image::DownloadRequest* req,
             ::grpc_impl::ServerWriter<::image::DownloadReply>* writer) {
               return service->Download(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Image::Service, ::image::CheckRequest, ::image::CheckReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::image::CheckRequest* req,
             ::image::CheckReply* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Image_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Image::Service, ::image::RemoveRequest, ::image::RemoveReply>(
          [](Image::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::image::RemoveRequest* req,
             ::image::RemoveReply* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
}

Image::Service::~Service() {
}

::grpc::Status Image::Service::List(::grpc::ServerContext* context, const ::image::ListRequest* request, ::image::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Image::Service::ListDB(::grpc::ServerContext* context, const ::image::ListDBRequest* request, ::image::ListDBReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Image::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::image::UploadRequest>* reader, ::image::UploadReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Image::Service::Update(::grpc::ServerContext* context, ::grpc::ServerReader< ::image::UpdateRequest>* reader, ::image::UpdateReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Image::Service::Download(::grpc::ServerContext* context, const ::image::DownloadRequest* request, ::grpc::ServerWriter< ::image::DownloadReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Image::Service::Check(::grpc::ServerContext* context, const ::image::CheckRequest* request, ::image::CheckReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Image::Service::Remove(::grpc::ServerContext* context, const ::image::RemoveRequest* request, ::image::RemoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace image

